// services/types.ts
// Copy of the necessary types from backend/types.ts

/**
 * Re-export the Contact interface from domain.ts
 * 
 * @deprecated Direct import from types/domain.ts is preferred
 */
export type { Contact } from '../../types/domain';

// ContactCreatePayload is what the contacts.ts Netlify function *expects as input* for creation.
// It should now receive first_name and last_name, and will parse them internally.
export interface ContactCreatePayload {
  // Personal information
  first_name: string;
  middle_name?: string | null;
  last_name: string | null;
  nickname?: string | null;
  birthday?: string | null;
  
  // Contact information
  email?: string | null;
  phone?: string | null;
  mobile_phone?: string | null;
  work_phone?: string | null;
  website?: string | null;
  
  // Address fields
  street_address?: string | null;
  street_address_2?: string | null;
  city?: string | null;
  state_province?: string | null;
  postal_code?: string | null;
  country?: string | null;
  
  // Professional information
  company?: string | null;
  job_title?: string | null;
  department?: string | null;
  
  // Social media fields
  social_linkedin?: string | null;
  social_twitter?: string | null;
  
  // Tags and preferences
  tags?: string[] | null;
  preferred_contact_method?: string | null;
  timezone?: string | null;
  language?: string | null;
  
  // Additional information
  notes?: string | null;
  
  // System fields
  formatted_address?: string | null; // Auto-generated from address components
}

/**
 * Special payload type for DELETE operations that are emulated through POST
 */
export interface ContactDeletePayload {
  contact_id: string;
  _method: 'DELETE';
}

/**
 * Represents the payload for updating an existing contact.
 * All fields are optional, as an update might only modify a subset of contact details.
 * The contact to be updated will be identified by 'contact_id' or another unique 'identifier' separately.
 */
export interface ContactUpdatePayload {
  // Personal information
  first_name?: string;
  middle_name?: string | null;
  last_name?: string;
  nickname?: string | null;
  birthday?: string | null;
  
  // Contact information
  email?: string | null;
  phone?: string | null;
  mobile_phone?: string | null;
  work_phone?: string | null;
  website?: string | null;
  
  // Address fields
  street_address?: string | null;
  street_address_2?: string | null;
  city?: string | null;
  state_province?: string | null;
  postal_code?: string | null;
  country?: string | null;
  
  // Professional information
  company?: string | null;
  job_title?: string | null;
  department?: string | null;
  
  // Social media fields
  social_linkedin?: string | null;
  social_twitter?: string | null;
  
  // Tags and preferences
  tags?: string[] | null;
  preferred_contact_method?: string | null;
  timezone?: string | null;
  language?: string | null;
  
  // Additional information
  notes?: string | null;
  
  // System fields
  formatted_address?: string | null; // Auto-generated from address components
}

/**
 * Represents a Calendar Event.
 */
export interface CalendarEvent {
  event_id: string; // Was id, changed to match schema, non-optional for retrieved events
  user_id: string;
  title: string;
  description?: string | null; // Changed to allow null
  start_time: string; // Non-optional
  end_time: string;   // Non-optional
  is_all_day: boolean; // Indicates if this is an all-day event
  location?: string | null;  // Changed to allow null
  google_event_id?: string | null; // Added from schema
  zoom_meeting_id?: string | null; // Added from schema
  created_at: string; // Non-optional for retrieved events
  updated_at: string; // Non-optional for retrieved events
  // Attendees field removed as it's not in the schema table
}

// Type alias for CalendarEventCreatePayload
export type CalendarEventCreatePayload = Omit<CalendarEvent, 'event_id' | 'user_id' | 'created_at' | 'updated_at'>;
// user_id will be inferred by the backend function.
// created_at and updated_at are set by the database.
// event_id is generated by the database.
// title, start_time, end_time are required from client for creation.
// description, location, google_event_id, zoom_meeting_id are optional.

// --- Integration Types ---

/**
 * Defines the supported integration providers.
 */
export type IntegrationProvider = 'google' | 'zoom';

/**
 * Represents the structure of an integration record, storing OAuth tokens
 * and related information for services like Google or Zoom.
 * Timestamps are represented as ISO 8601 strings, consistent with Supabase responses.
 */
export interface Integration {
  integration_id: string;          // UUID
  user_id: string;                 // UUID, foreign key to profiles.id
  provider: IntegrationProvider;
  access_token: string;
  refresh_token?: string | null;
  expires_at?: string | null;       // ISO 8601 date string
  scopes?: string[] | null;         // Array of granted OAuth scopes
  created_at: string;              // ISO 8601 date string
  updated_at: string;              // ISO 8601 date string
}

// --- Profile Type ---

/**
 * Represents the structure of a user's profile data as stored in the
 * public.profiles table, linked to auth.users.
 */
export interface Profile {
  id: string;                    // UUID, matches auth.users.id
  updated_at: string;            // ISO 8601 timestamp, non-nullable from DB
  first_name?: string | null;
  last_name?: string | null;
  avatar_url?: string | null;
  is_custom_verified: boolean;   // Indicates if the user has verified their email via our custom flow
}

// --- Chat History Types ---

/**
 * Represents a message displayed in the chat UI.
 */
export interface ChatMessage {
  id: string; // Client-generated unique ID for React keys and optimistic updates
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: string; // ISO 8601 timestamp
  // Add any other relevant fields for display messages, e.g., status: 'sending' | 'sent' | 'failed'
}

/**
 * Represents a message logged for API context.
 */
export interface ApiLogMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
  // Add any other relevant fields for API log messages
}

/**
 * Represents the structure of the object stored in the 'message_object' JSONB column
 * in the 'conversation_history' table.
 */
export type StoredChatMessage = 
  | { type: 'display'; data: ChatMessage }
  | { type: 'api_log'; data: ApiLogMessage };
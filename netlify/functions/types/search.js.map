{"version":3,"file":"search.js","sourceRoot":"","sources":["../../../src/backend/types/search.ts"],"names":[],"mappings":"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","sourcesContent":["// backend/types/search.ts\nimport { Contact } from './domain';\n\n/**\n * Enhanced Contact interface with search-specific fields\n */\nexport interface RankedContact extends Contact {\n  /**\n   * Search relevance score (higher is better match)\n   * This is calculated by the search_contacts_optimized database function\n   */\n  match_score: number;\n}\n\n/**\n * Parameters for contact search\n */\nexport interface ContactSearchParams {\n  /**\n   * User's query string (what they're searching for)\n   */\n  query: string;\n  \n  /**\n   * Maximum number of results to return (default: 50)\n   */\n  limit?: number;\n  \n  /**\n   * Number of results to skip (for pagination)\n   */\n  offset?: number;\n  \n  /**\n   * Fields to return (default: all)\n   */\n  fields?: string[];\n}\n\n/**\n * Response format for contact search results\n */\nexport interface ContactSearchResponse {\n  /**\n   * Array of contacts matching the search\n   */\n  contacts: Contact[];\n  \n  /**\n   * Total number of matching contacts (for pagination)\n   */\n  total: number;\n  \n  /**\n   * Whether there are more results available\n   */\n  hasMore: boolean;\n  \n  /**\n   * Whether this result came from cache\n   */\n  cached?: boolean;\n}\n\n/**\n * Enhanced search response with ranked contacts\n */\nexport interface RankedContactSearchResponse extends ContactSearchResponse {\n  /**\n   * Array of contacts with match scores\n   */\n  contacts: RankedContact[];\n}\n\n/**\n * Type guard to check if a contact has a match score\n */\nexport function isRankedContact(contact: Contact | RankedContact): contact is RankedContact {\n  return 'match_score' in contact;\n}\n\n/**\n * Instant search result for frontend consumption\n */\nexport interface InstantSearchResult {\n  /**\n   * Formatted messages for display\n   */\n  messages: Array<{\n    role: string;\n    content: string;\n  }>;\n  \n  /**\n   * Structured data for UI rendering\n   */\n  structuredData?: {\n    contacts: Contact[];\n  };\n  \n  /**\n   * Metadata about the search\n   */\n  searchMetadata: {\n    totalFound: number;\n    hasMore: boolean;\n    cached: boolean;\n  };\n}\n\n/**\n * Enum for search match types to improve type safety\n */\nexport enum SearchMatchType {\n  EXACT_FULL_NAME = 'EXACT_FULL_NAME',\n  EXACT_FIRST_NAME = 'EXACT_FIRST_NAME',\n  EXACT_LAST_NAME = 'EXACT_LAST_NAME',\n  PARTIAL_NAME = 'PARTIAL_NAME',\n  CONTACT_INFO = 'CONTACT_INFO',\n  COMPANY_INFO = 'COMPANY_INFO',\n  GENERAL_INFO = 'GENERAL_INFO',\n  NO_MATCH = 'NO_MATCH'\n}\n\n/**\n * Function to determine the match type between a contact and a query string\n */\nexport function determineMatchType(\n  contact: Contact, \n  query: string\n): SearchMatchType {\n  if (!query) return SearchMatchType.NO_MATCH;\n  \n  const cleanQuery = query.trim().toLowerCase();\n  const fullName = `${contact.first_name || ''} ${contact.last_name || ''}`.trim().toLowerCase();\n  \n  if (fullName === cleanQuery) {\n    return SearchMatchType.EXACT_FULL_NAME;\n  }\n  \n  if (contact.first_name?.toLowerCase() === cleanQuery) {\n    return SearchMatchType.EXACT_FIRST_NAME;\n  }\n  \n  if (contact.last_name?.toLowerCase() === cleanQuery) {\n    return SearchMatchType.EXACT_LAST_NAME;\n  }\n  \n  if (fullName.includes(cleanQuery) || \n      (contact.first_name?.toLowerCase().includes(cleanQuery)) || \n      (contact.last_name?.toLowerCase().includes(cleanQuery))) {\n    return SearchMatchType.PARTIAL_NAME;\n  }\n  \n  if ((contact.email?.toLowerCase().includes(cleanQuery)) || \n      (contact.phone?.includes(cleanQuery))) {\n    return SearchMatchType.CONTACT_INFO;\n  }\n  \n  if ((contact.company?.toLowerCase().includes(cleanQuery)) || \n      (contact.job_title?.toLowerCase().includes(cleanQuery))) {\n    return SearchMatchType.COMPANY_INFO;\n  }\n  \n  // Check address fields\n  if ((contact.formatted_address?.toLowerCase().includes(cleanQuery)) || \n      (contact.street_address?.toLowerCase().includes(cleanQuery)) || \n      (contact.street_address_2?.toLowerCase().includes(cleanQuery)) || \n      (contact.city?.toLowerCase().includes(cleanQuery)) || \n      (contact.state_province?.toLowerCase().includes(cleanQuery)) || \n      (contact.postal_code?.toLowerCase().includes(cleanQuery)) || \n      (contact.country?.toLowerCase().includes(cleanQuery)) || \n      (contact.notes?.toLowerCase().includes(cleanQuery))) {\n    return SearchMatchType.GENERAL_INFO;\n  }\n  \n  return SearchMatchType.NO_MATCH;\n}\n\n/**\n * Groups contacts by their match type relative to a search query\n */\nexport function groupContactsByMatchType<T extends Contact>(\n  contacts: T[],\n  query: string\n): Map<SearchMatchType, T[]> {\n  const contactsByMatchType = new Map<SearchMatchType, T[]>();\n  \n  // Initialize all match type groups\n  Object.values(SearchMatchType).forEach(matchType => {\n    contactsByMatchType.set(matchType, []);\n  });\n  \n  // Categorize each contact by match type\n  contacts.forEach(contact => {\n    const matchType = determineMatchType(contact, query);\n    const matchGroup = contactsByMatchType.get(matchType) || [];\n    matchGroup.push(contact);\n    contactsByMatchType.set(matchType, matchGroup);\n  });\n  \n  return contactsByMatchType;\n}\n\n/**\n * Prioritizes contacts based on match type relative to a search query\n * Returns a new array with contacts ordered by match type priority\n */\nexport function prioritizeContactsByMatchType<T extends Contact>(\n  contacts: T[],\n  query: string\n): T[] {\n  if (!query.trim() || contacts.length <= 1) return [...contacts];\n  \n  const contactsByMatchType = groupContactsByMatchType(contacts, query);\n  \n  // Build prioritized array based on match type order\n  const prioritized: T[] = [];\n  \n  // Order by match type priority\n  const priorityOrder: SearchMatchType[] = [\n    SearchMatchType.EXACT_FULL_NAME,\n    SearchMatchType.EXACT_FIRST_NAME,\n    SearchMatchType.EXACT_LAST_NAME,\n    SearchMatchType.PARTIAL_NAME,\n    SearchMatchType.CONTACT_INFO,\n    SearchMatchType.COMPANY_INFO,\n    SearchMatchType.GENERAL_INFO,\n    SearchMatchType.NO_MATCH\n  ];\n  \n  // Add contacts in priority order\n  priorityOrder.forEach(matchType => {\n    const matchesForType = contactsByMatchType.get(matchType) || [];\n    prioritized.push(...matchesForType);\n  });\n  \n  return prioritized;\n}"]}
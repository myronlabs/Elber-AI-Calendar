{"version":3,"file":"domain.js","sourceRoot":"","sources":["../../../src/backend/types/domain.ts"],"names":[],"mappings":";AAAA,0BAA0B;;;AAkL1B,IAAY,SAMX;AAND,WAAY,SAAS;IACnB,oDAAuC,CAAA;IACvC,kDAAqC,CAAA;IACrC,kCAAqB,CAAA;IACrB,oCAAuB,CAAA;IACvB,8BAAiB,CAAA;AACnB,CAAC,EANW,SAAS,yBAAT,SAAS,QAMpB;AAED,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,kCAAmB,CAAA;IACnB,sCAAuB,CAAA;IACvB,sCAAuB,CAAA;IACvB,kCAAmB,CAAA;AACrB,CAAC,EALW,WAAW,2BAAX,WAAW,QAKtB;AAED,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,+CAAO,CAAA;IACP,qDAAU,CAAA;IACV,iDAAQ,CAAA;AACV,CAAC,EAJW,aAAa,6BAAb,aAAa,QAIxB","sourcesContent":["// backend/types/domain.ts\n\n/**\n * Type-safe discriminated union for contact identification strategies.\n * This allows identifying a contact in multiple ways without resorting to magic strings.\n */\nexport type ContactIdentifier = \n  | { type: 'id'; contact_id: string }\n  | { type: 'name'; name: string }\n  | { type: 'email'; email: string };\n\n/**\n * Standard error structure for all contact operations\n */\nexport interface OperationError {\n  code: string;\n  message: string;\n  details?: unknown;\n}\n\n/**\n * Standard result type for all contact operations\n */\nexport interface ContactOperationResult<T> {\n  success: boolean;\n  data?: T;\n  error?: OperationError;\n}\n\n/**\n * Represents a Contact, aligning with the Supabase 'contacts' table.\n * Includes all fields from the database schema plus import tracking fields.\n */\nexport interface Contact {\n  // Core fields\n  contact_id: string; // UUID, Primary Key\n  user_id: string; // UUID, Foreign Key to auth.users(id)\n  first_name?: string | null; // TEXT, Optional\n  middle_name?: string | null; // TEXT, Optional\n  last_name?: string | null; // TEXT, Optional\n  nickname?: string | null; // TEXT, Optional\n  email?: string | null; // TEXT, Optional\n  phone?: string | null; // TEXT, Optional\n  mobile_phone?: string | null; // TEXT, Optional\n  work_phone?: string | null; // TEXT, Optional\n  company?: string | null; // TEXT, Optional\n  job_title?: string | null; // TEXT, Optional\n  department?: string | null; // TEXT, Optional\n  \n  // Enhanced address fields\n  street_address?: string | null; // TEXT, Primary street address\n  street_address_2?: string | null; // TEXT, Optional second line of street address\n  city?: string | null; // TEXT, City name\n  state_province?: string | null; // TEXT, State or province\n  postal_code?: string | null; // TEXT, Postal or ZIP code\n  country?: string | null; // TEXT, Country name or ISO code\n  \n  // Formatted address field - automatically generated from address components\n  formatted_address?: string | null; // TEXT, Full formatted address\n  \n  // Social media fields\n  social_linkedin?: string | null; // TEXT, LinkedIn profile URL\n  social_twitter?: string | null; // TEXT, Twitter/X handle\n  \n  // Tags and preferences\n  tags?: string[] | null; // TEXT[], Array of tags for categorization\n  preferred_contact_method?: string | null; // TEXT, Preferred method of contact\n  timezone?: string | null; // TEXT, Contact timezone for scheduling\n  language?: string | null; // TEXT, Preferred language for communication\n  \n  // Other fields\n  website?: string | null; // TEXT, Optional\n  birthday?: string | null; // DATE, Optional\n  notes?: string | null; // TEXT, Optional\n  created_at: string; // TIMESTAMPTZ, NOT NULL\n  updated_at: string; // TIMESTAMPTZ, NOT NULL\n  \n  // Import tracking fields\n  import_source?: string | null; // 'csv', 'google', 'microsoft'\n  import_batch_id?: string | null; // UUID for tracking batch imports\n  imported_at?: string | null; // ISO 8601 timestamp\n  google_contact_id?: string | null; // Google People API resourceName\n  \n  // NOTE: 'full_name' is intentionally excluded, as it's derived from first_name and last_name\n}\n\n/**\n * Represents a Calendar Event.\n * This is a basic structure; it can be expanded based on requirements.\n */\nexport interface CalendarEvent {\n  id: string;\n  user_id: string;\n  title: string;\n  start_time: string; // ISO 8601 format\n  end_time: string; // ISO 8601 format\n  description?: string | null;\n  location?: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\n/**\n * Data for creating a contact\n */\nexport interface CreateContactData {\n  first_name: string;\n  middle_name?: string | null;\n  last_name?: string | null;\n  nickname?: string | null;\n  email?: string | null;\n  phone?: string | null;\n  mobile_phone?: string | null;\n  work_phone?: string | null;\n  company?: string | null;\n  job_title?: string | null;\n  department?: string | null;\n  street_address?: string | null;\n  street_address_2?: string | null;\n  city?: string | null;\n  state_province?: string | null;\n  postal_code?: string | null;\n  country?: string | null;\n  formatted_address?: string | null;\n  social_linkedin?: string | null;\n  social_twitter?: string | null;\n  tags?: string[] | null;\n  preferred_contact_method?: string | null;\n  timezone?: string | null;\n  language?: string | null;\n  website?: string | null;\n  birthday?: string | null;\n  notes?: string | null;\n}\n\n/**\n * Data for updating a contact\n */\nexport interface ContactUpdateData extends Partial<CreateContactData> {\n  contact_id: string;\n}\n\n/**\n * Minimal data for updating a contact\n */\nexport interface MinimalContactUpdateData extends Partial<Omit<Contact, 'contact_id' | 'user_id' | 'created_at' | 'updated_at'>> {\n  contact_id: string;\n  // We omit user_id, created_at, and updated_at as these should not be directly updatable by this minimal interface.\n  // Other fields from Contact become optional.\n}\n\n/**\n * For paginated results\n */\nexport interface Paginated<T> {\n  data: T[];\n  total: number;\n  page: number;\n  limit: number;\n  hasMore: boolean;\n}\n\n/**\n * Group of contacts\n */\nexport interface GroupedContact {\n  id: string;\n  contacts: Contact[];\n}\n\n/**\n * Contact with formatting issues\n */\nexport interface ContactWithFormatIssue extends Contact {\n  issue_type: string;\n  suggested_fix?: string;\n}\n\nexport enum AlertType {\n  UPCOMING_BIRTHDAY = 'upcoming_birthday',\n  MEETING_REMINDER = 'meeting_reminder',\n  TASK_DUE = 'task_due',\n  FOLLOW_UP = 'follow_up',\n  CUSTOM = 'custom'\n}\n\nexport enum AlertStatus {\n  PENDING = 'pending',\n  TRIGGERED = 'triggered',\n  DISMISSED = 'dismissed',\n  SNOOZED = 'snoozed'\n}\n\nexport enum AlertPriority {\n  LOW = 1,\n  MEDIUM = 2,\n  HIGH = 3\n}\n\nexport interface Alert {\n  alert_id: string;\n  user_id: string;\n  title: string;\n  description: string | null;\n  alert_type: AlertType;\n  status: AlertStatus;\n  due_date: string; // ISO format\n  created_at: string; // ISO format\n  updated_at: string; // ISO format\n  snoozed_until: string | null; // ISO format\n  dismissed_at: string | null; // ISO format\n  priority: AlertPriority;\n  contact_id: string | null;\n  event_id: string | null;\n  recurring: boolean;\n  recurrence_rule: string | null; // iCal RRule format\n  parent_alert_id: string | null;\n  metadata: Record<string, unknown> | null;\n  tags: string[] | null;\n}\n\nexport type AlertIdentifier = \n  | { type: 'id'; alert_id: string }\n  | { type: 'title_user'; title: string; user_id: string };\n\nexport interface CreateAlertPayload {\n  title: string;\n  description?: string | null;\n  alert_type: AlertType;\n  due_date: string; // ISO format\n  priority?: AlertPriority;\n  contact_id?: string | null;\n  event_id?: string | null;\n  recurring?: boolean;\n  recurrence_rule?: string | null;\n  metadata?: Record<string, unknown> | null;\n  tags?: string[] | null;\n}\n\nexport interface UpdateAlertPayload {\n  title?: string;\n  description?: string | null;\n  alert_type?: AlertType;\n  status?: AlertStatus;\n  due_date?: string; // ISO format\n  snoozed_until?: string | null; // ISO format\n  priority?: AlertPriority;\n  contact_id?: string | null;\n  event_id?: string | null;\n  recurring?: boolean;\n  recurrence_rule?: string | null;\n  metadata?: Record<string, unknown> | null;\n  tags?: string[] | null;\n}\n"]}
{"version":3,"file":"contactFilters.js","sourceRoot":"","sources":["../../../src/backend/utils/contactFilters.ts"],"names":[],"mappings":";;;AAEA;;;GAGG;AACH,MAAM,sBAAsB,GAAG,IAAI,GAAG,CAAC;IACrC,QAAQ;IACR,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,MAAM;IACN,aAAa;IACb,KAAK;IACL,IAAI;IACJ,MAAM;IACN,MAAM;IACN,WAAW;IACX,SAAS;IACT,aAAa;IACb,kBAAkB;CACnB,CAAC,CAAC;AAEH;;GAEG;AACH,MAAM,sBAAsB,GAAG;IAC7B,+CAA+C;IAC/C,8CAA8C;IAC9C,0CAA0C;IAC1C,iBAAiB,EAAE,uBAAuB;IAC1C,eAAe,CAAC,yBAAyB;CAC1C,CAAC;AAEF;;GAEG;AACH,MAAM,sBAAsB,GAAG;IAC7B,SAAS,EAAE,YAAY;IACvB,SAAS,EAAE,WAAW;IACtB,SAAS,EAAE,qBAAqB;IAChC,YAAY,EAAE,oBAAoB;IAClC,MAAM,EAAE,iCAAiC;IACzC,MAAM,CAAC,qBAAqB;CAC7B,CAAC;AAEF;;;GAGG;AACH,MAAM,4BAA4B,GAAG,CAAC,OAAgB,EAAU,EAAE;IAChE,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,UAAU,GAAG,CAAC,CAAC;IAEnB,gCAAgC;IAChC,IAAI,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC/D,KAAK,IAAI,EAAE,CAAC;QACZ,UAAU,EAAE,CAAC;IACf,CAAC;IACD,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC7D,KAAK,IAAI,EAAE,CAAC;QACZ,UAAU,EAAE,CAAC;IACf,CAAC;IACD,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACjE,KAAK,IAAI,CAAC,CAAC;QACX,UAAU,EAAE,CAAC;IACf,CAAC;IAED,oCAAoC;IACpC,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QAChF,KAAK,IAAI,EAAE,CAAC;QACZ,UAAU,EAAE,CAAC;IACf,CAAC;IACD,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;QAChE,KAAK,IAAI,EAAE,CAAC;QACZ,UAAU,EAAE,CAAC;IACf,CAAC;IAED,sCAAsC;IACtC,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACzD,KAAK,IAAI,EAAE,CAAC;QACZ,UAAU,EAAE,CAAC;IACf,CAAC;IACD,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC7D,KAAK,IAAI,CAAC,CAAC;QACX,UAAU,EAAE,CAAC;IACf,CAAC;IAED,+CAA+C;IAC/C,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC;QACtD,KAAK,IAAI,CAAC,CAAC;QACX,UAAU,EAAE,CAAC;IACf,CAAC;IACD,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QACrD,KAAK,IAAI,CAAC,CAAC;QACX,UAAU,EAAE,CAAC;IACf,CAAC;IACD,IAAI,OAAO,CAAC,cAAc,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;QAC9D,KAAK,IAAI,CAAC,CAAC;QACX,UAAU,EAAE,CAAC;IACf,CAAC;IAED,6BAA6B;IAC7B,IAAI,UAAU,GAAG,CAAC,EAAE,CAAC;QACnB,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,GAAG,EAAE,CAAC,CAAC;IAClC,CAAC;IAED,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAC9B,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,wBAAwB,GAAG,CAAC,OAAgB,EAAW,EAAE;IAC7D,mCAAmC;IACnC,MAAM,SAAS,GAAG,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;IAClE,MAAM,QAAQ,GAAG,CAAC,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;IAChE,MAAM,QAAQ,GAAG,GAAG,SAAS,IAAI,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;IAEnD,mCAAmC;IACnC,IAAI,sBAAsB,CAAC,GAAG,CAAC,SAAS,CAAC;QACrC,sBAAsB,CAAC,GAAG,CAAC,QAAQ,CAAC;QACpC,sBAAsB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;QACzC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,0EAA0E;IAC1E,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACxC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,mCAAmC;IACnC,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;QAClB,MAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;QAC/C,IAAI,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;YACrE,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,mCAAmC;IACnC,MAAM,MAAM,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,OAAO,CAAa,CAAC;IACrG,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;QAC3B,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,oBAAoB;QACjE,IAAI,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;YACrE,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,mBAAmB,GAAG,CAAC,OAAgB,EAAE,SAAiB,EAAW,EAAE;IAC3E,2DAA2D;IAC3D,IAAI,OAAO,CAAC,UAAU,KAAK,QAAQ;QAC/B,CAAC,OAAO,CAAC,SAAS;QAClB,OAAO,CAAC,aAAa,KAAK,QAAQ;QAClC,CAAC,OAAO,CAAC,KAAK;QACd,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACnB,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,0CAA0C,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;QACxF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,4BAA4B;IAC5B,IAAI,wBAAwB,CAAC,OAAO,CAAC,EAAE,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,+CAA+C,OAAO,CAAC,UAAU,WAAW,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,SAAS,IAAI,EAAE,EAAE,CAAC,CAAC;QACrJ,OAAO,IAAI,CAAC;IACd,CAAC;IAED,0BAA0B;IAC1B,MAAM,YAAY,GAAG,4BAA4B,CAAC,OAAO,CAAC,CAAC;IAE3D,yDAAyD;IACzD,IAAI,YAAY,GAAG,EAAE,EAAE,CAAC;QACtB,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,8CAA8C,YAAY,SAAS,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;QACjH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,oDAAoD;IACpD,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,KAAK;QAC7E,CAAC,OAAO,CAAC,YAAY,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACrE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,8DAA8D,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;QAC5G,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF;;;;GAIG;AACI,MAAM,4BAA4B,GAAG,CAAC,QAAmB,EAAE,SAAiB,EAAa,EAAE;IAChG,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,EAAE,CAAC;IAElD,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC;IACtC,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;IAEtF,IAAI,aAAa,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC;QACpC,MAAM,YAAY,GAAG,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC;QACrD,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,mCAAmC,YAAY,wBAAwB,CAAC,CAAC,YAAY,GAAG,aAAa,CAAC,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;IACjK,CAAC;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAZW,QAAA,4BAA4B,gCAYvC;AAEF;;;GAGG;AAEH;;;GAGG;AACI,MAAM,0BAA0B,GAAG,CAAC,QAAmB,EAAE,SAAiB,EAAa,EAAE;IAC9F,IAAI,gBAAgB,GAAG,QAAQ,CAAC;IAEhC,mCAAmC;IACnC,gBAAgB,GAAG,IAAA,oCAA4B,EAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;IAE7E,mCAAmC;IACnC,2EAA2E;IAC3E,sEAAsE;IAEtE,OAAO,gBAAgB,CAAC;AAC1B,CAAC,CAAC;AAXW,QAAA,0BAA0B,8BAWrC;AAEF;;GAEG;AACU,QAAA,YAAY,GAAG;IAC1B,4BAA4B;IAC5B,wBAAwB;IACxB,mBAAmB;IACnB,sBAAsB;IACtB,sBAAsB;IACtB,sBAAsB;CACvB,CAAC","sourcesContent":["import type { Contact } from '../types/domain';\n\n/**\n * System-generated or placeholder names that indicate erroneous imports\n * These are common patterns from failed imports or system defaults\n */\nconst SYSTEM_GENERATED_NAMES = new Set([\n  'google',\n  'unknown',\n  'no name',\n  'unnamed',\n  'default',\n  'test',\n  'placeholder',\n  'n/a',\n  'na',\n  'none',\n  'null',\n  'undefined',\n  'contact',\n  'new contact',\n  'imported contact'\n]);\n\n/**\n * Email patterns that indicate system or placeholder emails\n */\nconst INVALID_EMAIL_PATTERNS = [\n  /^(noreply|no-reply|donotreply|do-not-reply)@/i,\n  /^(test|example|placeholder|temp|temporary)@/i,\n  /@(example|test|localhost|placeholder)\\./i,\n  /^[a-f0-9]{32}@/i, // MD5 hash-like emails\n  /^user[0-9]+@/i // Generic numbered users\n];\n\n/**\n * Phone patterns that indicate invalid or placeholder numbers\n */\nconst INVALID_PHONE_PATTERNS = [\n  /^0{7,}$/, // All zeros\n  /^1{7,}$/, // All ones\n  /^123456/, // Sequential numbers\n  /^555-?0{3}/, // Hollywood numbers\n  /^999/, // Emergency service placeholders\n  /^000/ // Invalid area codes\n];\n\n/**\n * Evaluates the quality score of a contact based on data completeness\n * @returns Score between 0-100, higher is better quality\n */\nconst calculateContactQualityScore = (contact: Contact): number => {\n  let score = 0;\n  let fieldCount = 0;\n  \n  // Name fields (40 points total)\n  if (contact.first_name && contact.first_name.trim().length > 1) {\n    score += 20;\n    fieldCount++;\n  }\n  if (contact.last_name && contact.last_name.trim().length > 1) {\n    score += 15;\n    fieldCount++;\n  }\n  if (contact.middle_name && contact.middle_name.trim().length > 1) {\n    score += 5;\n    fieldCount++;\n  }\n  \n  // Contact methods (30 points total)\n  if (contact.email && contact.email.includes('@') && contact.email.includes('.')) {\n    score += 15;\n    fieldCount++;\n  }\n  if (contact.phone || contact.mobile_phone || contact.work_phone) {\n    score += 15;\n    fieldCount++;\n  }\n  \n  // Professional info (15 points total)\n  if (contact.company && contact.company.trim().length > 1) {\n    score += 10;\n    fieldCount++;\n  }\n  if (contact.job_title && contact.job_title.trim().length > 1) {\n    score += 5;\n    fieldCount++;\n  }\n  \n  // Additional valuable fields (15 points total)\n  if (contact.notes && contact.notes.trim().length > 10) {\n    score += 5;\n    fieldCount++;\n  }\n  if (contact.website && contact.website.includes('.')) {\n    score += 5;\n    fieldCount++;\n  }\n  if (contact.street_address || contact.city || contact.country) {\n    score += 5;\n    fieldCount++;\n  }\n  \n  // Penalty for too few fields\n  if (fieldCount < 2) {\n    score = Math.max(0, score - 20);\n  }\n  \n  return Math.min(100, score);\n};\n\n/**\n * Checks if a contact appears to be system-generated or erroneous\n */\nconst isSystemGeneratedContact = (contact: Contact): boolean => {\n  // Check for system-generated names\n  const firstName = (contact.first_name || '').toLowerCase().trim();\n  const lastName = (contact.last_name || '').toLowerCase().trim();\n  const fullName = `${firstName} ${lastName}`.trim();\n  \n  // Check against known system names\n  if (SYSTEM_GENERATED_NAMES.has(firstName) || \n      SYSTEM_GENERATED_NAMES.has(lastName) || \n      SYSTEM_GENERATED_NAMES.has(fullName)) {\n    return true;\n  }\n  \n  // Check for single character names (likely initials used as placeholders)\n  if (firstName.length === 1 && !lastName) {\n    return true;\n  }\n  \n  // Check for invalid email patterns\n  if (contact.email) {\n    const emailLower = contact.email.toLowerCase();\n    if (INVALID_EMAIL_PATTERNS.some(pattern => pattern.test(emailLower))) {\n      return true;\n    }\n  }\n  \n  // Check for invalid phone patterns\n  const phones = [contact.phone, contact.mobile_phone, contact.work_phone].filter(Boolean) as string[];\n  for (const phone of phones) {\n    const cleanPhone = phone.replace(/\\D/g, ''); // Remove non-digits\n    if (INVALID_PHONE_PATTERNS.some(pattern => pattern.test(cleanPhone))) {\n      return true;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Determines if a contact should be filtered out based on quality criteria\n */\nconst shouldFilterContact = (contact: Contact, logPrefix: string): boolean => {\n  // Special case: Google import errors with specific pattern\n  if (contact.first_name === 'Google' && \n      !contact.last_name && \n      contact.import_source === 'google' &&\n      !contact.email &&\n      !contact.phone) {\n    console.log(`${logPrefix} Filtering out Google import error: ID ${contact.contact_id}`);\n    return true;\n  }\n  \n  // Check if system-generated\n  if (isSystemGeneratedContact(contact)) {\n    console.log(`${logPrefix} Filtering out system-generated contact: ID ${contact.contact_id}, Name: ${contact.first_name} ${contact.last_name || ''}`);\n    return true;\n  }\n  \n  // Calculate quality score\n  const qualityScore = calculateContactQualityScore(contact);\n  \n  // Filter out extremely low quality contacts (score < 10)\n  if (qualityScore < 10) {\n    console.log(`${logPrefix} Filtering out low quality contact (score: ${qualityScore}): ID ${contact.contact_id}`);\n    return true;\n  }\n  \n  // Contact has no meaningful identifying information\n  if (!contact.first_name && !contact.last_name && !contact.email && !contact.phone && \n      !contact.mobile_phone && !contact.work_phone && !contact.company) {\n    console.log(`${logPrefix} Filtering out contact with no identifying information: ID ${contact.contact_id}`);\n    return true;\n  }\n  \n  return false;\n};\n\n/**\n * Filters out erroneous contacts from imports using intelligent quality checks\n * This function evaluates contacts based on multiple criteria to identify\n * system-generated, placeholder, or extremely low-quality entries\n */\nexport const filterImportedGoogleContacts = (contacts: Contact[], logPrefix: string): Contact[] => {\n  if (!contacts || contacts.length === 0) return [];\n  \n  const originalCount = contacts.length;\n  const filtered = contacts.filter(contact => !shouldFilterContact(contact, logPrefix));\n  \n  if (originalCount > filtered.length) {\n    const removedCount = originalCount - filtered.length;\n    console.log(`${logPrefix} Contact quality filter removed ${removedCount} erroneous contacts (${((removedCount / originalCount) * 100).toFixed(1)}% of total)`);\n  }\n  \n  return filtered;\n};\n\n/**\n * Additional contact quality filters can be added here\n * This provides a centralized location for all contact data quality operations\n */\n\n/**\n * Apply all quality filters to a contact array\n * This is the main function that should be used throughout the application\n */\nexport const applyContactQualityFilters = (contacts: Contact[], logPrefix: string): Contact[] => {\n  let filteredContacts = contacts;\n  \n  // Apply intelligent quality filter\n  filteredContacts = filterImportedGoogleContacts(filteredContacts, logPrefix);\n  \n  // Future filters can be added here\n  // filteredContacts = filterDuplicateContacts(filteredContacts, logPrefix);\n  // filteredContacts = filterSpamContacts(filteredContacts, logPrefix);\n  \n  return filteredContacts;\n};\n\n/**\n * Exports for testing purposes\n */\nexport const _testExports = {\n  calculateContactQualityScore,\n  isSystemGeneratedContact,\n  shouldFilterContact,\n  SYSTEM_GENERATED_NAMES,\n  INVALID_EMAIL_PATTERNS,\n  INVALID_PHONE_PATTERNS\n};"]}
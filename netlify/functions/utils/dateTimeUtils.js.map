{"version":3,"file":"dateTimeUtils.js","sourceRoot":"","sources":["../../../src/backend/utils/dateTimeUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Date and Time Utilities\n * \n * This module provides robust timezone-aware date operations for consistent \n * handling of dates across the application. It includes utilities specifically\n * designed for birthday calculations and other date-related business logic.\n */\nimport { toZonedTime, format, formatInTimeZone } from 'date-fns-tz';\nimport { parseISO, isValid, addYears } from 'date-fns';\n\n/**\n * Standard ISO format for dates in the system\n */\nexport const DATE_FORMAT_ISO = 'yyyy-MM-dd';\n\n/**\n * Interface for birthday calculation results\n */\nexport interface BirthdayCalculation {\n  /** Original date of birth */\n  birthDate: Date;\n  /** Next occurrence of birthday */\n  nextBirthday: Date;\n  /** Days until next birthday */\n  diffDays: number;\n  /** Formatted next birthday in user's timezone */\n  formattedNextBirthday: string;\n}\n\n/**\n * Get a safely validated timezone string\n * @param timezone Timezone string (e.g., 'America/New_York')\n * @param logPrefix Optional prefix for logging\n * @returns Valid timezone string, or 'UTC' if the input is invalid\n */\nexport function getSafeTimezone(timezone: string | null | undefined, logPrefix = ''): string {\n  if (!timezone) {\n    return 'UTC';\n  }\n\n  try {\n    // Test if the timezone is valid by trying to format a date with it\n    format(new Date(), DATE_FORMAT_ISO, { timeZone: timezone });\n    return timezone;\n  } catch (tzError) {\n    console.warn(`${logPrefix} Invalid timezone '${timezone}', falling back to UTC. Error: ${\n      tzError instanceof Error ? tzError.message : String(tzError)\n    }`);\n    return 'UTC';\n  }\n}\n\n/**\n * Get the current date at midnight in the specified timezone\n * @param timezone User's timezone string\n * @returns Date object representing midnight in user's timezone\n */\nexport function getTodayInTimezone(timezone: string): Date {\n  const safeTimezone = getSafeTimezone(timezone);\n  const now = new Date();\n  const todayInTz = toZonedTime(now, safeTimezone);\n  todayInTz.setHours(0, 0, 0, 0);\n  return todayInTz;\n}\n\n/**\n * Parse a date string into a Date object, considering the specified timezone\n * @param dateString Date string in YYYY-MM-DD format\n * @param timezone User's timezone string\n * @returns Date object in the user's timezone or null if invalid\n */\nexport function parseDate(dateString: string, timezone: string): Date | null {\n  if (!dateString) return null;\n  \n  const safeTimezone = getSafeTimezone(timezone);\n  \n  try {\n    // First parse as ISO date - this will be in UTC\n    const parsedDate = parseISO(dateString);\n    if (!isValid(parsedDate)) return null;\n    \n    // Extract the year, month, day components\n    const [year, month, day] = dateString.split('-').map(Number);\n    \n    // Create a UTC date first\n    const utcDate = new Date(Date.UTC(year, month - 1, day));\n    \n    // Then convert to the specified timezone\n    const tzDate = toZonedTime(utcDate, safeTimezone);\n    \n    // Reset to midnight in that timezone\n    tzDate.setHours(0, 0, 0, 0);\n    \n    return tzDate;\n  } catch (error) {\n    console.error(`Error parsing date string '${dateString}':`, \n      error instanceof Error ? error.message : String(error));\n    return null;\n  }\n}\n\n/**\n * Calculate next birthday and days until it occurs\n * @param birthdayString Birthday string in YYYY-MM-DD format\n * @param timezone User's timezone string\n * @param reqId Optional request ID for logging\n * @returns Birthday calculation object or null if calculation fails\n */\nexport function calculateNextBirthday(\n  birthdayString: string, \n  timezone: string,\n  reqId = ''\n): BirthdayCalculation | null {\n  if (!birthdayString) return null;\n  \n  const safeTimezone = getSafeTimezone(timezone, `[${reqId}][dateTimeUtils]`);\n  const today = getTodayInTimezone(safeTimezone);\n  \n  try {\n    // Parse birthday in user's timezone\n    const birthDate = parseDate(birthdayString, safeTimezone);\n    if (!birthDate) return null;\n    \n    // Get month and day from birth date\n    const birthMonth = birthDate.getMonth();\n    const birthDay = birthDate.getDate();\n    \n    // Create this year's birthday date\n    let nextBirthday = new Date(today);\n    nextBirthday.setMonth(birthMonth);\n    nextBirthday.setDate(birthDay);\n    nextBirthday.setHours(0, 0, 0, 0);\n    \n    // Log both dates for comparison before the check\n    console.log(`[${reqId}][dateTimeUtils] Comparing dates - Today: ${today.toISOString()}, This year's birthday: ${nextBirthday.toISOString()}`);\n    \n    // If birthday has passed this year, move to next year\n    if (nextBirthday < today) {\n      console.log(`[${reqId}][dateTimeUtils] Birthday ${nextBirthday.toISOString()} is in the past, adding 1 year`);\n      nextBirthday = addYears(nextBirthday, 1);\n    } else {\n      console.log(`[${reqId}][dateTimeUtils] Birthday ${nextBirthday.toISOString()} is in the future, no need to add a year`);\n    }\n    \n    // Calculate days until birthday\n    const diffTimeMs = nextBirthday.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTimeMs / (1000 * 60 * 60 * 24));\n    \n    console.log(`[${reqId}][dateTimeUtils] Birthday calculation for '${birthdayString}': Next birthday is ${nextBirthday.toISOString()}, days until: ${diffDays}`);\n    \n    // Format the next birthday in user's timezone\n    const formattedNextBirthday = formatInTimeZone(\n      nextBirthday,\n      safeTimezone,\n      DATE_FORMAT_ISO\n    );\n    \n    return {\n      birthDate,\n      nextBirthday,\n      diffDays,\n      formattedNextBirthday\n    };\n  } catch (error) {\n    console.error(`[${reqId}][dateTimeUtils] Error calculating next birthday for '${birthdayString}':`, \n      error instanceof Error ? error.message : String(error));\n    return null;\n  }\n}\n\n/**\n * Format a date string in the user's timezone\n * @param dateString Date string in YYYY-MM-DD format\n * @param timezone User's timezone string\n * @param formatString Optional output format string (defaults to ISO)\n * @returns Formatted date string or empty string if invalid\n */\nexport function formatDate(\n  dateString: string, \n  timezone: string,\n  formatString = DATE_FORMAT_ISO\n): string {\n  if (!dateString) return '';\n  \n  const safeTimezone = getSafeTimezone(timezone);\n  \n  try {\n    const parsedDate = parseDate(dateString, safeTimezone);\n    if (!parsedDate) return '';\n    \n    return formatInTimeZone(parsedDate, safeTimezone, formatString);\n  } catch (error) {\n    console.error(`Error formatting date '${dateString}':`, \n      error instanceof Error ? error.message : String(error));\n    return '';\n  }\n}"]}
{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../../src/backend/utils/validation.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Validates if a string is a valid UUID format\n * @param uuid The string to validate\n * @returns true if the string is a valid UUID, false otherwise\n */\nexport function isValidUUID(uuid: string): boolean {\n  if (!uuid) return false;\n  const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\n  return uuidRegex.test(uuid);\n}\n\n/**\n * Validates if a string is a valid email format\n * @param email The string to validate\n * @returns true if the string is a valid email, false otherwise\n */\nexport function isValidEmail(email: string): boolean {\n  if (!email) return false;\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n/**\n * Validates if a string is a valid phone format\n * This is a very basic check and can be enhanced as needed\n * @param phone The string to validate\n * @returns true if the string is a valid phone, false otherwise\n */\nexport function isValidPhone(phone: string): boolean {\n  if (!phone) return false;\n  const phoneRegex = /^[+]?[(]?[0-9]{3}[)]?[-\\s.]?[0-9]{3}[-\\s.]?[0-9]{4,6}$/;\n  return phoneRegex.test(phone);\n}\n\n/**\n * Validates if a string is a valid URL format\n * @param url The string to validate\n * @returns true if the string is a valid URL, false otherwise\n */\nexport function isValidURL(url: string): boolean {\n  if (!url) return false;\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Validates if a string is a valid date format (YYYY-MM-DD)\n * @param date The string to validate\n * @returns true if the string is a valid date in YYYY-MM-DD format, false otherwise\n */\nexport function isValidDateFormat(date: string): boolean {\n  if (!date) return false;\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!dateRegex.test(date)) return false;\n  \n  // Parse the date parts to integers\n  const parts = date.split('-');\n  const year = parseInt(parts[0], 10);\n  const month = parseInt(parts[1], 10);\n  const day = parseInt(parts[2], 10);\n  \n  // Check the ranges of month and day\n  if (month < 1 || month > 12) return false;\n  \n  const daysInMonth = new Date(year, month, 0).getDate();\n  if (day < 1 || day > daysInMonth) return false;\n  \n  return true;\n}\n\n/**\n * Validates if a string is a valid ISO 8601 date format\n * @param date The string to validate\n * @returns true if the string is a valid ISO 8601 date, false otherwise\n */\nexport function isValidISODate(date: string): boolean {\n  if (!date) return false;\n  try {\n    const d = new Date(date);\n    return !isNaN(d.getTime()) && date.includes('T');\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Validates if a tag array contains valid tag strings\n * @param tags The array of tags to validate\n * @returns true if all tags are valid, false otherwise\n */\nexport function hasValidTags(tags: string[] | null): boolean {\n  if (!tags) return true;\n  if (!Array.isArray(tags)) return false;\n  return tags.every(tag => typeof tag === 'string' && tag.trim() !== '');\n} "]}
{"version":3,"file":"rateLimitConfig.js","sourceRoot":"","sources":["../../../src/backend/utils/rateLimitConfig.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,uFAAuF;;;AA0HvF,kEAeC;AAKD,kDAKC;AAKD,sDAOC;AA7JD;;;GAGG;AAEH;;GAEG;AACU,QAAA,gBAAgB,GAAG;IAC9B,gDAAgD;IAChD,OAAO,EAAE;QACP,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAO,uCAAuC;QAClE,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAK,qCAAqC;QAChE,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAO,mDAAmD;QAC9E,SAAS,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,mCAAmC;KACpE;IAED,iCAAiC;IACjC,eAAe,EAAE;QACf,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAO,4BAA4B;QACvD,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAM,6BAA6B;QACxD,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAM,6BAA6B;QACxD,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAK,8BAA8B;QACzD,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,iCAAiC;QAC9D,OAAO,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAI,6BAA6B;KACzD;IAED,6BAA6B;IAC7B,iBAAiB,EAAE;QACjB,UAAU,EAAE,IAAI,EAAW,sBAAsB;QACjD,SAAS,EAAE,EAAE,GAAG,IAAI,EAAO,2BAA2B;QACtD,UAAU,EAAE,CAAC,EAAc,iCAAiC;KAC7D;IAED,mBAAmB;IACnB,gBAAgB,EAAE;QAChB,iBAAiB,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,mCAAmC;KAC5E;CACO,CAAC;AAEX;;GAEG;AACU,QAAA,cAAc,GAAG;IAC5B,6CAA6C;IAC7C,cAAc,EAAE,CAAC,EAAY,4BAA4B;IACzD,eAAe,EAAE,CAAC,EAAW,wBAAwB;IACrD,uBAAuB,EAAE,CAAC,EAAG,8BAA8B;IAC3D,2BAA2B,EAAE,CAAC,EAAE,kCAAkC;IAElE,gCAAgC;IAChC,wBAAwB,EAAE,CAAC,EAAE,gCAAgC;CACrD,CAAC;AAEX;;GAEG;AACU,QAAA,gBAAgB,GAAG;IAC9B,yCAAyC;IACzC,aAAa,EAAE;QACb,WAAW,EAAE,sBAAc,CAAC,cAAc;QAC1C,QAAQ,EAAE,wBAAgB,CAAC,OAAO,CAAC,MAAM;QACzC,gBAAgB,EAAE,IAAI;QACtB,mBAAmB,EAAE,IAAI;QACzB,aAAa,EAAE,wBAAgB,CAAC,eAAe,CAAC,OAAO;QACvD,SAAS,EAAE,sBAAc,CAAC,wBAAwB;KACnD;IAED,yDAAyD;IACzD,eAAe,EAAE;QACf,WAAW,EAAE,sBAAc,CAAC,eAAe;QAC3C,QAAQ,EAAE,wBAAgB,CAAC,OAAO,CAAC,KAAK;QACxC,gBAAgB,EAAE,KAAK;QACvB,mBAAmB,EAAE,IAAI;QACzB,aAAa,EAAE,wBAAgB,CAAC,eAAe,CAAC,OAAO;QACvD,SAAS,EAAE,sBAAc,CAAC,wBAAwB;KACnD;IAED,yDAAyD;IACzD,YAAY,EAAE;QACZ,WAAW,EAAE,sBAAc,CAAC,uBAAuB;QACnD,QAAQ,EAAE,wBAAgB,CAAC,OAAO,CAAC,IAAI;QACvC,gBAAgB,EAAE,KAAK;QACvB,mBAAmB,EAAE,IAAI;QACzB,aAAa,EAAE,wBAAgB,CAAC,eAAe,CAAC,OAAO;QACvD,SAAS,EAAE,sBAAc,CAAC,wBAAwB;KACnD;CACO,CAAC;AAEX;;GAEG;AACU,QAAA,oBAAoB,GAAG;IAClC,KAAK,EAAE;QACL,GAAG,wBAAgB,CAAC,aAAa;QACjC,WAAW,EAAE,sBAAc,CAAC,cAAc;KAC3C;IAED,MAAM,EAAE;QACN,GAAG,wBAAgB,CAAC,eAAe;QACnC,WAAW,EAAE,sBAAc,CAAC,eAAe;KAC5C;IAED,aAAa,EAAE;QACb,GAAG,wBAAgB,CAAC,YAAY;QAChC,WAAW,EAAE,sBAAc,CAAC,uBAAuB;QACnD,QAAQ,EAAE,wBAAgB,CAAC,OAAO,CAAC,IAAI;KACxC;IAED,iBAAiB,EAAE;QACjB,GAAG,wBAAgB,CAAC,YAAY;QAChC,WAAW,EAAE,sBAAc,CAAC,2BAA2B;QACvD,QAAQ,EAAE,wBAAgB,CAAC,OAAO,CAAC,IAAI;QACvC,mBAAmB,EAAE,KAAK,EAAE,sCAAsC;KACnE;CACO,CAAC;AAEX;;GAEG;AACH,SAAgB,2BAA2B,CAAC,UAAkB;IAC5D,QAAQ,UAAU,EAAE,CAAC;QACnB,KAAK,CAAC;YACJ,OAAO,wBAAgB,CAAC,eAAe,CAAC,KAAK,CAAC;QAChD,KAAK,CAAC;YACJ,OAAO,wBAAgB,CAAC,eAAe,CAAC,MAAM,CAAC;QACjD,KAAK,CAAC;YACJ,OAAO,wBAAgB,CAAC,eAAe,CAAC,KAAK,CAAC;QAChD,KAAK,CAAC;YACJ,OAAO,wBAAgB,CAAC,eAAe,CAAC,MAAM,CAAC;QACjD;YACE,OAAO,UAAU,GAAG,sBAAc,CAAC,wBAAwB;gBACzD,CAAC,CAAC,wBAAgB,CAAC,eAAe,CAAC,MAAM;gBACzC,CAAC,CAAC,wBAAgB,CAAC,eAAe,CAAC,OAAO,CAAC;IACjD,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,mBAAmB,CAAC,cAAsB;IACxD,MAAM,KAAK,GAAG,wBAAgB,CAAC,iBAAiB,CAAC,UAAU;QACzD,IAAI,CAAC,GAAG,CAAC,wBAAgB,CAAC,iBAAiB,CAAC,UAAU,EAAE,cAAc,GAAG,CAAC,CAAC,CAAC;IAE9E,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,wBAAgB,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;AACvE,CAAC;AAED;;GAEG;AACH,SAAgB,qBAAqB,CAAC,eAA4B;IAChE,IAAI,CAAC,eAAe;QAAE,OAAO,KAAK,CAAC;IAEnC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACvB,MAAM,kBAAkB,GAAG,GAAG,GAAG,eAAe,CAAC,OAAO,EAAE,CAAC;IAE3D,OAAO,kBAAkB,GAAG,wBAAgB,CAAC,gBAAgB,CAAC,iBAAiB,CAAC;AAClF,CAAC;AAOD;;GAEG;AACU,QAAA,qBAAqB,GAAG;IACnC,WAAW,EAAE;QACX,sCAAsC;QACtC,cAAc,EAAE,EAAE;QAClB,eAAe,EAAE;YACf,GAAG,wBAAgB,CAAC,eAAe;YACnC,KAAK,EAAE,EAAE,GAAG,IAAI,EAAS,oBAAoB;YAC7C,MAAM,EAAE,EAAE,GAAG,IAAI,EAAQ,kBAAkB;YAC3C,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAK,mBAAmB;SAC7C;KACF;IAED,OAAO,EAAE;QACP,kCAAkC;QAClC,cAAc,EAAE,GAAG;QACnB,OAAO,EAAE;YACP,KAAK,EAAE,IAAI,EAAc,qBAAqB;YAC9C,MAAM,EAAE,IAAI,EAAa,sBAAsB;YAC/C,IAAI,EAAE,IAAI,EAAe,sBAAsB;SAChD;KACF;CACO,CAAC","sourcesContent":["// src/backend/utils/rateLimitConfig.ts\n// Centralized rate limiting configuration - single source of truth for security timing\n\n/**\n * Centralized rate limiting configuration for security and performance\n * This ensures consistent security behavior across all authentication endpoints\n */\n\n/**\n * Time constants for rate limiting (in milliseconds)\n */\nexport const RATE_LIMIT_TIMES = {\n  // Window durations (how long to track requests)\n  WINDOWS: {\n    SHORT: 5 * 60 * 1000,      // 5 minutes - for sensitive operations\n    MEDIUM: 15 * 60 * 1000,    // 15 minutes - for auth operations  \n    LONG: 60 * 60 * 1000,      // 1 hour - for password resets, email verification\n    VERY_LONG: 24 * 60 * 60 * 1000, // 24 hours - for severe violations\n  },\n  \n  // Progressive blocking durations\n  BLOCK_DURATIONS: {\n    FIRST: 2 * 60 * 1000,      // 2 minutes - first offense\n    SECOND: 5 * 60 * 1000,     // 5 minutes - second offense\n    THIRD: 15 * 60 * 1000,     // 15 minutes - third offense\n    FOURTH: 30 * 60 * 1000,    // 30 minutes - fourth offense\n    SEVERE: 24 * 60 * 60 * 1000, // 24 hours - persistent offender\n    DEFAULT: 15 * 60 * 1000,   // 15 minutes - default block\n  },\n  \n  // Progressive delay settings\n  PROGRESSIVE_DELAY: {\n    BASE_DELAY: 1000,          // 1 second base delay\n    MAX_DELAY: 10 * 1000,      // 10 seconds maximum delay\n    MULTIPLIER: 2,             // Exponential backoff multiplier\n  },\n  \n  // Reset thresholds\n  RESET_THRESHOLDS: {\n    BLOCK_COUNT_RESET: 24 * 60 * 60 * 1000, // Reset block count after 24 hours\n  },\n} as const;\n\n/**\n * Request limits for different operation types\n */\nexport const REQUEST_LIMITS = {\n  // Authentication operations (most sensitive)\n  LOGIN_ATTEMPTS: 5,           // Max failed login attempts\n  SIGNUP_ATTEMPTS: 3,          // Max signup attempts  \n  PASSWORD_RESET_ATTEMPTS: 3,  // Max password reset requests\n  EMAIL_VERIFICATION_ATTEMPTS: 5, // Max email verification requests\n  \n  // Progressive blocking settings\n  MAX_BLOCKS_BEFORE_SEVERE: 4, // Max blocks before 24-hour ban\n} as const;\n\n/**\n * Security configurations for different endpoints\n */\nexport const SECURITY_CONFIGS = {\n  // High-security authentication endpoints\n  HIGH_SECURITY: {\n    maxRequests: REQUEST_LIMITS.LOGIN_ATTEMPTS,\n    windowMs: RATE_LIMIT_TIMES.WINDOWS.MEDIUM,\n    progressiveDelay: true,\n    progressiveBlocking: true,\n    blockDuration: RATE_LIMIT_TIMES.BLOCK_DURATIONS.DEFAULT,\n    maxBlocks: REQUEST_LIMITS.MAX_BLOCKS_BEFORE_SEVERE,\n  },\n  \n  // Medium-security endpoints (signup, email verification)\n  MEDIUM_SECURITY: {\n    maxRequests: REQUEST_LIMITS.SIGNUP_ATTEMPTS,\n    windowMs: RATE_LIMIT_TIMES.WINDOWS.SHORT,\n    progressiveDelay: false,\n    progressiveBlocking: true,\n    blockDuration: RATE_LIMIT_TIMES.BLOCK_DURATIONS.DEFAULT,\n    maxBlocks: REQUEST_LIMITS.MAX_BLOCKS_BEFORE_SEVERE,\n  },\n  \n  // Low-security endpoints (password reset - self-service)\n  LOW_SECURITY: {\n    maxRequests: REQUEST_LIMITS.PASSWORD_RESET_ATTEMPTS,\n    windowMs: RATE_LIMIT_TIMES.WINDOWS.LONG,\n    progressiveDelay: false,\n    progressiveBlocking: true,\n    blockDuration: RATE_LIMIT_TIMES.BLOCK_DURATIONS.DEFAULT,\n    maxBlocks: REQUEST_LIMITS.MAX_BLOCKS_BEFORE_SEVERE,\n  },\n} as const;\n\n/**\n * Endpoint-specific rate limit configurations\n */\nexport const ENDPOINT_RATE_LIMITS = {\n  login: {\n    ...SECURITY_CONFIGS.HIGH_SECURITY,\n    maxRequests: REQUEST_LIMITS.LOGIN_ATTEMPTS,\n  },\n  \n  signup: {\n    ...SECURITY_CONFIGS.MEDIUM_SECURITY,\n    maxRequests: REQUEST_LIMITS.SIGNUP_ATTEMPTS,\n  },\n  \n  passwordReset: {\n    ...SECURITY_CONFIGS.LOW_SECURITY,\n    maxRequests: REQUEST_LIMITS.PASSWORD_RESET_ATTEMPTS,\n    windowMs: RATE_LIMIT_TIMES.WINDOWS.LONG,\n  },\n  \n  emailVerification: {\n    ...SECURITY_CONFIGS.LOW_SECURITY,\n    maxRequests: REQUEST_LIMITS.EMAIL_VERIFICATION_ATTEMPTS,\n    windowMs: RATE_LIMIT_TIMES.WINDOWS.LONG,\n    progressiveBlocking: false, // Email verification is less critical\n  },\n} as const;\n\n/**\n * Helper function to get progressive block duration based on block count\n */\nexport function getProgressiveBlockDuration(blockCount: number): number {\n  switch (blockCount) {\n    case 1:\n      return RATE_LIMIT_TIMES.BLOCK_DURATIONS.FIRST;\n    case 2:\n      return RATE_LIMIT_TIMES.BLOCK_DURATIONS.SECOND;\n    case 3:\n      return RATE_LIMIT_TIMES.BLOCK_DURATIONS.THIRD;\n    case 4:\n      return RATE_LIMIT_TIMES.BLOCK_DURATIONS.FOURTH;\n    default:\n      return blockCount > REQUEST_LIMITS.MAX_BLOCKS_BEFORE_SEVERE \n        ? RATE_LIMIT_TIMES.BLOCK_DURATIONS.SEVERE\n        : RATE_LIMIT_TIMES.BLOCK_DURATIONS.DEFAULT;\n  }\n}\n\n/**\n * Helper function to calculate progressive delay\n */\nexport function getProgressiveDelay(failedAttempts: number): number {\n  const delay = RATE_LIMIT_TIMES.PROGRESSIVE_DELAY.BASE_DELAY * \n    Math.pow(RATE_LIMIT_TIMES.PROGRESSIVE_DELAY.MULTIPLIER, failedAttempts - 1);\n  \n  return Math.min(delay, RATE_LIMIT_TIMES.PROGRESSIVE_DELAY.MAX_DELAY);\n}\n\n/**\n * Helper function to check if block count should be reset\n */\nexport function shouldResetBlockCount(lastBlockedTime: Date | null): boolean {\n  if (!lastBlockedTime) return false;\n  \n  const now = Date.now();\n  const timeSinceLastBlock = now - lastBlockedTime.getTime();\n  \n  return timeSinceLastBlock > RATE_LIMIT_TIMES.RESET_THRESHOLDS.BLOCK_COUNT_RESET;\n}\n\n/**\n * Type-safe endpoint names\n */\nexport type RateLimitEndpoint = keyof typeof ENDPOINT_RATE_LIMITS;\n\n/**\n * Environment-specific overrides (for development/testing)\n */\nexport const ENVIRONMENT_OVERRIDES = {\n  development: {\n    // More lenient limits for development\n    LOGIN_ATTEMPTS: 10,\n    BLOCK_DURATIONS: {\n      ...RATE_LIMIT_TIMES.BLOCK_DURATIONS,\n      FIRST: 30 * 1000,        // 30 seconds in dev\n      SECOND: 60 * 1000,       // 1 minute in dev\n      THIRD: 2 * 60 * 1000,    // 2 minutes in dev\n    },\n  },\n  \n  testing: {\n    // Very lenient limits for testing\n    LOGIN_ATTEMPTS: 100,\n    WINDOWS: {\n      SHORT: 1000,             // 1 second for tests\n      MEDIUM: 2000,            // 2 seconds for tests\n      LONG: 5000,              // 5 seconds for tests\n    },\n  },\n} as const;"]}
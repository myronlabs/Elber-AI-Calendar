{"version":3,"file":"passwordValidator.js","sourceRoot":"","sources":["../../../src/backend/utils/passwordValidator.ts"],"names":[],"mappings":"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","sourcesContent":["// src/backend/utils/passwordValidator.ts\n\nimport crypto from 'crypto';\nimport fetch from 'node-fetch';\n\nexport interface PasswordStrength {\n  score: number; // 0-5 scale\n  feedback: string[];\n  isValid: boolean;\n}\n\nexport interface PasswordRequirements {\n  minLength: number;\n  requireUppercase: boolean;\n  requireLowercase: boolean;\n  requireNumbers: boolean;\n  requireSpecialChars: boolean;\n}\n\nexport const DEFAULT_PASSWORD_REQUIREMENTS: PasswordRequirements = {\n  minLength: 12,\n  requireUppercase: true,\n  requireLowercase: true,\n  requireNumbers: true,\n  requireSpecialChars: true,\n};\n\nexport function validatePassword(\n  password: string,\n  requirements: PasswordRequirements = DEFAULT_PASSWORD_REQUIREMENTS\n): PasswordStrength {\n  const feedback: string[] = [];\n  let score = 0;\n\n  // Length check\n  if (password.length < requirements.minLength) {\n    feedback.push(`Password must be at least ${requirements.minLength} characters long`);\n  } else {\n    score++;\n    // Extra points for longer passwords\n    if (password.length >= 16) score++;\n    if (password.length >= 20) score++;\n  }\n\n  // Uppercase check\n  if (requirements.requireUppercase && !/[A-Z]/.test(password)) {\n    feedback.push('Password must contain at least one uppercase letter');\n  } else if (requirements.requireUppercase) {\n    score++;\n  }\n\n  // Lowercase check\n  if (requirements.requireLowercase && !/[a-z]/.test(password)) {\n    feedback.push('Password must contain at least one lowercase letter');\n  } else if (requirements.requireLowercase) {\n    score++;\n  }\n\n  // Number check\n  if (requirements.requireNumbers && !/[0-9]/.test(password)) {\n    feedback.push('Password must contain at least one number');\n  } else if (requirements.requireNumbers) {\n    score++;\n  }\n\n  // Special character check\n  if (requirements.requireSpecialChars && !/[!@#$%^&*()_+=;:'\",.<>?|{}[\\]]/.test(password)) {\n    feedback.push('Password must contain at least one special character');\n  } else if (requirements.requireSpecialChars) {\n    score++;\n  }\n\n  // Additional checks for password strength\n  \n  // Check for common patterns\n  const commonPatterns = [\n    /^(password|123456|qwerty|abc123|letmein|monkey|dragon)/i,\n    /^(\\d)\\1+$/, // Repeated digits\n    /^([a-z])\\1+$/i, // Repeated letters\n    /^(abcd|1234|qwert|asdf)/i, // Sequential patterns\n  ];\n\n  for (const pattern of commonPatterns) {\n    if (pattern.test(password)) {\n      feedback.push('Password contains common patterns that are easy to guess');\n      score = Math.max(0, score - 2);\n      break;\n    }\n  }\n\n  // Check for variety of character types\n  const types = [\n    /[a-z]/.test(password),\n    /[A-Z]/.test(password),\n    /[0-9]/.test(password),\n    /[^a-zA-Z0-9]/.test(password),\n  ].filter(Boolean).length;\n\n  if (types >= 4) {\n    score++;\n  }\n\n  const isValid = feedback.length === 0;\n\n  return {\n    score: Math.min(5, score),\n    feedback,\n    isValid,\n  };\n}\n\nexport function generatePasswordStrengthMessage(strength: PasswordStrength): string {\n  const scoreMessages = [\n    'Very Weak',\n    'Weak',\n    'Fair',\n    'Good',\n    'Strong',\n    'Very Strong',\n  ];\n\n  return scoreMessages[strength.score] || 'Unknown';\n}\n\n// Check if password was previously breached using Have I Been Pwned API\nexport async function checkPasswordBreach(password: string): Promise<boolean> {\n  try {\n    const hash = crypto.createHash('sha1').update(password).digest('hex').toUpperCase();\n    const prefix = hash.substring(0, 5);\n    const suffix = hash.substring(5);\n\n    // Use node-fetch for server-side fetch\n    const response = await fetch(`https://api.pwnedpasswords.com/range/${prefix}`, {\n      headers: {\n        'User-Agent': 'Elber-CRM-Security-Check'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.text();\n    const breaches = data.split('\\n');\n\n    for (const breach of breaches) {\n      const [hashSuffix] = breach.split(':');\n      if (hashSuffix && hashSuffix.trim() === suffix) {\n        return true; // Password has been breached\n      }\n    }\n\n    return false;\n  } catch (error) {\n    console.error('Error checking password breach:', error);\n    // In case of error, we'll assume it's not breached to avoid blocking users\n    // but log the error for monitoring\n    return false;\n  }\n}"]}
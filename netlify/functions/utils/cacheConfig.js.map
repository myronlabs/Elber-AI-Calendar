{"version":3,"file":"cacheConfig.js","sourceRoot":"","sources":["../../../src/backend/utils/cacheConfig.ts"],"names":[],"mappings":";AAAA,mCAAmC;AACnC,gFAAgF;;;AAqDhF,kCAiBC;AApED;;;GAGG;AACU,QAAA,YAAY,GAAG;IAC1B,qEAAqE;IACrE,iBAAiB,EAAE,EAAE,GAAG,IAAI,EAAE,wCAAwC;IAEtE,+CAA+C;IAC/C,eAAe,EAAE,EAAE,GAAG,IAAI,EAAE,mCAAmC;IAE/D,6DAA6D;IAC7D,cAAc,EAAE,EAAE,GAAG,IAAI,EAAE,8CAA8C;IAEzE,0BAA0B;IAC1B,YAAY,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,wCAAwC;IAErE,mDAAmD;IACnD,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,4CAA4C;IAEzE,oDAAoD;IACpD,eAAe,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,qCAAqC;IAErE,6BAA6B;IAC7B,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,oDAAoD;CACzE,CAAC;AAEX;;GAEG;AACU,QAAA,oBAAoB,GAAG;IAClC,4EAA4E;IAC5E,wBAAwB,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,mCAAmC;IAE7E,qCAAqC;IACrC,gBAAgB,EAAE,EAAE,GAAG,IAAI,EAAE,yCAAyC;CAC9D,CAAC;AAEX;;GAEG;AACU,QAAA,iBAAiB,GAAG;IAC/B,yBAAyB;IACzB,qBAAqB,EAAE,GAAG;IAC1B,0BAA0B,EAAE,GAAG;IAC/B,qBAAqB,EAAE,EAAE;CACjB,CAAC;AAEX;;GAEG;AACH,SAAgB,WAAW,CAAC,aAA8E;IACxG,QAAQ,aAAa,EAAE,CAAC;QACtB,KAAK,WAAW;YACd,OAAO,oBAAY,CAAC,iBAAiB,CAAC;QACxC,KAAK,MAAM;YACT,OAAO,oBAAY,CAAC,eAAe,CAAC;QACtC,KAAK,QAAQ;YACX,OAAO,oBAAY,CAAC,cAAc,CAAC;QACrC,KAAK,SAAS;YACZ,OAAO,oBAAY,CAAC,YAAY,CAAC;QACnC,KAAK,QAAQ;YACX,OAAO,oBAAY,CAAC,WAAW,CAAC;QAClC,KAAK,MAAM;YACT,OAAO,oBAAY,CAAC,WAAW,CAAC;QAClC;YACE,OAAO,oBAAY,CAAC,YAAY,CAAC;IACrC,CAAC;AACH,CAAC","sourcesContent":["// src/backend/utils/cacheConfig.ts\n// Centralized cache configuration for backend services - single source of truth\n\n/**\n * Centralized cache configuration for backend services\n * This ensures consistent cache behavior across all backend functions\n */\nexport const CACHE_CONFIG = {\n  // Reasonable TTL for assistant operations (prevents server overload)\n  ASSISTANT_UPDATES: 30 * 1000, // 30 seconds - prevents cache thrashing\n  \n  // Interactive operations with proper caching  \n  USER_OPERATIONS: 60 * 1000, // 1 minute - reduces database load\n  \n  // Search operations (balanced responsiveness vs performance)\n  SEARCH_RESULTS: 30 * 1000, // 30 seconds - prevents search request storms\n  \n  // General data operations\n  GENERAL_DATA: 2 * 60 * 1000, // 2 minutes - reduces database pressure\n  \n  // Static/configuration data (can be cached longer)\n  STATIC_DATA: 10 * 60 * 1000, // 10 minutes - for data that rarely changes\n  \n  // Rate limiting and security (can be cached longer)\n  RATE_LIMIT_DATA: 5 * 60 * 1000, // 5 minutes - for rate limiting data\n  \n  // OAuth tokens and auth data\n  AUTH_TOKENS: 15 * 60 * 1000, // 15 minutes - for auth tokens (security sensitive)\n} as const;\n\n/**\n * Cache cleanup intervals\n */\nexport const CACHE_CLEANUP_CONFIG = {\n  // Backend cache cleanup interval (reduced frequency to prevent server load)\n  BACKEND_CLEANUP_INTERVAL: 10 * 60 * 1000, // 10 minutes - reduces server load\n  \n  // Query timeout (reasonable timeout)\n  QUERY_TIMEOUT_MS: 10 * 1000, // 10 seconds - prevents hanging requests\n} as const;\n\n/**\n * Cache size limits\n */\nexport const CACHE_SIZE_CONFIG = {\n  // Backend cache limits  \n  SEARCH_CACHE_MAX_SIZE: 200,\n  AI_RESPONSE_CACHE_MAX_SIZE: 100,\n  CONFIG_CACHE_MAX_SIZE: 50,\n} as const;\n\n/**\n * Helper function to get appropriate TTL based on operation type\n */\nexport function getCacheTTL(operationType: 'assistant' | 'user' | 'search' | 'general' | 'static' | 'auth'): number {\n  switch (operationType) {\n    case 'assistant':\n      return CACHE_CONFIG.ASSISTANT_UPDATES;\n    case 'user':\n      return CACHE_CONFIG.USER_OPERATIONS;\n    case 'search':\n      return CACHE_CONFIG.SEARCH_RESULTS;\n    case 'general':\n      return CACHE_CONFIG.GENERAL_DATA;\n    case 'static':\n      return CACHE_CONFIG.STATIC_DATA;\n    case 'auth':\n      return CACHE_CONFIG.AUTH_TOKENS;\n    default:\n      return CACHE_CONFIG.GENERAL_DATA;\n  }\n}\n\n/**\n * Type-safe cache operation types\n */\nexport type CacheOperationType = 'assistant' | 'user' | 'search' | 'general' | 'static' | 'auth';"]}
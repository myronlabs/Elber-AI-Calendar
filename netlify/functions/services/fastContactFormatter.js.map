{"version":3,"file":"fastContactFormatter.js","sourceRoot":"","sources":["../../../src/backend/services/fastContactFormatter.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAGH,+DAA+D;AAC/D,yEAAyE;AAEzE,MAAa,oBAAoB;IAC/B;;;OAGG;IACH,MAAM,CAAC,wBAAwB,CAAC,QAAmB,EAAE,KAAc;QACjE,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAClE,IAAI,MAAM,GAAG,EAAE,CAAC,CAAC,2BAA2B;QAC5C,IAAI,IAAI,GAAG,EAAE,CAAC,CAAG,yBAAyB;QAE1C,iDAAiD;QACjD,MAAM,WAAW,GAAG,UAAU,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QAE3C,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC1B,OAAO,yCAAyC,CAAC;QACnD,CAAC;QAED,0CAA0C;QAC1C,OAAO,CAAC,GAAG,CAAC,yBAAyB,WAAW,gBAAgB,QAAQ,CAAC,MAAM,yBAAyB,UAAU,GAAG,CAAC,CAAC;QACvH,4JAA4J;QAC5J,6BAA6B;QAC7B,+JAA+J;QAC/J,IAAI;QAEJ,uDAAuD;QACvD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC1B,2EAA2E;YAC3E,uEAAuE;YACvE,+DAA+D;YAC/D,yDAAyD;YACzD,MAAM,GAAG,EAAE,CAAC;QACd,CAAC;aAAM,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC/B,mDAAmD;YACnD,MAAM,GAAG,SAAS,QAAQ,CAAC,MAAM,YAAY,UAAU,CAAC,CAAC,CAAC,gBAAgB,UAAU,GAAG,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;QACtG,CAAC;QAED,uCAAuC;QACvC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE;YAClC,IAAI,IAAI,OAAO,KAAK,GAAG,CAAC,KAAK,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,SAAS,IAAI,EAAE,IAAI,CAAC;YAE/E,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;gBAClB,IAAI,IAAI,gBAAgB,OAAO,CAAC,KAAK,IAAI,CAAC;YAC5C,CAAC;YACD,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;gBAClB,IAAI,IAAI,gBAAgB,OAAO,CAAC,KAAK,IAAI,CAAC;YAC5C,CAAC;YACD,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;gBACpB,IAAI,IAAI,kBAAkB,OAAO,CAAC,OAAO,IAAI,CAAC;gBAC9C,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;oBACtB,IAAI,IAAI,oBAAoB,OAAO,CAAC,SAAS,IAAI,CAAC;gBACpD,CAAC;YACH,CAAC;YACD,IAAI,OAAO,CAAC,iBAAiB,EAAE,CAAC;gBAC9B,IAAI,IAAI,kBAAkB,OAAO,CAAC,iBAAiB,IAAI,CAAC;YAC1D,CAAC;iBAAM,IAAI,OAAO,CAAC,cAAc,EAAE,CAAC;gBAClC,MAAM,YAAY,GAAG,EAAE,CAAC;gBACxB,IAAI,OAAO,CAAC,cAAc;oBAAE,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;gBACtE,IAAI,OAAO,CAAC,gBAAgB;oBAAE,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;gBAC1E,MAAM,YAAY,GAAG,EAAE,CAAC;gBACxB,IAAI,OAAO,CAAC,IAAI;oBAAE,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClD,IAAI,OAAO,CAAC,cAAc,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC;oBAClD,MAAM,QAAQ,GAAG,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACzF,IAAI,QAAQ;wBAAE,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC5C,CAAC;gBACD,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC;oBAAE,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACxE,IAAI,OAAO,CAAC,OAAO;oBAAE,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACxD,IAAI,IAAI,kBAAkB,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YACxD,CAAC;YACD,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;gBACrB,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACxC,IAAI,IAAI,mBAAmB,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC;YAC3D,CAAC;YACD,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;gBAClB,IAAI,IAAI,gBAAgB,OAAO,CAAC,KAAK,IAAI,CAAC;YAC5C,CAAC;YACD,IAAI,IAAI,IAAI,CAAC,CAAC,sCAAsC;QACtD,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,oBAAoB,CAAC,QAAmB,EAAE,QAAgB,CAAC;QAChE,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACvC,MAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC;QAE1C,IAAI,QAAQ,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;QAEpD,IAAI,SAAS,GAAG,CAAC,EAAE,CAAC;YAClB,QAAQ,IAAI,aAAa,SAAS,gBAAgB,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;YAClF,QAAQ,IAAI,2DAA2D,CAAC;QAC1E,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AAjGD,oDAiGC","sourcesContent":["/**\n * Fast Contact Formatter\n * Provides immediate formatted responses without waiting for AI\n */\n\nimport { Contact } from '../types/domain';\n// Importing types that may be needed in future implementations\n// import { SearchMatchType, determineMatchType } from '../types/search';\n\nexport class FastContactFormatter {\n  /**\n   * Format contacts into a markdown response immediately\n   * This provides instant feedback while AI generates a more detailed response\n   */\n  static formatContactsForDisplay(contacts: Contact[], query?: string): string {\n    const cleanQuery = query ? query.replace(/[\"*]/g, \"\").trim() : \"\";\n    let header = \"\"; // Initialize header string\n    let body = \"\";   // Initialize body string\n\n    // Create a reference ID for tracing through logs\n    const formatterId = `format-${Date.now()}`;\n\n    if (contacts.length === 0) {\n      return \"No contacts found matching your search.\";\n    }\n\n    // Log contacts for debugging order issues\n    console.log(`[FastContactFormatter ${formatterId}] Formatting ${contacts.length} contacts for query: '${cleanQuery}'`);\n    // console.log(`[FastContactFormatter ${formatterId}] First contact: ${contacts[0].first_name} ${contacts[0].last_name || ''} (${contacts[0].contact_id})`);\n    // if (contacts.length > 1) {\n    //   console.log(`[FastContactFormatter ${formatterId}] Second contact: ${contacts[1].first_name} ${contacts[1].last_name || ''} (${contacts[1].contact_id})`);\n    // }\n\n    // Determine the header based on the number of contacts\n    if (contacts.length === 1) {\n      // For a single contact, no explicit header is generated by this formatter.\n      // The calling context (e.g., assistant-contacts.ts) is responsible for\n      // the overall summary message like \"Found 1 exact contact...\".\n      // This formatter will only append the contact's details.\n      header = \"\"; \n    } else if (contacts.length > 1) {\n      // For multiple contacts, create a standard header.\n      header = `Found ${contacts.length} contacts${cleanQuery ? ` related to \"${cleanQuery}\"` : \"\"}:\\n\\n`;\n    }\n\n    // Format the body with contact details\n    contacts.forEach((contact, index) => {\n      body += `### ${index + 1}. ${contact.first_name} ${contact.last_name || ''}\\n`;\n      \n      if (contact.email) {\n        body += `- **Email**: ${contact.email}\\n`;\n      }\n      if (contact.phone) {\n        body += `- **Phone**: ${contact.phone}\\n`;\n      }\n      if (contact.company) {\n        body += `- **Company**: ${contact.company}\\n`;\n        if (contact.job_title) {\n          body += `- **Job Title**: ${contact.job_title}\\n`;\n        }\n      }\n      if (contact.formatted_address) {\n        body += `- **Address**: ${contact.formatted_address}\\n`;\n      } else if (contact.street_address) {\n        const addressParts = [];\n        if (contact.street_address) addressParts.push(contact.street_address);\n        if (contact.street_address_2) addressParts.push(contact.street_address_2);\n        const cityStateZip = [];\n        if (contact.city) cityStateZip.push(contact.city);\n        if (contact.state_province || contact.postal_code) {\n          const stateZip = [contact.state_province, contact.postal_code].filter(Boolean).join(' ');\n          if (stateZip) cityStateZip.push(stateZip);\n        }\n        if (cityStateZip.length > 0) addressParts.push(cityStateZip.join(', '));\n        if (contact.country) addressParts.push(contact.country);\n        body += `- **Address**: ${addressParts.join('\\n')}\\n`;\n      }\n      if (contact.birthday) {\n        const date = new Date(contact.birthday);\n        body += `- **Birthday**: ${date.toLocaleDateString()}\\n`;\n      }\n      if (contact.notes) {\n        body += `- **Notes**: ${contact.notes}\\n`;\n      }\n      body += '\\n'; // Add a blank line after each contact\n    });\n    \n    return header + body;\n  }\n  \n  /**\n   * Generate a quick summary for large result sets\n   */\n  static formatContactSummary(contacts: Contact[], limit: number = 5): string {\n    const shown = contacts.slice(0, limit);\n    const remaining = contacts.length - limit;\n    \n    let response = this.formatContactsForDisplay(shown);\n    \n    if (remaining > 0) {\n      response += `\\n... and ${remaining} more contact${remaining === 1 ? '' : 's'}.\\n`;\n      response += `\\nPlease refine your search to see more specific results.`;\n    }\n    \n    return response;\n  }\n}"]}
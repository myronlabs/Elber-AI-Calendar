{"version":3,"file":"configService.js","sourceRoot":"","sources":["../../../src/backend/services/configService.ts"],"names":[],"mappings":";AAAA;;GAEG;;AA2BH,4CAUC;AAKD,oCASC;AAKD,kCAGC;AAhDD,wBAAwB;AACxB,MAAM,cAAc,GAAW;IAC7B,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,EAAE;IAC9C,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,oBAAoB;IACvD,WAAW,EAAE,GAAG;IAChB,SAAS,EAAE,GAAG;IACd,eAAe,EAAE,IAAI;IACrB,QAAQ,EAAE,MAAM;CACjB,CAAC;AAEF,6BAA6B;AAC7B,IAAI,aAAa,GAAW,EAAE,GAAG,cAAc,EAAE,CAAC;AAElD;;GAEG;AACI,KAAK,UAAU,gBAAgB;IACpC,iEAAiE;IACjE,6BAA6B;IAE7B,wDAAwD;IACxD,OAAO;QACL,GAAG,aAAa;QAChB,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,aAAa,CAAC,YAAY;QACtE,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,aAAa,CAAC,KAAK;KACvD,CAAC;AACJ,CAAC;AAED;;GAEG;AACI,KAAK,UAAU,YAAY,CAAC,SAA0B;IAC3D,aAAa,GAAG;QACd,GAAG,aAAa;QAChB,GAAG,SAAS;KACb,CAAC;IAEF,+DAA+D;IAE/D,OAAO,aAAa,CAAC;AACvB,CAAC;AAED;;GAEG;AACI,KAAK,UAAU,WAAW;IAC/B,aAAa,GAAG,EAAE,GAAG,cAAc,EAAE,CAAC;IACtC,OAAO,aAAa,CAAC;AACvB,CAAC","sourcesContent":["/**\n * Configuration service for assistant functionality \n */\n\ninterface Config {\n  openaiApiKey: string;\n  model: string;\n  temperature: number;\n  maxTokens: number;\n  feedbackEnabled: boolean;\n  logLevel: string;\n}\n\n// Default configuration\nconst DEFAULT_CONFIG: Config = {\n  openaiApiKey: process.env.OPENAI_API_KEY || '',\n  model: process.env.OPENAI_MODEL || 'gpt-4-1106-preview',\n  temperature: 0.7,\n  maxTokens: 800,\n  feedbackEnabled: true,\n  logLevel: 'info'\n};\n\n// In-memory cache for config\nlet currentConfig: Config = { ...DEFAULT_CONFIG };\n\n/**\n * Get the current configuration\n */\nexport async function getCurrentConfig(): Promise<Config> {\n  // In a real implementation, you might fetch this from a database\n  // or a configuration service\n  \n  // For now, just use environment variables with defaults\n  return {\n    ...currentConfig,\n    openaiApiKey: process.env.OPENAI_API_KEY || currentConfig.openaiApiKey,\n    model: process.env.OPENAI_MODEL || currentConfig.model\n  };\n}\n\n/**\n * Update the configuration\n */\nexport async function updateConfig(newConfig: Partial<Config>): Promise<Config> {\n  currentConfig = {\n    ...currentConfig,\n    ...newConfig\n  };\n  \n  // In a real implementation, you might store this in a database\n  \n  return currentConfig;\n}\n\n/**\n * Reset to default configuration\n */\nexport async function resetConfig(): Promise<Config> {\n  currentConfig = { ...DEFAULT_CONFIG };\n  return currentConfig;\n} "]}
{"version":3,"file":"alertService.js","sourceRoot":"","sources":["../../../src/backend/services/alertService.ts"],"names":[],"mappings":"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","sourcesContent":["import { supabaseAdmin } from './supabaseAdmin';\nimport type { AlertIdentifier, Alert, AlertStatus, CreateAlertPayload, UpdateAlertPayload, ContactOperationResult } from '../types/domain';\nimport { isValidUUID } from '../utils/validation';\n\nexport interface FindAlertsOptions {\n  status?: AlertStatus | AlertStatus[];\n  contactId?: string;\n  eventId?: string;\n  fromDate?: string;\n  toDate?: string;\n  includeRecurring?: boolean;\n  priority?: number;\n  tags?: string[];\n  limit?: number;\n  offset?: number;\n}\n\ninterface AlertPaginationResult {\n  alerts: Alert[];\n  pagination: {\n    totalAlerts: number;\n    currentPage: number;\n    totalPages: number;\n    limit: number;\n    hasMore: boolean;\n  };\n}\n\nclass AlertService {\n  /**\n   * Creates a new alert for a user\n   */\n  async createAlert(userId: string, alertData: CreateAlertPayload): Promise<ContactOperationResult<Alert>> {\n    try {\n      if (!userId) {\n        return {\n          success: false,\n          error: {\n            code: 'MISSING_USER_ID',\n            message: 'User ID is required to create an alert.'\n          }\n        };\n      }\n\n      // Validate required fields\n      if (!alertData.title) {\n        return {\n          success: false,\n          error: {\n            code: 'MISSING_TITLE',\n            message: 'Alert title is required.'\n          }\n        };\n      }\n\n      if (!alertData.due_date) {\n        return {\n          success: false,\n          error: {\n            code: 'MISSING_DUE_DATE',\n            message: 'Alert due date is required.'\n          }\n        };\n      }\n\n      // Validate contact_id if provided\n      if (alertData.contact_id && !isValidUUID(alertData.contact_id)) {\n        return {\n          success: false,\n          error: {\n            code: 'INVALID_CONTACT_ID',\n            message: 'Invalid contact ID format.'\n          }\n        };\n      }\n\n      // Validate event_id if provided\n      if (alertData.event_id && !isValidUUID(alertData.event_id)) {\n        return {\n          success: false,\n          error: {\n            code: 'INVALID_EVENT_ID',\n            message: 'Invalid event ID format.'\n          }\n        };\n      }\n\n      // Prepare data for insertion\n      const alertToCreate = {\n        user_id: userId,\n        ...alertData\n      };\n\n      const { data, error } = await supabaseAdmin\n        .from('alerts')\n        .insert(alertToCreate)\n        .select('*')\n        .single();\n\n      if (error) {\n        console.error(`Error creating alert: ${error.message}`, error);\n        return {\n          success: false,\n          error: {\n            code: 'DB_ERROR',\n            message: 'Failed to create alert.',\n            details: error\n          }\n        };\n      }\n\n      return {\n        success: true,\n        data: data as Alert\n      };\n    } catch (error) {\n      console.error('Unexpected error creating alert:', error);\n      return {\n        success: false,\n        error: {\n          code: 'UNEXPECTED_ERROR',\n          message: 'An unexpected error occurred while creating the alert.',\n          details: error\n        }\n      };\n    }\n  }\n\n  /**\n   * Updates an existing alert\n   */\n  async updateAlert(\n    userId: string,\n    alertId: string,\n    updateData: UpdateAlertPayload\n  ): Promise<ContactOperationResult<Alert>> {\n    try {\n      if (!userId) {\n        return {\n          success: false,\n          error: {\n            code: 'MISSING_USER_ID',\n            message: 'User ID is required to update an alert.'\n          }\n        };\n      }\n\n      if (!alertId || !isValidUUID(alertId)) {\n        return {\n          success: false,\n          error: {\n            code: 'INVALID_ALERT_ID',\n            message: 'Valid alert ID is required.'\n          }\n        };\n      }\n\n      // Validate contact_id if provided\n      if (updateData.contact_id && !isValidUUID(updateData.contact_id)) {\n        return {\n          success: false,\n          error: {\n            code: 'INVALID_CONTACT_ID',\n            message: 'Invalid contact ID format.'\n          }\n        };\n      }\n\n      // Validate event_id if provided\n      if (updateData.event_id && !isValidUUID(updateData.event_id)) {\n        return {\n          success: false,\n          error: {\n            code: 'INVALID_EVENT_ID',\n            message: 'Invalid event ID format.'\n          }\n        };\n      }\n\n      // First check if the alert exists and belongs to the user\n      const { data: existingAlert, error: checkError } = await supabaseAdmin\n        .from('alerts')\n        .select('*')\n        .eq('alert_id', alertId)\n        .eq('user_id', userId)\n        .single();\n\n      if (checkError || !existingAlert) {\n        return {\n          success: false,\n          error: {\n            code: 'ALERT_NOT_FOUND',\n            message: 'Alert not found or does not belong to the user.',\n            details: checkError\n          }\n        };\n      }\n\n      // Perform the update\n      const { data, error } = await supabaseAdmin\n        .from('alerts')\n        .update(updateData)\n        .eq('alert_id', alertId)\n        .eq('user_id', userId)\n        .select('*')\n        .single();\n\n      if (error) {\n        console.error(`Error updating alert: ${error.message}`, error);\n        return {\n          success: false,\n          error: {\n            code: 'DB_ERROR',\n            message: 'Failed to update alert.',\n            details: error\n          }\n        };\n      }\n\n      return {\n        success: true,\n        data: data as Alert\n      };\n    } catch (error) {\n      console.error('Unexpected error updating alert:', error);\n      return {\n        success: false,\n        error: {\n          code: 'UNEXPECTED_ERROR',\n          message: 'An unexpected error occurred while updating the alert.',\n          details: error\n        }\n      };\n    }\n  }\n\n  /**\n   * Deletes an alert\n   */\n  async deleteAlert(userId: string, alertIdentifier: AlertIdentifier): Promise<ContactOperationResult<{ alert_id: string; title: string }>> {\n    try {\n      if (!userId) {\n        return {\n          success: false,\n          error: {\n            code: 'MISSING_USER_ID',\n            message: 'User ID is required to delete an alert.'\n          }\n        };\n      }\n\n      let alertId: string;\n      let title: string = '';\n\n      // Handle different identifier types\n      if (alertIdentifier.type === 'id') {\n        if (!isValidUUID(alertIdentifier.alert_id)) {\n          return {\n            success: false,\n            error: {\n              code: 'INVALID_ALERT_ID',\n              message: 'Invalid alert ID format.'\n            }\n          };\n        }\n        alertId = alertIdentifier.alert_id;\n\n        // Get the title for the response\n        const { data: alertData, error: fetchError } = await supabaseAdmin\n          .from('alerts')\n          .select('title')\n          .eq('alert_id', alertId)\n          .eq('user_id', userId)\n          .single();\n\n        if (fetchError || !alertData) {\n          return {\n            success: false,\n            error: {\n              code: 'ALERT_NOT_FOUND',\n              message: 'Alert not found or does not belong to the user.',\n              details: fetchError\n            }\n          };\n        }\n\n        title = alertData.title;\n      } else if (alertIdentifier.type === 'title_user') {\n        if (!alertIdentifier.title) {\n          return {\n            success: false,\n            error: {\n              code: 'MISSING_TITLE',\n              message: 'Alert title is required for title-based deletion.'\n            }\n          };\n        }\n\n        // Find alert by title for this user\n        const { data: alertData, error: fetchError } = await supabaseAdmin\n          .from('alerts')\n          .select('alert_id, title')\n          .eq('title', alertIdentifier.title)\n          .eq('user_id', userId);\n\n        if (fetchError) {\n          return {\n            success: false,\n            error: {\n              code: 'DB_ERROR',\n              message: 'Error fetching alert by title.',\n              details: fetchError\n            }\n          };\n        }\n\n        if (!alertData || alertData.length === 0) {\n          return {\n            success: false,\n            error: {\n              code: 'ALERT_NOT_FOUND',\n              message: `No alert found with title \"${alertIdentifier.title}\".`\n            }\n          };\n        }\n\n        if (alertData.length > 1) {\n          return {\n            success: false,\n            error: {\n              code: 'MULTIPLE_ALERTS_FOUND',\n              message: `Multiple alerts found with title \"${alertIdentifier.title}\". Please use a specific alert ID.`\n            }\n          };\n        }\n\n        alertId = alertData[0].alert_id;\n        title = alertData[0].title;\n      } else {\n        return {\n          success: false,\n          error: {\n            code: 'INVALID_IDENTIFIER_TYPE',\n            message: 'Invalid alert identifier type.'\n          }\n        };\n      }\n\n      // Perform the deletion\n      const { error: deleteError } = await supabaseAdmin\n        .from('alerts')\n        .delete()\n        .eq('alert_id', alertId)\n        .eq('user_id', userId);\n\n      if (deleteError) {\n        console.error(`Error deleting alert: ${deleteError.message}`, deleteError);\n        return {\n          success: false,\n          error: {\n            code: 'DB_ERROR',\n            message: 'Failed to delete alert.',\n            details: deleteError\n          }\n        };\n      }\n\n      return {\n        success: true,\n        data: {\n          alert_id: alertId,\n          title\n        }\n      };\n    } catch (error) {\n      console.error('Unexpected error deleting alert:', error);\n      return {\n        success: false,\n        error: {\n          code: 'UNEXPECTED_ERROR',\n          message: 'An unexpected error occurred while deleting the alert.',\n          details: error\n        }\n      };\n    }\n  }\n\n  /**\n   * Finds alerts for a user based on various criteria\n   */\n  async findAlerts(userId: string, options: FindAlertsOptions = {}): Promise<ContactOperationResult<AlertPaginationResult>> {\n    try {\n      if (!userId) {\n        return {\n          success: false,\n          error: {\n            code: 'MISSING_USER_ID',\n            message: 'User ID is required to find alerts.'\n          }\n        };\n      }\n\n      // Set defaults for pagination\n      const limit = options.limit || 10;\n      const offset = options.offset || 0;\n      const page = Math.floor(offset / limit) + 1;\n\n      // Start building the query\n      let query = supabaseAdmin\n        .from('alerts')\n        .select('*', { count: 'exact' })\n        .eq('user_id', userId);\n\n      // Add filters\n      if (options.status) {\n        if (Array.isArray(options.status)) {\n          query = query.in('status', options.status);\n        } else {\n          query = query.eq('status', options.status);\n        }\n      }\n\n      if (options.contactId) {\n        query = query.eq('contact_id', options.contactId);\n      }\n\n      if (options.eventId) {\n        query = query.eq('event_id', options.eventId);\n      }\n\n      if (options.fromDate) {\n        query = query.gte('due_date', options.fromDate);\n      }\n\n      if (options.toDate) {\n        query = query.lte('due_date', options.toDate);\n      }\n\n      if (options.priority) {\n        query = query.eq('priority', options.priority);\n      }\n\n      if (options.tags && options.tags.length > 0) {\n        // Filter for alerts that contain any of the specified tags\n        query = query.overlaps('tags', options.tags);\n      }\n\n      // Apply pagination\n      query = query.range(offset, offset + limit - 1);\n\n      // Order by due date (most recent first)\n      query = query.order('due_date', { ascending: true });\n\n      // Execute the query\n      const { data, error, count } = await query;\n\n      if (error) {\n        console.error(`Error finding alerts: ${error.message}`, error);\n        return {\n          success: false,\n          error: {\n            code: 'DB_ERROR',\n            message: 'Failed to find alerts.',\n            details: error\n          }\n        };\n      }\n\n      const totalAlerts = count || 0;\n      const totalPages = Math.ceil(totalAlerts / limit);\n      const hasMore = offset + limit < totalAlerts;\n\n      return {\n        success: true,\n        data: {\n          alerts: data as Alert[],\n          pagination: {\n            totalAlerts,\n            currentPage: page,\n            totalPages,\n            limit,\n            hasMore\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Unexpected error finding alerts:', error);\n      return {\n        success: false,\n        error: {\n          code: 'UNEXPECTED_ERROR',\n          message: 'An unexpected error occurred while finding alerts.',\n          details: error\n        }\n      };\n    }\n  }\n\n  /**\n   * Gets a single alert by ID\n   */\n  async getAlertById(userId: string, alertId: string): Promise<ContactOperationResult<Alert>> {\n    try {\n      if (!userId) {\n        return {\n          success: false,\n          error: {\n            code: 'MISSING_USER_ID',\n            message: 'User ID is required to get an alert.'\n          }\n        };\n      }\n\n      if (!alertId || !isValidUUID(alertId)) {\n        return {\n          success: false,\n          error: {\n            code: 'INVALID_ALERT_ID',\n            message: 'Valid alert ID is required.'\n          }\n        };\n      }\n\n      const { data, error } = await supabaseAdmin\n        .from('alerts')\n        .select('*')\n        .eq('alert_id', alertId)\n        .eq('user_id', userId)\n        .single();\n\n      if (error) {\n        console.error(`Error getting alert: ${error.message}`, error);\n        return {\n          success: false,\n          error: {\n            code: 'DB_ERROR',\n            message: 'Failed to get alert.',\n            details: error\n          }\n        };\n      }\n\n      if (!data) {\n        return {\n          success: false,\n          error: {\n            code: 'ALERT_NOT_FOUND',\n            message: 'Alert not found or does not belong to the user.'\n          }\n        };\n      }\n\n      return {\n        success: true,\n        data: data as Alert\n      };\n    } catch (error) {\n      console.error('Unexpected error getting alert:', error);\n      return {\n        success: false,\n        error: {\n          code: 'UNEXPECTED_ERROR',\n          message: 'An unexpected error occurred while getting the alert.',\n          details: error\n        }\n      };\n    }\n  }\n\n  /**\n   * Get upcoming alerts (due within the next X days)\n   */\n  async getUpcomingAlerts(\n    userId: string,\n    daysAhead: number = 7,\n    limit: number = 10\n  ): Promise<ContactOperationResult<Alert[]>> {\n    try {\n      if (!userId) {\n        return {\n          success: false,\n          error: {\n            code: 'MISSING_USER_ID',\n            message: 'User ID is required to get upcoming alerts.'\n          }\n        };\n      }\n\n      const now = new Date();\n      const futureDate = new Date(now);\n      futureDate.setDate(now.getDate() + daysAhead);\n\n      const { data, error } = await supabaseAdmin\n        .from('alerts')\n        .select('*')\n        .eq('user_id', userId)\n        .eq('status', 'pending')\n        .gte('due_date', now.toISOString())\n        .lte('due_date', futureDate.toISOString())\n        .order('due_date', { ascending: true })\n        .limit(limit);\n\n      if (error) {\n        console.error(`Error getting upcoming alerts: ${error.message}`, error);\n        return {\n          success: false,\n          error: {\n            code: 'DB_ERROR',\n            message: 'Failed to get upcoming alerts.',\n            details: error\n          }\n        };\n      }\n\n      return {\n        success: true,\n        data: data as Alert[]\n      };\n    } catch (error) {\n      console.error('Unexpected error getting upcoming alerts:', error);\n      return {\n        success: false,\n        error: {\n          code: 'UNEXPECTED_ERROR',\n          message: 'An unexpected error occurred while getting upcoming alerts.',\n          details: error\n        }\n      };\n    }\n  }\n\n  /**\n   * Mark an alert as dismissed\n   */\n  async dismissAlert(userId: string, alertId: string): Promise<ContactOperationResult<Alert>> {\n    try {\n      if (!userId) {\n        return {\n          success: false,\n          error: {\n            code: 'MISSING_USER_ID',\n            message: 'User ID is required to dismiss an alert.'\n          }\n        };\n      }\n\n      if (!alertId || !isValidUUID(alertId)) {\n        return {\n          success: false,\n          error: {\n            code: 'INVALID_ALERT_ID',\n            message: 'Valid alert ID is required.'\n          }\n        };\n      }\n\n      const now = new Date().toISOString();\n      const { data, error } = await supabaseAdmin\n        .from('alerts')\n        .update({\n          status: 'dismissed',\n          dismissed_at: now\n        })\n        .eq('alert_id', alertId)\n        .eq('user_id', userId)\n        .select('*')\n        .single();\n\n      if (error) {\n        console.error(`Error dismissing alert: ${error.message}`, error);\n        return {\n          success: false,\n          error: {\n            code: 'DB_ERROR',\n            message: 'Failed to dismiss alert.',\n            details: error\n          }\n        };\n      }\n\n      return {\n        success: true,\n        data: data as Alert\n      };\n    } catch (error) {\n      console.error('Unexpected error dismissing alert:', error);\n      return {\n        success: false,\n        error: {\n          code: 'UNEXPECTED_ERROR',\n          message: 'An unexpected error occurred while dismissing the alert.',\n          details: error\n        }\n      };\n    }\n  }\n\n  /**\n   * Snooze an alert (delay it)\n   */\n  async snoozeAlert(\n    userId: string,\n    alertId: string,\n    snoozeUntil: string\n  ): Promise<ContactOperationResult<Alert>> {\n    try {\n      if (!userId) {\n        return {\n          success: false,\n          error: {\n            code: 'MISSING_USER_ID',\n            message: 'User ID is required to snooze an alert.'\n          }\n        };\n      }\n\n      if (!alertId || !isValidUUID(alertId)) {\n        return {\n          success: false,\n          error: {\n            code: 'INVALID_ALERT_ID',\n            message: 'Valid alert ID is required.'\n          }\n        };\n      }\n\n      if (!snoozeUntil) {\n        return {\n          success: false,\n          error: {\n            code: 'MISSING_SNOOZE_UNTIL',\n            message: 'A snooze until date is required.'\n          }\n        };\n      }\n\n      // Validate snoozeUntil is a future date\n      const snoozeDate = new Date(snoozeUntil);\n      const now = new Date();\n      if (snoozeDate <= now) {\n        return {\n          success: false,\n          error: {\n            code: 'INVALID_SNOOZE_DATE',\n            message: 'Snooze until date must be in the future.'\n          }\n        };\n      }\n\n      const { data, error } = await supabaseAdmin\n        .from('alerts')\n        .update({\n          status: 'snoozed',\n          snoozed_until: snoozeUntil\n        })\n        .eq('alert_id', alertId)\n        .eq('user_id', userId)\n        .select('*')\n        .single();\n\n      if (error) {\n        console.error(`Error snoozing alert: ${error.message}`, error);\n        return {\n          success: false,\n          error: {\n            code: 'DB_ERROR',\n            message: 'Failed to snooze alert.',\n            details: error\n          }\n        };\n      }\n\n      return {\n        success: true,\n        data: data as Alert\n      };\n    } catch (error) {\n      console.error('Unexpected error snoozing alert:', error);\n      return {\n        success: false,\n        error: {\n          code: 'UNEXPECTED_ERROR',\n          message: 'An unexpected error occurred while snoozing the alert.',\n          details: error\n        }\n      };\n    }\n  }\n}\n\nexport const alertService = new AlertService(); "]}
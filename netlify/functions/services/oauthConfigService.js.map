{"version":3,"file":"oauthConfigService.js","sourceRoot":"","sources":["../../../src/backend/services/oauthConfigService.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;GAWG;;;AA6CH;;GAEG;AACH,MAAa,kBAAkB;IAG7B;QACE,2CAA2C;QAC3C,IAAI,CAAC,OAAO,GAAG;YACb,MAAM,EAAE,IAAI,CAAC,sBAAsB,EAAE;SACtC,CAAC;QAEF,oDAAoD;QACpD,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACK,sBAAsB;QAC5B,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;QAC9C,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC;QACtD,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,yBAAyB;YACtC,uEAAuE,CAAC;QAE3F,iCAAiC;QACjC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;QAC3E,CAAC;QAED,OAAO;YACL,QAAQ;YACR,YAAY;YACZ,WAAW;YACX,MAAM,EAAE;gBACN,OAAO,EAAE,kDAAkD;gBAC3D,gBAAgB,EAAE,mDAAmD;gBACrE,qBAAqB,EAAE,yDAAyD;gBAChF,gBAAgB,EAAE,mDAAmD;gBACrE,QAAQ,EAAE,0CAA0C;aACrD;SACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,sBAAsB;QAC5B,yBAAyB;QACzB,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QAEhC,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,YAAY,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;YACpE,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACxD,CAAC;QAED,+CAA+C;IACjD,CAAC;IAED;;OAEG;IACI,eAAe;QACpB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACI,2BAA2B,CAAC,OAAsD;QACvF,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QAEhC,QAAQ,OAAO,EAAE,CAAC;YAChB,KAAK,UAAU;gBACb,OAAO;oBACL,MAAM,CAAC,MAAM,CAAC,gBAAgB;oBAC9B,MAAM,CAAC,MAAM,CAAC,qBAAqB;oBACnC,MAAM,CAAC,MAAM,CAAC,OAAO;iBACtB,CAAC;YAEJ,KAAK,UAAU;gBACb,OAAO;oBACL,MAAM,CAAC,MAAM,CAAC,QAAQ;oBACtB,MAAM,CAAC,MAAM,CAAC,OAAO;iBACtB,CAAC;YAEJ,KAAK,mBAAmB;gBACtB,OAAO;oBACL,MAAM,CAAC,MAAM,CAAC,gBAAgB;oBAC9B,MAAM,CAAC,MAAM,CAAC,OAAO;iBACtB,CAAC;YAEJ;gBACE,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACI,iBAAiB,CAAC,WAA0B,EAAE,cAAwB;QAC3E,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,KAAK,CAAC;QACf,CAAC;QAED,MAAM,UAAU,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1C,OAAO,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IACnE,CAAC;CACF;AAjHD,gDAiHC;AAED,oDAAoD;AACvC,QAAA,kBAAkB,GAAG,IAAI,kBAAkB,EAAE,CAAC","sourcesContent":["/**\n * OAuth Configuration Service\n * \n * A centralized service for managing OAuth provider configurations.\n * This follows the dependency injection pattern to make testing and configuration easier.\n * \n * Using a dedicated configuration service allows us to:\n * 1. Centralize environment variable validation\n * 2. Support multiple OAuth providers consistently\n * 3. Enable easy mocking for testing\n * 4. Ensure type safety across configurations\n */\n\n// Define interfaces for OAuth provider configurations\nexport interface GoogleOAuthConfig {\n  clientId: string;\n  clientSecret: string;\n  redirectUri: string;\n  scopes: {\n    /** \n     * Basic profile scope - minimal scope required for identification\n     * https://developers.google.com/identity/protocols/oauth2/scopes#oauth2\n     */\n    profile: string;\n    \n    /** \n     * Read-only access to Google contacts\n     * https://developers.google.com/identity/protocols/oauth2/scopes#people\n     */\n    contactsReadonly: string;\n    \n    /** \n     * Read-only access to \"other contacts\" from Gmail, etc.\n     * https://developers.google.com/identity/protocols/oauth2/scopes#people\n     */\n    otherContactsReadonly: string;\n    \n    /**\n     * Read-only access to calendar data\n     * https://developers.google.com/identity/protocols/oauth2/scopes#calendar\n     */\n    calendarReadonly: string;\n    \n    /**\n     * Full access to calendar data (read/write)\n     * https://developers.google.com/identity/protocols/oauth2/scopes#calendar\n     */\n    calendar: string;\n  };\n}\n\nexport interface OAuthProviderConfigs {\n  google: GoogleOAuthConfig;\n  // Add other providers as needed, like 'microsoft', 'apple', etc.\n}\n\n/**\n * Main configuration service class for OAuth providers\n */\nexport class OAuthConfigService {\n  private configs: OAuthProviderConfigs;\n  \n  constructor() {\n    // Initialize with validated configurations\n    this.configs = {\n      google: this.initializeGoogleConfig()\n    };\n    \n    // Verify that all required configurations are valid\n    this.validateConfigurations();\n  }\n  \n  /**\n   * Initialize and validate Google OAuth configuration\n   */\n  private initializeGoogleConfig(): GoogleOAuthConfig {\n    const clientId = process.env.GOOGLE_CLIENT_ID;\n    const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\n    const redirectUri = process.env.GOOGLE_OAUTH_CALLBACK_URL || \n                       'https://elber-ai.netlify.app/.netlify/functions/google-oauth/callback';\n    \n    // Validate environment variables\n    if (!clientId) {\n      throw new Error('GOOGLE_CLIENT_ID environment variable is required');\n    }\n    \n    if (!clientSecret) {\n      throw new Error('GOOGLE_CLIENT_SECRET environment variable is required');\n    }\n    \n    return {\n      clientId,\n      clientSecret,\n      redirectUri,\n      scopes: {\n        profile: 'https://www.googleapis.com/auth/userinfo.profile',\n        contactsReadonly: 'https://www.googleapis.com/auth/contacts.readonly',\n        otherContactsReadonly: 'https://www.googleapis.com/auth/contacts.other.readonly',\n        calendarReadonly: 'https://www.googleapis.com/auth/calendar.readonly',\n        calendar: 'https://www.googleapis.com/auth/calendar'\n      }\n    };\n  }\n  \n  /**\n   * Validate that all required configurations are present\n   */\n  private validateConfigurations(): void {\n    // Validate Google config\n    const { google } = this.configs;\n    \n    if (!google.clientId || !google.clientSecret || !google.redirectUri) {\n      throw new Error('Invalid Google OAuth configuration');\n    }\n    \n    // Add validation for other providers as needed\n  }\n  \n  /**\n   * Get Google OAuth configuration\n   */\n  public getGoogleConfig(): GoogleOAuthConfig {\n    return this.configs.google;\n  }\n  \n  /**\n   * Get all required scopes for a specific feature\n   * @param feature - The feature requiring OAuth scopes\n   * @returns Array of required scopes\n   */\n  public getRequiredScopesForFeature(feature: 'contacts' | 'calendar' | 'calendar_readonly'): string[] {\n    const { google } = this.configs;\n    \n    switch (feature) {\n      case 'contacts':\n        return [\n          google.scopes.contactsReadonly,\n          google.scopes.otherContactsReadonly,\n          google.scopes.profile\n        ];\n        \n      case 'calendar':\n        return [\n          google.scopes.calendar,\n          google.scopes.profile\n        ];\n        \n      case 'calendar_readonly':\n        return [\n          google.scopes.calendarReadonly,\n          google.scopes.profile\n        ];\n        \n      default:\n        return [google.scopes.profile];\n    }\n  }\n  \n  /**\n   * Utility method to check if a scope string contains all required scopes\n   * @param tokenScopes - Space-separated scope string from OAuth token\n   * @param requiredScopes - Array of required scope strings\n   * @returns Boolean indicating if all required scopes are present\n   */\n  public hasRequiredScopes(tokenScopes: string | null, requiredScopes: string[]): boolean {\n    if (!tokenScopes) {\n      return false;\n    }\n    \n    const scopeArray = tokenScopes.split(' ');\n    return requiredScopes.every(scope => scopeArray.includes(scope));\n  }\n}\n\n// Singleton instance for use across the application\nexport const oauthConfigService = new OAuthConfigService();"]}
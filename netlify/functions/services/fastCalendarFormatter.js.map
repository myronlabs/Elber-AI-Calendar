{"version":3,"file":"fastCalendarFormatter.js","sourceRoot":"","sources":["../../../src/backend/services/fastCalendarFormatter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Fast Calendar Formatter\n * Provides immediate formatted responses without waiting for AI\n */\n\nimport { format, parseISO, isValid } from 'date-fns';\n\n// Interface for calendar events - must match our database schema \n// and what's returned from the calendar API\ninterface CalendarEvent {\n  event_id: string;\n  user_id: string;\n  title: string;\n  start_time: string; // ISO 8601 format\n  end_time: string; // ISO 8601 format\n  description?: string | null;\n  location?: string | null;\n  is_all_day?: boolean;\n  created_at: string;\n  updated_at: string;\n  \n  // Recurring event fields\n  is_recurring?: boolean;\n  recurrence_pattern?: string | null;\n  recurrence_interval?: number | null;\n  recurrence_day_of_week?: number[] | null;\n  recurrence_day_of_month?: number | null;\n  recurrence_month?: number | null;\n  recurrence_end_date?: string | null;\n  recurrence_count?: number | null;\n  recurrence_rule?: string | null;\n  series_id?: string | null;\n  [key: string]: unknown; // Allow other fields\n}\n\nexport class FastCalendarFormatter {\n  private defaultTimeZone: string;\n  \n  constructor(timeZone?: string) {\n    this.defaultTimeZone = timeZone || Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n  \n  /**\n   * Formats a list of calendar events for display\n   * @param events Array of calendar events\n   * @param timeZone Optional time zone for formatting dates\n   * @returns Formatted string with event details\n   */\n  public static formatEventsForDisplay(events: CalendarEvent[], _timeZone?: string): string {\n    if (!events || events.length === 0) {\n      return \"I couldn't find any events matching your criteria.\";\n    }\n    \n    // timeZone is available for future use\n    const eventCount = events.length;\n    \n    // Sort events by start time\n    const sortedEvents = [...events].sort((a, b) => {\n      return new Date(a.start_time).getTime() - new Date(b.start_time).getTime();\n    });\n    \n    let formattedEvents = `Here are your ${eventCount} event${eventCount === 1 ? '' : 's'}:\\n\\n`;\n    \n    sortedEvents.forEach((event, index) => {\n      const startDate = parseISO(event.start_time);\n      const endDate = parseISO(event.end_time);\n      \n      if (!isValid(startDate) || !isValid(endDate)) {\n        formattedEvents += `Event ${index + 1}: ${event.title} (invalid date format)\\n`;\n        return;\n      }\n      \n      const dateStr = format(startDate, 'EEEE, MMMM d, yyyy');\n      let timeStr;\n      \n      if (event.is_all_day) {\n        timeStr = 'All day';\n      } else {\n        const startTimeStr = format(startDate, 'h:mm a');\n        const endTimeStr = format(endDate, 'h:mm a');\n        timeStr = `${startTimeStr} - ${endTimeStr}`;\n      }\n      \n      formattedEvents += `**${event.title}**\\n`;\n      formattedEvents += `📅 ${dateStr}\\n`;\n      formattedEvents += `⏰ ${timeStr}\\n`;\n      \n      if (event.location) {\n        formattedEvents += `📍 ${event.location}\\n`;\n      }\n      \n      if (event.description) {\n        formattedEvents += `📝 ${event.description}\\n`;\n      }\n      \n      if (event.is_recurring) {\n        let recurrenceInfo = '🔄 Recurring: ';\n        if (event.recurrence_pattern) {\n          recurrenceInfo += event.recurrence_pattern.charAt(0).toUpperCase() + event.recurrence_pattern.slice(1);\n          if (event.recurrence_interval && event.recurrence_interval > 1) {\n            recurrenceInfo += ` (every ${event.recurrence_interval} ${event.recurrence_pattern}s)`;\n          }\n        } else {\n          recurrenceInfo += 'Yes';\n        }\n        formattedEvents += `${recurrenceInfo}\\n`;\n      }\n      \n      // Add a separator between events\n      if (index < sortedEvents.length - 1) {\n        formattedEvents += '\\n---\\n\\n';\n      }\n    });\n    \n    return formattedEvents;\n  }\n  \n  /**\n   * Formats a summary of calendar events when there are too many to show in detail\n   * @param events Array of calendar events\n   * @param summaryThreshold Number of events to summarize (default 10)\n   * @returns Formatted summary string\n   */\n  public static formatEventsSummary(events: CalendarEvent[], summaryThreshold: number = 10): string {\n    if (!events || events.length === 0) {\n      return \"I couldn't find any events matching your criteria.\";\n    }\n    \n    const eventCount = events.length;\n    \n    // Sort events by start time\n    const sortedEvents = [...events].sort((a, b) => {\n      return new Date(a.start_time).getTime() - new Date(b.start_time).getTime();\n    });\n    \n    // Get date ranges\n    const firstEventDate = parseISO(sortedEvents[0].start_time);\n    const lastEventDate = parseISO(sortedEvents[eventCount - 1].start_time);\n    \n    const dateRangeStr = firstEventDate.toDateString() === lastEventDate.toDateString()\n      ? format(firstEventDate, 'MMMM d, yyyy')\n      : `${format(firstEventDate, 'MMMM d, yyyy')} to ${format(lastEventDate, 'MMMM d, yyyy')}`;\n    \n    let summary = `I found ${eventCount} events from ${dateRangeStr}. Here are the first ${Math.min(summaryThreshold, eventCount)}:\\n\\n`;\n    \n    // Show details for the first few events\n    for (let i = 0; i < Math.min(summaryThreshold, eventCount); i++) {\n      const event = sortedEvents[i];\n      const startDate = parseISO(event.start_time);\n      \n      if (!isValid(startDate)) {\n        summary += `- ${event.title} (invalid date format)\\n`;\n        continue;\n      }\n      \n      const dateStr = format(startDate, 'EEE, MMM d');\n      const timeStr = event.is_all_day \n        ? 'All day' \n        : format(startDate, 'h:mm a');\n      \n      summary += `- **${event.title}** · ${dateStr} · ${timeStr}\\n`;\n    }\n    \n    // Add a note about remaining events\n    if (eventCount > summaryThreshold) {\n      const remainingCount = eventCount - summaryThreshold;\n      summary += `\\n...and ${remainingCount} more event${remainingCount === 1 ? '' : 's'}. Would you like to see more specific details about any of these events?`;\n    }\n    \n    return summary;\n  }\n} "]}
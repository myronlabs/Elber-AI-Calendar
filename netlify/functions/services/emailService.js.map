{"version":3,"file":"emailService.js","sourceRoot":"","sources":["../../../src/backend/services/emailService.ts"],"names":[],"mappings":";;;AAAA,mCAAgC;AAEhC,4DAA4D;AAC5D,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;AAChD,2DAA2D;AAC3D,MAAM,SAAS,GAAG,wCAAwC,CAAC;AAC3D,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,8BAA8B,CAAC;AAE/E,IAAI,CAAC,YAAY,EAAE,CAAC;IAClB,OAAO,CAAC,KAAK,CAAC,qGAAqG,CAAC,CAAC;AACvH,CAAC;AAED,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,YAAY,CAAC,CAAC;AAExC;;;;;;;GAOG;AACI,MAAM,qBAAqB,GAAG,KAAK,EACxC,KAAa,EACb,SAAiB,EACjB,MAAc,EACd,KAAa,EACoD,EAAE;IACnE,IAAI,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,iDAAiD,KAAK,EAAE,CAAC,CAAC;QAEtE,MAAM,gBAAgB,GAAG,GAAG,WAAW,oBAAoB,kBAAkB,CAAC,MAAM,CAAC,UAAU,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;QAE3H,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qBAyDH,SAAS;;;2CAGa,KAAK;;;;;qBAK3B,gBAAgB;;;;;;wBAMb,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;;;;;KAK3C,CAAC;QAEF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;YAC/C,IAAI,EAAE,SAAS;YACf,EAAE,EAAE,KAAK;YACT,OAAO,EAAE,2BAA2B;YACpC,IAAI,EAAE,WAAW;SAClB,CAAC,CAAC;QAEH,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,kDAAkD,EAAE,KAAK,CAAC,CAAC;YACzE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,mCAAmC,EAAE,KAAK,EAAE,CAAC;QACjF,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,4DAA4D,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;QACpF,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,sCAAsC,EAAE,CAAC;IAC5E,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,6DAA6D,EAAE,KAAK,CAAC,CAAC;QACpF,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,+DAA+D,EAAE,KAAK,EAAE,CAAC;IAC7G,CAAC;AACH,CAAC,CAAC;AA3GW,QAAA,qBAAqB,yBA2GhC;AAEF;;;;;GAKG;AACI,MAAM,sBAAsB,GAAG,KAAK,EACzC,KAAa,EACb,SAAiB,EACgD,EAAE;IACnE,IAAI,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,6DAA6D,KAAK,EAAE,CAAC,CAAC;QAElF,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qBAgDH,SAAS;;;;;eAKf,SAAS;;;;wBAIA,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;;;;;KAK3C,CAAC;QAEF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;YACzC,IAAI,EAAE,SAAS;YACf,EAAE,EAAE,KAAK;YACT,OAAO,EAAE,2BAA2B;YACpC,IAAI,EAAE,WAAW;SAClB,CAAC,CAAC;QAEH,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,oDAAoD,EAAE,KAAK,CAAC,CAAC;YAC3E,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,qCAAqC,EAAE,KAAK,EAAE,CAAC;QACnF,CAAC;QAED,iEAAiE;QACjE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,wCAAwC,EAAE,CAAC;IAC9E,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,UAAU,GAAG,KAAgB,CAAC,CAAC,uCAAuC;QAC5E,OAAO,CAAC,KAAK,CAAC,+DAA+D,EAAE,UAAU,CAAC,CAAC;QAC3F,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,iEAAiE,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC;IAC3H,CAAC;AACH,CAAC,CAAC;AA1FW,QAAA,sBAAsB,0BA0FjC;AAEF;;;GAGG;AACI,MAAM,yBAAyB,GAAG,GAAW,EAAE;IACpD,oEAAoE;IACpE,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;AAChE,CAAC,CAAC;AAHW,QAAA,yBAAyB,6BAGpC","sourcesContent":["import { Resend } from 'resend';\n\n// Initialize Resend with API key from environment variables\nconst resendApiKey = process.env.RESEND_API_KEY;\n// Use verified domain email address for production sending\nconst fromEmail = 'Elber AI <notifications@myronlabs.net>';\nconst frontendUrl = process.env.FRONTEND_URL || 'https://elber-ai.netlify.app';\n\nif (!resendApiKey) {\n  console.error('CRITICAL: RESEND_API_KEY environment variable is not set. Email service will not function properly.');\n}\n\nconst resend = new Resend(resendApiKey);\n\n/**\n * Sends a verification email to a new user after signup\n * @param email User's email address\n * @param firstName User's first name\n * @param userId User's ID\n * @param token The token to include in the verification link\n * @returns Result of the email send operation\n */\nexport const sendVerificationEmail = async (\n  email: string,\n  firstName: string,\n  userId: string,\n  token: string\n): Promise<{ success: boolean; message: string; error?: unknown }> => {\n  try {\n    console.log(`[EmailService] Sending verification email to: ${email}`);\n    \n    const verificationLink = `${frontendUrl}/verify-email?id=${encodeURIComponent(userId)}&token=${encodeURIComponent(token)}`;\n    \n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Verify Your Email Address</title>\n        <style>\n          body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n          }\n          .container {\n            background-color: #f9f9f9;\n            border-radius: 8px;\n            padding: 30px;\n            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n          }\n          h1 {\n            color: #1a73e8;\n          }\n          .button {\n            display: inline-block;\n            background-color: #1a73e8;\n            color: white;\n            text-decoration: none;\n            padding: 12px 24px;\n            border-radius: 4px;\n            font-weight: bold;\n            margin: 20px 0;\n          }\n          .verification-code {\n            font-size: 24px;\n            font-weight: bold;\n            letter-spacing: 5px;\n            color: #1a73e8;\n            background-color: #f0f7ff;\n            padding: 15px;\n            border-radius: 4px;\n            display: inline-block;\n            margin: 20px 0;\n            border: 1px dashed #1a73e8;\n          }\n          .footer {\n            font-size: 12px;\n            color: #666;\n            margin-top: 30px;\n            text-align: center;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <h1>Welcome to Elber!</h1>\n          <p>Hello ${firstName},</p>\n          <p>Thank you for signing up for Elber. To complete your registration and verify your email address, please use the verification code below:</p>\n          \n          <div class=\"verification-code\">${token}</div>\n          \n          <p>Enter this code on the verification page to activate your account.</p>\n          \n          <p>Alternatively, you can click the link below to verify your email:</p>\n          <a href=\"${verificationLink}\" class=\"button\">Verify Email Address</a>\n          \n          <p>If you did not sign up for an Elber account, you can safely ignore this email.</p>\n          \n          <div class=\"footer\">\n            <p>This email was sent from Elber, your AI-powered networking assistant.</p>\n            <p>&copy; ${new Date().getFullYear()} Elber AI. All rights reserved.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n    \n    const { data, error } = await resend.emails.send({\n      from: fromEmail,\n      to: email,\n      subject: 'Verify Your Elber Account',\n      html: htmlContent,\n    });\n    \n    if (error) {\n      console.error(`[EmailService] Error sending verification email:`, error);\n      return { success: false, message: 'Failed to send verification email', error };\n    }\n    \n    console.log(`[EmailService] Successfully sent verification email. ID: ${data?.id}`);\n    return { success: true, message: 'Verification email sent successfully' };\n  } catch (error) {\n    console.error('[EmailService] Unexpected error sending verification email:', error);\n    return { success: false, message: 'An unexpected error occurred while sending verification email', error };\n  }\n};\n\n/**\n * Sends a password reset email\n * @param email User's email address\n * @param resetLink The password reset link\n * @returns Result of the email send operation\n */\nexport const sendPasswordResetEmail = async (\n  email: string,\n  resetLink: string\n): Promise<{ success: boolean; message: string; error?: unknown }> => {\n  try {\n    console.log(`[EmailService] Preparing to send password reset email to: ${email}`);\n    \n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Reset Your Password</title>\n        <style>\n          body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n          }\n          .container {\n            background-color: #f9f9f9;\n            border-radius: 8px;\n            padding: 30px;\n            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n          }\n          h1 {\n            color: #1a73e8;\n          }\n          .button {\n            display: inline-block;\n            background-color: #1a73e8;\n            color: white;\n            text-decoration: none;\n            padding: 12px 24px;\n            border-radius: 4px;\n            font-weight: bold;\n            margin: 20px 0;\n          }\n          .footer {\n            font-size: 12px;\n            color: #666;\n            margin-top: 30px;\n            text-align: center;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <h1>Reset Your Password</h1>\n          <p>Hello,</p>\n          <p>We received a request to reset your password for your Elber account. To reset your password, please click the button below:</p>\n          \n          <a href=\"${resetLink}\" class=\"button\">Reset Password</a>\n          \n          <p>If you did not request a password reset, you can safely ignore this email.</p>\n          \n          <p>If the button above doesn't work, you can copy and paste the following link into your browser:</p>\n          <p>${resetLink}</p>\n          \n          <div class=\"footer\">\n            <p>This email was sent from Elber, your AI-powered networking assistant.</p>\n            <p>&copy; ${new Date().getFullYear()} Elber AI. All rights reserved.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const { error } = await resend.emails.send({\n      from: fromEmail,\n      to: email,\n      subject: `Reset Your Elber Password`,\n      html: htmlContent,\n    });\n    \n    if (error) {\n      console.error(`[EmailService] Error sending password reset email:`, error);\n      return { success: false, message: 'Failed to send password reset email', error };\n    }\n    \n    // Successfully sent log was removed as per previous instructions\n    return { success: true, message: 'Password reset email sent successfully' };\n  } catch (error) {\n    const catchError = error as unknown; // Ensure 'error' is typed as 'unknown'\n    console.error('[EmailService] Unexpected error sending password reset email:', catchError);\n    return { success: false, message: 'An unexpected error occurred while sending password reset email', error: catchError };\n  }\n};\n\n/**\n * Generates a verification token\n * This is a simple implementation - in production, you'd want something more secure\n */\nexport const generateVerificationToken = (): string => {\n  // Generate a simple 6-digit verification code for easier user input\n  return Math.floor(100000 + Math.random() * 900000).toString();\n}; "]}
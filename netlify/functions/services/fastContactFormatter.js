"use strict";
/**
 * Fast Contact Formatter
 * Provides immediate formatted responses without waiting for AI
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FastContactFormatter = void 0;
// Importing types that may be needed in future implementations
// import { SearchMatchType, determineMatchType } from '../types/search';
class FastContactFormatter {
    /**
     * Format contacts into a markdown response immediately
     * This provides instant feedback while AI generates a more detailed response
     */
    static formatContactsForDisplay(contacts, query) {
        const cleanQuery = query ? query.replace(/["*]/g, "").trim() : "";
        let header = ""; // Initialize header string
        let body = ""; // Initialize body string
        // Create a reference ID for tracing through logs
        const formatterId = `format-${Date.now()}`;
        if (contacts.length === 0) {
            return "No contacts found matching your search.";
        }
        // Log contacts for debugging order issues
        console.log(`[FastContactFormatter ${formatterId}] Formatting ${contacts.length} contacts for query: '${cleanQuery}'`);
        // console.log(`[FastContactFormatter ${formatterId}] First contact: ${contacts[0].first_name} ${contacts[0].last_name || ''} (${contacts[0].contact_id})`);
        // if (contacts.length > 1) {
        //   console.log(`[FastContactFormatter ${formatterId}] Second contact: ${contacts[1].first_name} ${contacts[1].last_name || ''} (${contacts[1].contact_id})`);
        // }
        // Determine the header based on the number of contacts
        if (contacts.length === 1) {
            // For a single contact, no explicit header is generated by this formatter.
            // The calling context (e.g., assistant-contacts.ts) is responsible for
            // the overall summary message like "Found 1 exact contact...".
            // This formatter will only append the contact's details.
            header = "";
        }
        else if (contacts.length > 1) {
            // For multiple contacts, create a standard header.
            header = `Found ${contacts.length} contacts${cleanQuery ? ` related to "${cleanQuery}"` : ""}:\n\n`;
        }
        // Format the body with contact details
        contacts.forEach((contact, index) => {
            body += `### ${index + 1}. ${contact.first_name} ${contact.last_name || ''}\n`;
            if (contact.email) {
                body += `- **Email**: ${contact.email}\n`;
            }
            if (contact.phone) {
                body += `- **Phone**: ${contact.phone}\n`;
            }
            if (contact.company) {
                body += `- **Company**: ${contact.company}\n`;
                if (contact.job_title) {
                    body += `- **Job Title**: ${contact.job_title}\n`;
                }
            }
            if (contact.formatted_address) {
                body += `- **Address**: ${contact.formatted_address}\n`;
            }
            else if (contact.street_address) {
                const addressParts = [];
                if (contact.street_address)
                    addressParts.push(contact.street_address);
                if (contact.street_address_2)
                    addressParts.push(contact.street_address_2);
                const cityStateZip = [];
                if (contact.city)
                    cityStateZip.push(contact.city);
                if (contact.state_province || contact.postal_code) {
                    const stateZip = [contact.state_province, contact.postal_code].filter(Boolean).join(' ');
                    if (stateZip)
                        cityStateZip.push(stateZip);
                }
                if (cityStateZip.length > 0)
                    addressParts.push(cityStateZip.join(', '));
                if (contact.country)
                    addressParts.push(contact.country);
                body += `- **Address**: ${addressParts.join('\n')}\n`;
            }
            if (contact.birthday) {
                const date = new Date(contact.birthday);
                body += `- **Birthday**: ${date.toLocaleDateString()}\n`;
            }
            if (contact.notes) {
                body += `- **Notes**: ${contact.notes}\n`;
            }
            body += '\n'; // Add a blank line after each contact
        });
        return header + body;
    }
    /**
     * Generate a quick summary for large result sets
     */
    static formatContactSummary(contacts, limit = 5) {
        const shown = contacts.slice(0, limit);
        const remaining = contacts.length - limit;
        let response = this.formatContactsForDisplay(shown);
        if (remaining > 0) {
            response += `\n... and ${remaining} more contact${remaining === 1 ? '' : 's'}.\n`;
            response += `\nPlease refine your search to see more specific results.`;
        }
        return response;
    }
}
exports.FastContactFormatter = FastContactFormatter;
//# sourceMappingURL=fastContactFormatter.js.map
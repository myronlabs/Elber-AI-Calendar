{"version":3,"file":"rateLimiter.js","sourceRoot":"","sources":["../../../src/backend/services/rateLimiter.ts"],"names":[],"mappings":"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","sourcesContent":["// src/backend/services/rateLimiter.ts\nimport { supabaseAdmin } from './supabaseAdmin';\nimport { \n  RATE_LIMIT_TIMES, \n  getProgressiveBlockDuration, \n  getProgressiveDelay,\n  shouldResetBlockCount,\n  ENDPOINT_RATE_LIMITS,\n  type RateLimitEndpoint\n} from '../utils/rateLimitConfig';\n\ninterface RateLimitConfig {\n  windowMs: number; // Time window in milliseconds\n  maxRequests: number; // Maximum number of requests allowed\n  progressiveDelay?: boolean; // Enable progressive delays for failed attempts\n  blockDuration?: number; // How long to block after max failures (ms)\n  progressiveBlocking?: boolean; // Enable progressive blocking with escalating penalties\n  maxBlocks?: number; // Maximum blocks before 24-hour ban\n}\n\ninterface RateLimitEntry {\n  identifier: string;\n  endpoint: string;\n  attempts: number;\n  first_attempt: string;\n  last_attempt: string;\n  blocked_until: string | null;\n  failed_attempts: number;\n  block_count: number; // Track how many times user has been blocked\n  last_blocked: string | null; // Track when last block occurred\n}\n\nexport class RateLimiter {\n  constructor() {\n    // No need for cleanup interval as database handles expiration\n  }\n\n  /**\n   * Check if a request is allowed based on rate limiting rules\n   */\n  async isAllowed(\n    identifier: string,\n    endpoint: string,\n    config: RateLimitConfig,\n    failed: boolean = false\n  ): Promise<{ allowed: boolean; retryAfter?: number; delay?: number }> {\n    const now = new Date();\n\n    try {\n      // Get or create rate limit entry\n      const { data: existingEntry, error: fetchError } = await supabaseAdmin\n        .from('rate_limit_attempts')\n        .select('*')\n        .eq('identifier', identifier)\n        .eq('endpoint', endpoint)\n        .single();\n\n      let entry: RateLimitEntry;\n\n      if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 = no rows found\n        console.error('Error fetching rate limit entry:', fetchError);\n        // Allow request on database error to avoid blocking users\n        return { allowed: true };\n      }\n\n      if (!existingEntry) {\n        // Create new entry\n        const { data: newEntry, error: insertError } = await supabaseAdmin\n          .from('rate_limit_attempts')\n          .insert({\n            identifier,\n            endpoint,\n            attempts: 1,\n            failed_attempts: failed ? 1 : 0\n          })\n          .select()\n          .single();\n\n        if (insertError) {\n          console.error('Error creating rate limit entry:', insertError);\n          return { allowed: true };\n        }\n\n        entry = newEntry;\n      } else {\n        entry = existingEntry;\n      }\n\n      // Check if currently blocked\n      if (entry.blocked_until) {\n        const blockedUntil = new Date(entry.blocked_until);\n        if (blockedUntil > now) {\n          return {\n            allowed: false,\n            retryAfter: Math.ceil((blockedUntil.getTime() - now.getTime()) / 1000),\n          };\n        }\n      }\n\n      // Reset window if expired\n      const firstAttempt = new Date(entry.first_attempt);\n      if (now.getTime() - firstAttempt.getTime() > config.windowMs) {\n        // Reset the entry\n        const { error: updateError } = await supabaseAdmin\n          .from('rate_limit_attempts')\n          .update({\n            attempts: 1,\n            first_attempt: now.toISOString(),\n            last_attempt: now.toISOString(),\n            failed_attempts: failed ? 1 : 0,\n            blocked_until: null\n          })\n          .eq('identifier', identifier)\n          .eq('endpoint', endpoint);\n\n        if (updateError) {\n          console.error('Error resetting rate limit entry:', updateError);\n        }\n\n        return { allowed: true };\n      }\n\n      // Track failed attempts for progressive delays/blocking\n      if (failed && (config.progressiveDelay || config.progressiveBlocking)) {\n        const newFailedAttempts = entry.failed_attempts + 1;\n\n        // Block after too many failures\n        if (newFailedAttempts >= config.maxRequests) {\n          let blockDuration = config.blockDuration || RATE_LIMIT_TIMES.BLOCK_DURATIONS.DEFAULT;\n          let newBlockCount = (entry.block_count || 0) + 1;\n\n          // Progressive blocking system using centralized config\n          if (config.progressiveBlocking) {\n            const maxBlocks = config.maxBlocks || 4;\n\n            // Reset block count using centralized helper\n            if (entry.last_blocked && shouldResetBlockCount(new Date(entry.last_blocked))) {\n              newBlockCount = 1;\n            }\n\n            // Calculate progressive block duration using centralized config\n            blockDuration = getProgressiveBlockDuration(newBlockCount);\n            \n            // Reset count for next cycle if exceeded max blocks\n            if (newBlockCount > maxBlocks) {\n              newBlockCount = 0;\n            }\n          }\n\n          const blockedUntil = new Date(now.getTime() + blockDuration);\n\n          const { error: blockError } = await supabaseAdmin\n            .from('rate_limit_attempts')\n            .update({\n              failed_attempts: newFailedAttempts,\n              blocked_until: blockedUntil.toISOString(),\n              last_attempt: now.toISOString(),\n              block_count: newBlockCount,\n              last_blocked: now.toISOString()\n            })\n            .eq('identifier', identifier)\n            .eq('endpoint', endpoint);\n\n          if (blockError) {\n            console.error('Error blocking user:', blockError);\n          }\n\n          // Log suspicious activity\n          await this.logSuspiciousActivity(identifier, endpoint, `Too many failed attempts (block #${newBlockCount})`);\n\n          return {\n            allowed: false,\n            retryAfter: Math.ceil(blockDuration / 1000),\n          };\n        }\n\n        // Update failed attempts\n        const { error: updateError } = await supabaseAdmin\n          .from('rate_limit_attempts')\n          .update({\n            failed_attempts: newFailedAttempts,\n            last_attempt: now.toISOString()\n          })\n          .eq('identifier', identifier)\n          .eq('endpoint', endpoint);\n\n        if (updateError) {\n          console.error('Error updating failed attempts:', updateError);\n        }\n      }\n\n      // Check rate limit\n      if (entry.attempts >= config.maxRequests) {\n        const windowRemaining = config.windowMs - (now.getTime() - firstAttempt.getTime());\n        return {\n          allowed: false,\n          retryAfter: Math.ceil(windowRemaining / 1000),\n        };\n      }\n\n      // Update attempts\n      const { error: updateError } = await supabaseAdmin\n        .from('rate_limit_attempts')\n        .update({\n          attempts: entry.attempts + 1,\n          last_attempt: now.toISOString()\n        })\n        .eq('identifier', identifier)\n        .eq('endpoint', endpoint);\n\n      if (updateError) {\n        console.error('Error updating attempts:', updateError);\n      }\n\n      // Calculate progressive delay using centralized config\n      let delay = 0;\n      if (config.progressiveDelay && entry.failed_attempts > 0) {\n        delay = getProgressiveDelay(entry.failed_attempts);\n      }\n\n      return {\n        allowed: true,\n        delay,\n      };\n    } catch (error) {\n      console.error('Unexpected error in rate limiter:', error);\n      // Allow request on unexpected error to avoid blocking users\n      return { allowed: true };\n    }\n  }\n\n  /**\n   * Reset rate limit for an identifier (e.g., after successful login)\n   */\n  async reset(identifier: string, endpoint: string): Promise<void> {\n    try {\n      const { error } = await supabaseAdmin\n        .from('rate_limit_attempts')\n        .delete()\n        .eq('identifier', identifier)\n        .eq('endpoint', endpoint);\n\n      if (error) {\n        console.error('Error resetting rate limit:', error);\n      }\n    } catch (error) {\n      console.error('Unexpected error resetting rate limit:', error);\n    }\n  }\n\n  /**\n   * Log suspicious activity to the database\n   */\n  private async logSuspiciousActivity(\n    identifier: string,\n    endpoint: string,\n    reason: string\n  ): Promise<void> {\n    try {\n      await supabaseAdmin\n        .from('security_logs')\n        .insert({\n          identifier,\n          endpoint,\n          reason,\n          created_at: new Date().toISOString(),\n        });\n    } catch (error) {\n      console.error('Failed to log suspicious activity:', error);\n    }\n  }\n\n  /**\n   * Clean up old entries from database\n   */\n  async cleanup(): Promise<void> {\n    try {\n      // Call the database function that cleans up old entries\n      const { error } = await supabaseAdmin\n        .rpc('cleanup_old_rate_limits');\n\n      if (error) {\n        console.error('Error cleaning up rate limits:', error);\n      }\n    } catch (error) {\n      console.error('Unexpected error during cleanup:', error);\n    }\n  }\n}\n\n// Export singleton instances for different endpoints\nexport const authRateLimiter = new RateLimiter();\n\n// Export centralized rate limit configurations\nexport const RATE_LIMITS = ENDPOINT_RATE_LIMITS;\n\n/**\n * Get rate limit configuration for a specific endpoint\n */\nexport function getRateLimitConfig(endpoint: RateLimitEndpoint): RateLimitConfig {\n  return ENDPOINT_RATE_LIMITS[endpoint];\n}"]}
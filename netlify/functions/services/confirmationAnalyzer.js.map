{"version":3,"file":"confirmationAnalyzer.js","sourceRoot":"","sources":["../../../src/backend/services/confirmationAnalyzer.ts"],"names":[],"mappings":";;;;;AAiBA,kDAuDC;AAMD,4EA0BC;AAxGD,+CAA+C;AAC/C,oDAA4B;AAG5B,+BAA+B;AAC/B,MAAM,MAAM,GAAG,IAAI,gBAAM,CAAC;IACxB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc;CACnC,CAAC,CAAC;AAEH;;;;;;;GAOG;AACI,KAAK,UAAU,mBAAmB,CACvC,WAAmB,EACnB,OAOC;IAED,IAAI,CAAC;QACH,mEAAmE;QACnE,MAAM,YAAY,GAAG;;;mCAGU,OAAO,CAAC,UAAU,UAAU,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,kBAAkB,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,EAAE;;;;;;;;;0EAS1E,CAAC;QAEvE,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpD,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,cAAc;YACjD,QAAQ,EAAE;gBACR;oBACE,IAAI,EAAE,QAAQ;oBACd,OAAO,EAAE,YAAY;iBACtB;gBACD;oBACE,IAAI,EAAE,MAAM;oBACZ,OAAO,EAAE,WAAW;iBACrB;aACF;YACD,WAAW,EAAE,GAAG;YAChB,UAAU,EAAE,EAAE;SACf,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3E,OAAO,CAAC,GAAG,CAAC,mDAAmD,MAAM,mBAAmB,WAAW,GAAG,CAAC,CAAC;QAExG,IAAI,MAAM,KAAK,WAAW;YAAE,OAAO,WAAW,CAAC;QAC/C,IAAI,MAAM,KAAK,QAAQ;YAAE,OAAO,QAAQ,CAAC;QACzC,OAAO,WAAW,CAAC;IACrB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,+CAA+C;QAC/C,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;QAC9E,OAAO,CAAC,KAAK,CAAC,8DAA8D,YAAY,EAAE,CAAC,CAAC;QAC5F,OAAO,WAAW,CAAC,CAAC,gCAAgC;IACtD,CAAC;AACH,CAAC;AAED;;;GAGG;AACH,SAAgB,gCAAgC,CAC9C,SAAiB,EACjB,WAAsC;IAStC,kEAAkE;IAClE,MAAM,QAAQ,GAAG,WAAW,IAAI,WAAW,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;IAEvE,OAAO;QACL,EAAE,EAAE,kBAAkB,IAAI,CAAC,GAAG,EAAE,EAAE;QAClC,IAAI,EAAE,UAAU;QAChB,QAAQ,EAAE;YACR,IAAI,EAAE,wBAAwB;YAC9B,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC;gBACxB,UAAU,EAAE,SAAS;gBACrB,OAAO,EAAE,IAAI;gBACb,YAAY,EAAE,QAAQ;aACvB,CAAC;SACH;KACF,CAAC;AACJ,CAAC","sourcesContent":["// src/backend/services/confirmationAnalyzer.ts\nimport OpenAI from \"openai\";\nimport { ConfirmationStatus } from \"../functions/_shared/types\";\n\n// Initialize the OpenAI client\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n/**\n * Uses OpenAI to analyze if a user message is a confirmation\n * This approach avoids regex patterns or hard-coded word lists\n * \n * @param userMessage The message from the user to analyze\n * @param context Context about what is being confirmed\n * @returns A typed confirmation status: 'confirmed', 'denied', or 'ambiguous'\n */\nexport async function analyzeConfirmation(\n  userMessage: string,\n  context: {\n    actionType: string;\n    itemName: string;\n    /**\n     * Optional entity type for more context-aware confirmation processing\n     */\n    entityType?: 'calendar' | 'contact';\n  }\n): Promise<ConfirmationStatus> {\n  try {\n    // Enhanced system prompt for better natural language understanding\n    const systemPrompt = `You are analyzing if a user's response confirms or denies a pending action.\n\nCONTEXT:\n- The user was asked to confirm '${context.actionType}' for '${context.itemName}'${context.entityType ? ` (entity type: ${context.entityType})` : ''}.\n- The user might respond with a direct confirmation (\"yes\", \"proceed\"), a confirmation with context (\"yes delete that contact\"), or with natural language that implies confirmation or denial.\n\nNATURAL LANGUAGE UNDERSTANDING:\n- Analyze if the response explicitly or implicitly confirms the action\n- Consider phrases like \"proceed\", \"go ahead\", \"do it\", \"yes please\" as confirmation signals\n- Consider phrases that reference the action (\"delete it\", \"remove it\") as confirmation signals\n- Only return \"denied\" if there's a clear negative signal\n\nReturn ONLY 'confirmed', 'denied', or 'ambiguous' based on your analysis.`;\n\n    const response = await openai.chat.completions.create({\n      model: process.env.OPENAI_MODEL || \"gpt-4.1-mini\",\n      messages: [\n        {\n          role: \"system\",\n          content: systemPrompt\n        },\n        {\n          role: \"user\",\n          content: userMessage\n        }\n      ],\n      temperature: 0.0,\n      max_tokens: 10\n    });\n    \n    const result = response.choices[0]?.message?.content?.trim().toLowerCase();\n    console.log(`[confirmationAnalyzer] OpenAI analysis result: \"${result}\" for message: \"${userMessage}\"`);\n    \n    if (result === 'confirmed') return 'confirmed';\n    if (result === 'denied') return 'denied';\n    return 'ambiguous';\n  } catch (error) {\n    // Type-safe error handling without using 'any'\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    console.error(`[confirmationAnalyzer] Error during confirmation analysis: ${errorMessage}`);\n    return 'ambiguous'; // Default to ambiguous on error\n  }\n}\n\n/**\n * Creates a properly formatted confirm_delete_contact tool call\n * Ensures all required parameters are included\n */\nexport function createDeleteConfirmationToolCall(\n  contactId: string,\n  contactName: string | null | undefined\n): {\n  id: string;\n  type: string;\n  function: {\n    name: string;\n    arguments: string;\n  };\n} {\n  // Ensure contact_name is never undefined/null when sent to OpenAI\n  const safeName = contactName || `Contact ${contactId.substring(0, 6)}`;\n  \n  return {\n    id: `confirm_delete_${Date.now()}`,\n    type: 'function',\n    function: {\n      name: 'confirm_delete_contact',\n      arguments: JSON.stringify({\n        contact_id: contactId,\n        confirm: true,\n        contact_name: safeName\n      })\n    }\n  };\n}"]}
{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/backend/types.ts"],"names":[],"mappings":";AAAA,uBAAuB","sourcesContent":["// src/backend/types.ts\n\n/**\n * Represents an import queue item for batch processing of contacts.\n * This aligns with the import_processing_queue table structure.\n */\nexport interface ImportQueueItem {\n  id: string;\n  user_id: string;\n  provider: string; // 'google', 'csv', etc.\n  contacts_to_import: string[]; // Array of contact identifiers to import\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  created_at: string;\n  updated_at?: string;\n  completed_at?: string;\n  batch_size: number;\n  current_batch?: number;\n  total_batches?: number;\n  processed_count?: number;\n  error_details?: Record<string, unknown>;\n  import_batch_id?: string; // UUID for tracking batch imports\n}\n\n/**\n * Re-export the Contact interface from domain.ts\n *\n * @deprecated Direct import from 'src/backend/types/domain.ts' is preferred for clarity and to avoid circular dependencies.\n */\nexport type { Contact } from './types/domain';\n\n/**\n * Re-export ContactCreatePayload from the canonical location.\n *\n * @see src/backend/functions/services/types.ts\n */\nexport type { ContactCreatePayload } from './functions/services/types';\n\n/**\n * Re-export ContactUpdatePayload from the canonical location.\n *\n * @see src/backend/functions/services/types.ts\n */\nexport type { ContactUpdatePayload } from './functions/services/types';\n\n/**\n * Represents a Calendar Event.\n */\nexport interface CalendarEvent {\n  event_id: string; // Was id, changed to match schema, non-optional for retrieved events\n  user_id: string;\n  title: string;\n  description?: string | null; // Changed to allow null\n  start_time: string; // Non-optional\n  end_time: string;   // Non-optional\n  is_all_day: boolean; // Indicates if this is an all-day event\n  location?: string | null;  // Changed to allow null\n  google_event_id?: string | null; // Added from schema\n  zoom_meeting_id?: string | null; // Added from schema\n  created_at: string; // Non-optional for retrieved events\n  updated_at: string; // Non-optional for retrieved events\n  // Attendees field removed as it's not in the schema table\n}\n\n// Comments moved above the type alias for clarity\n// user_id will be inferred by the backend function.\n// created_at and updated_at are set by the database.\n// event_id is generated by the database.\n// title, start_time, end_time are required from client for creation.\n// description, location, google_event_id, zoom_meeting_id are optional.\nexport type CalendarEventCreatePayload = Omit<CalendarEvent, 'event_id' | 'user_id' | 'created_at' | 'updated_at'>;\n\n// --- Integration Types ---\n\n/**\n * Defines the supported integration providers.\n */\nexport type IntegrationProvider = 'google' | 'zoom';\n\n/**\n * Represents the structure of an integration record, storing OAuth tokens\n * and related information for services like Google or Zoom.\n * Timestamps are represented as ISO 8601 strings, consistent with Supabase responses.\n */\nexport interface Integration {\n  integration_id: string;          // UUID\n  user_id: string;                 // UUID, foreign key to profiles.id\n  provider: IntegrationProvider;\n  access_token: string;\n  refresh_token?: string | null;\n  expires_at?: string | null;       // ISO 8601 date string\n  scopes?: string[] | null;         // Array of granted OAuth scopes\n  created_at: string;              // ISO 8601 date string\n  updated_at: string;              // ISO 8601 date string\n}\n\n// --- Profile Type ---\n\n/**\n * Represents the structure of a user's profile data as stored in the\n * public.profiles table, linked to auth.users.\n */\nexport interface Profile {\n  id: string;                    // UUID, matches auth.users.id\n  updated_at: string;            // ISO 8601 timestamp, non-nullable from DB\n  first_name?: string | null;\n  last_name?: string | null;\n  avatar_url?: string | null;\n  is_custom_verified: boolean;   // Indicates if the user has verified their email via our custom flow\n}\n"]}
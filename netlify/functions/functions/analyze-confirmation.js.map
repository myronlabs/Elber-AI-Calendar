{"version":3,"file":"analyze-confirmation.js","sourceRoot":"","sources":["../../../src/backend/functions/analyze-confirmation.ts"],"names":[],"mappings":";;;AAEA,2EAAuE;AACvE,2CAAqD;AAkB9C,MAAM,OAAO,GAAY,KAAK,EAAE,KAAmB,EAAE,OAAuB,EAA4B,EAAE;IAC/G,MAAM,KAAK,GAAG,OAAO,CAAC,YAAY,IAAI,SAAS,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;IAC5D,MAAM,SAAS,GAAG,gCAAgC,KAAK,GAAG,CAAC;IAE3D,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,uBAAuB,CAAC,CAAC;IACjD,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,iBAAiB,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;IAE7D,IAAI,KAAK,CAAC,UAAU,KAAK,MAAM,EAAE,CAAC;QAChC,OAAO,CAAC,IAAI,CAAC,GAAG,SAAS,wBAAwB,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;QACrE,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC;YACvD,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,OAAO,EAAE,MAAM,EAAE;SACjE,CAAC;IACJ,CAAC;IAED,wBAAwB;IACxB,MAAM,MAAM,GAAG,IAAA,0BAAkB,EAAC,KAAK,EAAE,yBAAyB,CAAC,CAAC;IACpE,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,2DAA2D,EAAE,CAAC;YAC9F,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;SAChD,CAAC;IACJ,CAAC;IAED,qBAAqB;IACrB,IAAI,WAAuC,CAAC;IAC5C,IAAI,CAAC;QACH,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YAChB,OAAO,CAAC,IAAI,CAAC,GAAG,SAAS,2BAA2B,CAAC,CAAC;YACtD,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAC9C,CAAC;QACD,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrC,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,qCAAqC,WAAW,CAAC,OAAO,gBAAgB,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;IACzH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,qCAAqC,CAAC;QACpG,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,kCAAkC,YAAY,EAAE,CAAC,CAAC;QAC5E,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,yBAAyB,YAAY,EAAE,EAAE,CAAC;YAC1E,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;SAChD,CAAC;IACJ,CAAC;IAED,IAAI,CAAC;QACH,mBAAmB;QACnB,IAAI,CAAC,WAAW,CAAC,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;YACrH,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,6FAA6F,EAAE,CAAC;gBAChI,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;aAChD,CAAC;QACJ,CAAC;QAED,kEAAkE;QAClE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,wBAAwB,WAAW,CAAC,OAAO,iBAAiB,WAAW,CAAC,OAAO,CAAC,UAAU,cAAc,WAAW,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;QACjK,MAAM,MAAM,GAAG,MAAM,IAAA,0CAAmB,EAAC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;QAEnF,iEAAiE;QACjE,MAAM,QAAQ,GAAgC;YAC5C,MAAM;YACN,UAAU,EAAE,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;YAC5E,SAAS,EAAE,YAAY,WAAW,CAAC,OAAO,qBAAqB,MAAM,QAAQ,WAAW,CAAC,OAAO,CAAC,UAAU,OAAO,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE;SACjJ,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,qBAAqB,MAAM,EAAE,CAAC,CAAC;QAEvD,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;YAC9B,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;SAChD,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,4BAA4B,CAAC;QAC3F,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,sBAAsB,YAAY,EAAE,CAAC,CAAC;QAEhE,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,oCAAoC,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC;YAC9F,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;SAChD,CAAC;IACJ,CAAC;AACH,CAAC,CAAC;AAnFW,QAAA,OAAO,WAmFlB","sourcesContent":["// src/backend/functions/analyze-confirmation.ts\nimport type { Handler, HandlerEvent, HandlerContext, HandlerResponse } from \"@netlify/functions\";\nimport { analyzeConfirmation } from \"../services/confirmationAnalyzer\";\nimport { getUserIdFromEvent } from \"./_shared/utils\";\nimport { ConfirmationStatus } from \"./_shared/types\";\n\ninterface AnalyzeConfirmationRequest {\n  message: string;\n  context: {\n    actionType: string;\n    itemName: string;\n    entityType?: 'calendar' | 'contact';\n  };\n}\n\ninterface AnalyzeConfirmationResponse {\n  status: ConfirmationStatus;\n  confidence: number;\n  reasoning: string;\n}\n\nexport const handler: Handler = async (event: HandlerEvent, context: HandlerContext): Promise<HandlerResponse> => {\n  const reqId = context.awsRequestId || `local-${Date.now()}`;\n  const logPrefix = `[analyze-confirmation][ReqID:${reqId}]`;\n\n  console.log(`${logPrefix} Function invoked ---`);\n  console.log(`${logPrefix} HTTP Method: ${event.httpMethod}`);\n\n  if (event.httpMethod !== 'POST') {\n    console.warn(`${logPrefix} Method Not Allowed: ${event.httpMethod}`);\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ message: 'Method Not Allowed' }),\n      headers: { 'Content-Type': 'application/json', 'Allow': 'POST' },\n    };\n  }\n\n  // Verify authentication\n  const userId = getUserIdFromEvent(event, 'analyze-confirmation.ts');\n  if (!userId) {\n    return {\n      statusCode: 401,\n      body: JSON.stringify({ message: 'Authentication required. User ID could not be determined.' }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  // Parse request body\n  let requestBody: AnalyzeConfirmationRequest;\n  try {\n    if (!event.body) {\n      console.warn(`${logPrefix} Request body is missing.`);\n      throw new Error(\"Request body is missing.\");\n    }\n    requestBody = JSON.parse(event.body);\n    console.log(`${logPrefix} Analyzing confirmation message: \"${requestBody.message}\" for context:`, requestBody.context);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : \"Unknown error parsing request body.\";\n    console.error(`${logPrefix} Failed to parse request body: ${errorMessage}`);\n    return {\n      statusCode: 400,\n      body: JSON.stringify({ message: `Invalid request body: ${errorMessage}` }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  try {\n    // Validate request\n    if (!requestBody.message || !requestBody.context || !requestBody.context.actionType || !requestBody.context.itemName) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ message: 'Required parameters missing: message, context.actionType, and context.itemName are required' }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n\n    // Analyze the confirmation using the confirmationAnalyzer service\n    console.log(`${logPrefix} Analyzing message: \"${requestBody.message}\" for action \"${requestBody.context.actionType}\" on item \"${requestBody.context.itemName}\"`);\n    const status = await analyzeConfirmation(requestBody.message, requestBody.context);\n    \n    // Prepare a more detailed response with confidence and reasoning\n    const response: AnalyzeConfirmationResponse = {\n      status,\n      confidence: status === 'confirmed' ? 0.9 : (status === 'denied' ? 0.9 : 0.5),\n      reasoning: `Message \"${requestBody.message}\" was analyzed as ${status} for ${requestBody.context.actionType} of ${requestBody.context.itemName}`\n    };\n    \n    console.log(`${logPrefix} Analysis result: ${status}`);\n    \n    return {\n      statusCode: 200,\n      body: JSON.stringify(response),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred.\";\n    console.error(`${logPrefix} Error in handler: ${errorMessage}`);\n    \n    return {\n      statusCode: 500,\n      body: JSON.stringify({ message: \"An internal server error occurred.\", details: errorMessage }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n};"]}
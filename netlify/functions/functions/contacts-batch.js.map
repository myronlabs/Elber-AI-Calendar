{"version":3,"file":"contacts-batch.js","sourceRoot":"","sources":["../../../src/backend/functions/contacts-batch.ts"],"names":[],"mappings":"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","sourcesContent":["// src/backend/functions/contacts-batch-unified.ts\nimport type { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport { supabaseAdmin } from '../services';\nimport type { PostgrestError } from '@supabase/supabase-js';\nimport type { ContactCreatePayload, ContactUpdatePayload } from '../types/payloads';\nimport type { Contact } from '../types/domain';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst COMMON_HEADERS = { 'Content-Type': 'application/json' };\n\n// Unified operation types\ntype BatchOperationType = 'create' | 'update' | 'delete' | 'get' | 'bulk-import';\n\n// Error codes for all operations\nenum ErrorCode {\n  VALIDATION_ERROR = 'VALIDATION_ERROR',\n  DUPLICATE_SKIPPED = 'DUPLICATE_SKIPPED',\n  DATABASE_ERROR = 'DATABASE_ERROR',\n  UNEXPECTED_ERROR = 'UNEXPECTED_ERROR',\n  AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR',\n  BAD_REQUEST = 'BAD_REQUEST',\n}\n\n// Base operation interface\ninterface BaseBatchOperation {\n  type: BatchOperationType;\n  data?: unknown;\n}\n\n// Specific operation interfaces\ninterface CreateOperation extends BaseBatchOperation {\n  type: 'create';\n  data: ContactCreatePayload;\n}\n\ninterface UpdateOperation extends BaseBatchOperation {\n  type: 'update';\n  data: ContactUpdatePayload;\n}\n\ninterface DeleteOperation extends BaseBatchOperation {\n  type: 'delete';\n  data: { contact_id: string };\n}\n\ninterface GetOperation extends BaseBatchOperation {\n  type: 'get';\n  data: { contact_ids: string[] };\n}\n\ninterface BulkImportOperation extends BaseBatchOperation {\n  type: 'bulk-import';\n  data: {\n    contacts: ContactCreatePayload[];\n    duplicate_handling?: 'skip' | 'update' | 'create';\n    import_batch_id?: string;\n    import_source?: string;\n  };\n}\n\ntype BatchOperation = CreateOperation | UpdateOperation | DeleteOperation | GetOperation | BulkImportOperation;\n\n// Request body interfaces\ninterface StandardBatchRequest {\n  operations: Exclude<BatchOperation, BulkImportOperation>[];\n}\n\ninterface BulkImportRequest {\n  contacts: ContactCreatePayload[];\n  duplicate_handling?: 'skip' | 'update' | 'create';\n  import_batch_id?: string;\n  import_source?: string;\n}\n\ntype UnifiedBatchRequest = StandardBatchRequest | BulkImportRequest;\n\n// Error interface\ninterface BatchError {\n  code: ErrorCode;\n  message: string;\n  details?: unknown;\n  recoverable: boolean;\n  contactData?: Partial<ContactCreatePayload>;\n  index?: number;\n  batchId?: string;\n  originalCsvRowIndex?: number;\n}\n\n// Result interfaces\ninterface BatchOperationResult {\n  success: boolean;\n  data?: Contact | Contact[] | null;\n  error?: string;\n  operation: BatchOperationType;\n  index?: number;\n}\n\ninterface StandardBatchResponse {\n  results: BatchOperationResult[];\n  statistics: {\n    total: number;\n    successful: number;\n    failed: number;\n  };\n}\n\ninterface BulkImportResponse {\n  successful: ContactCreatePayload[];\n  failed: BatchError[];\n}\n\n// type UnifiedBatchResponse = StandardBatchResponse | BulkImportResponse;\n\n// Helper function to get authenticated user ID with both auth methods\nconst getAuthenticatedUserId = async (event: HandlerEvent, context?: HandlerContext): Promise<string | null> => {\n  // Try clientContext first (Netlify Identity)\n  if (context?.clientContext?.user?.sub) {\n    return context.clientContext.user.sub;\n  }\n\n  // Try Authorization header (Supabase token)\n  const authHeader = event.headers.authorization || event.headers.Authorization;\n  if (!authHeader) return null;\n\n  if (authHeader.startsWith('Bearer ')) {\n    try {\n      // Try Supabase token first\n      const token = authHeader.replace('Bearer ', '');\n      const { data: { user }, error } = await supabaseAdmin.auth.getUser(token);\n      if (!error && user) return user.id;\n\n      // Fallback to JWT parsing for other tokens\n      const parts = token.split('.');\n      if (parts.length === 3) {\n        const payloadBase64 = parts[1];\n        const payloadJson = Buffer.from(payloadBase64, 'base64url').toString('utf8');\n        const payload = JSON.parse(payloadJson);\n        return payload.sub || null;\n      }\n    } catch (error) {\n      console.error(\"[authHelper] Error parsing token:\", error);\n    }\n  }\n\n  return null;\n};\n\n// Contact validation function\nconst validateContact = (contact: ContactCreatePayload): { isValid: boolean; errors: string[] } => {\n  const errors: string[] = [];\n  \n  if (!contact.first_name && !contact.last_name) {\n    errors.push('Contact must have at least a first name or last name');\n  }\n  \n  if (contact.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(contact.email)) {\n    errors.push('Invalid email format');\n  }\n  \n  if (contact.phone && !/^[+]?[\\d\\s()-]{7,}$/.test(contact.phone)) {\n    errors.push('Invalid phone format');\n  }\n  \n  if (contact.birthday && !/^\\d{4}-\\d{2}-\\d{2}$/.test(contact.birthday)) {\n    errors.push('Invalid birthday format (should be YYYY-MM-DD)');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n// Helper function to check if database error is recoverable\nconst isRecoverableDBError = (error: PostgrestError): boolean => {\n  return error.code === 'PGRST116' || error.code === '23505' || error.message.includes('timeout');\n};\n\n// Duplicate detection function\nconst findDuplicateContact = async (\n  contact: ContactCreatePayload,\n  userId: string\n): Promise<Contact | null> => {\n  // Tier 1: Exact email match\n  if (contact.email) {\n    const emailMatch = await supabaseAdmin\n      .from('contacts')\n      .select('*')\n      .eq('user_id', userId)\n      .ilike('email', contact.email)\n      .maybeSingle();\n      \n    if (emailMatch.data) {\n      return emailMatch.data as Contact;\n    }\n  }\n  \n  // Tier 2: Phone number match\n  if (contact.phone) {\n    const normalizedPhone = contact.phone.replace(/[^0-9+]/g, '');\n    const phoneMatches = await supabaseAdmin\n      .from('contacts')\n      .select('*')\n      .eq('user_id', userId)\n      .not('phone', 'is', null);\n      \n    const phoneMatch = phoneMatches.data?.find(c => {\n      if (!c.phone) return false;\n      return c.phone.replace(/[^0-9+]/g, '') === normalizedPhone;\n    });\n    \n    if (phoneMatch) {\n      return phoneMatch as Contact;\n    }\n  }\n  \n  // Tier 3: Name + Company match\n  if ((contact.first_name || contact.last_name) && contact.company) {\n    const nameCompanyMatches = await supabaseAdmin\n      .from('contacts')\n      .select('*')\n      .eq('user_id', userId)\n      .eq('company', contact.company);\n      \n    const nameMatch = nameCompanyMatches.data?.find(c => {\n      const firstNameMatch = !contact.first_name || \n        (c.first_name && c.first_name.toLowerCase() === contact.first_name.toLowerCase());\n        \n      const lastNameMatch = !contact.last_name || \n        (c.last_name && c.last_name.toLowerCase() === contact.last_name.toLowerCase());\n        \n      return firstNameMatch && lastNameMatch;\n    });\n    \n    if (nameMatch) {\n      return nameMatch as Contact;\n    }\n  }\n  \n  return null;\n};\n\n// Retry mechanism with exponential backoff\nconst retryWithBackoff = async <T>(\n  fn: () => Promise<T>,\n  retries: number = 5,\n  initialDelay: number = 1000,\n  factor: number = 2\n): Promise<T> => {\n  let attempt = 0;\n  let delay = initialDelay;\n  \n  while (true) {\n    try {\n      return await fn();\n    } catch (error) {\n      if (!(error instanceof Error)) {\n        throw error;\n      }\n      \n      const isRateLimitError =\n        error.message.includes('rate limit') ||\n        error.message.includes('quota exceeded') ||\n        (error instanceof Error && 'status' in error && error.status === 429);\n        \n      attempt++;\n      \n      if (attempt >= retries || !isRateLimitError) {\n        throw error;\n      }\n      \n      const jitter = Math.random() * 0.3 + 0.85;\n      const waitTime = Math.min(delay * jitter, 60000);\n      \n      console.log(`Rate limit hit, retrying in ${Math.round(waitTime)}ms (attempt ${attempt}/${retries})`);\n      await new Promise(resolve => setTimeout(resolve, waitTime));\n      \n      delay *= factor;\n    }\n  }\n};\n\n// Process standard batch operations\nconst processStandardBatchOperations = async (\n  operations: Exclude<BatchOperation, BulkImportOperation>[],\n  userId: string\n): Promise<StandardBatchResponse> => {\n  const results = await Promise.allSettled(\n    operations.map(async (operation, index) => {\n      try {\n        let result;\n        \n        switch (operation.type) {\n          case 'create': {\n            const data = operation.data;\n            const { data: contact, error } = await supabaseAdmin\n              .from('contacts')\n              .insert({ ...data, user_id: userId })\n              .select()\n              .single();\n            \n            if (error) throw error;\n            result = contact;\n            break;\n          }\n          \n          case 'update': {\n            const data = operation.data;\n            const { contact_id, ...updateData } = data;\n            \n            const { data: contact, error } = await supabaseAdmin\n              .from('contacts')\n              .update(updateData)\n              .match({ contact_id, user_id: userId })\n              .select()\n              .single();\n            \n            if (error) throw error;\n            result = contact;\n            break;\n          }\n          \n          case 'delete': {\n            const data = operation.data;\n            const { error } = await supabaseAdmin\n              .from('contacts')\n              .delete()\n              .match({ contact_id: data.contact_id, user_id: userId });\n            \n            if (error) throw error;\n            result = null;\n            break;\n          }\n          \n          case 'get': {\n            const data = operation.data;\n            const { data: contacts, error } = await supabaseAdmin\n              .from('contacts')\n              .select('*')\n              .eq('user_id', userId)\n              .in('contact_id', data.contact_ids);\n            \n            if (error) throw error;\n            result = contacts;\n            break;\n          }\n          \n          default:\n            throw new Error(`Unknown operation type: ${(operation as { type: string }).type}`);\n        }\n        \n        return {\n          success: true,\n          data: result,\n          operation: operation.type as BatchOperationType,\n          index\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error',\n          operation: operation.type as BatchOperationType,\n          index\n        };\n      }\n    })\n  );\n\n  const processedResults = results.map((result) => {\n    if (result.status === 'fulfilled') {\n      return result.value;\n    } else {\n      return {\n        success: false,\n        error: result.reason?.message || 'Unknown error',\n        operation: 'unknown' as BatchOperationType,\n        index: -1\n      };\n    }\n  });\n\n  return {\n    results: processedResults,\n    statistics: {\n      total: processedResults.length,\n      successful: processedResults.filter(r => r.success).length,\n      failed: processedResults.filter(r => !r.success).length\n    }\n  };\n};\n\n// Process bulk import operations\nconst processBulkImport = async (\n  contacts: ContactCreatePayload[],\n  userId: string,\n  batchId: string,\n  duplicateHandling: 'skip' | 'update' | 'create' = 'skip',\n  importSource: string = 'csv'\n): Promise<BulkImportResponse> => {\n  const results = {\n    successful: [] as ContactCreatePayload[],\n    failed: [] as BatchError[]\n  };\n\n  // Create import history record\n  const { data: importHistoryRecord, error: importHistoryError } = await supabaseAdmin\n    .from('import_history')\n    .insert([{\n      user_id: userId,\n      source: importSource,\n      total_contacts: contacts.length,\n      successful_imports: 0,\n      failed_imports: 0,\n      status: 'processing',\n      created_at: new Date().toISOString()\n    }])\n    .select()\n    .single();\n    \n  if (importHistoryError) {\n    console.error('Failed to create import history record:', importHistoryError);\n  }\n\n  // Process each contact\n  for (let i = 0; i < contacts.length; i++) {\n    const contact = contacts[i];\n\n    try {\n      // Validate contact data\n      const validationResult = validateContact(contact);\n      if (!validationResult.isValid) {\n        results.failed.push({\n          code: ErrorCode.VALIDATION_ERROR,\n          message: `Validation failed: ${validationResult.errors.join(', ')}`,\n          details: validationResult.errors,\n          recoverable: true,\n          contactData: contact,\n          index: i,\n          batchId\n        });\n        continue;\n      }\n\n      // Check for duplicates\n      const duplicate = await findDuplicateContact(contact, userId);\n      if (duplicate) {\n        if (duplicateHandling === 'skip') {\n          results.failed.push({\n            code: ErrorCode.DUPLICATE_SKIPPED,\n            message: `Contact with ${contact.email ? `email ${contact.email}` : 'similar information'} already exists`,\n            recoverable: false,\n            contactData: contact,\n            index: i,\n            batchId\n          });\n          continue;\n        } else if (duplicateHandling === 'update') {\n          const { error: updateError } = await supabaseAdmin\n            .from('contacts')\n            .update({\n              ...contact,\n              updated_at: new Date().toISOString(),\n              import_batch_id: batchId,\n              import_source: importSource,\n              imported_at: new Date().toISOString()\n            })\n            .eq('contact_id', duplicate.contact_id);\n            \n          if (updateError) {\n            results.failed.push({\n              code: ErrorCode.DATABASE_ERROR,\n              message: updateError.message,\n              details: updateError,\n              recoverable: isRecoverableDBError(updateError),\n              contactData: contact,\n              index: i,\n              batchId\n            });\n          } else {\n            results.successful.push(contact);\n          }\n          continue;\n        }\n      }\n\n      // Create contact\n      const { data, error } = await supabaseAdmin\n        .from('contacts')\n        .insert([{\n          ...contact,\n          user_id: userId,\n          import_batch_id: batchId,\n          import_source: importSource,\n          imported_at: new Date().toISOString()\n        }])\n        .select();\n\n      if (error) {\n        results.failed.push({\n          code: ErrorCode.DATABASE_ERROR,\n          message: error.message,\n          details: error,\n          recoverable: isRecoverableDBError(error),\n          contactData: contact,\n          index: i,\n          batchId\n        });\n      } else if (data && data.length > 0) {\n        results.successful.push(contact);\n      }\n    } catch (error) {\n      results.failed.push({\n        code: ErrorCode.UNEXPECTED_ERROR,\n        message: error instanceof Error ? error.message : 'Unknown error',\n        details: error,\n        recoverable: false,\n        contactData: contact,\n        index: i,\n        batchId\n      });\n    }\n  }\n\n  // Update import history record\n  if (importHistoryRecord) {\n    await supabaseAdmin\n      .from('import_history')\n      .update({\n        successful_imports: results.successful.length,\n        failed_imports: results.failed.length,\n        status: results.failed.length === contacts.length ? 'failed' : \n                results.successful.length === contacts.length ? 'completed' : 'partial',\n        error_details: results.failed.length > 0 ? results.failed : null,\n        completed_at: new Date().toISOString()\n      })\n      .eq('id', importHistoryRecord.id);\n  }\n\n  return results;\n};\n\n// Request type detection\nconst isBulkImportRequest = (body: UnifiedBatchRequest): body is BulkImportRequest => {\n  return 'contacts' in body && Array.isArray(body.contacts);\n};\n\n// Main handler\nconst handler: Handler = async (event: HandlerEvent, context: HandlerContext) => {\n  const { httpMethod, body: eventBodyString } = event;\n  const logPrefix = `[contacts-batch-unified:${httpMethod}]`;\n\n  if (httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ message: `Method ${httpMethod} Not Allowed` }),\n      headers: { ...COMMON_HEADERS, 'Allow': 'POST' },\n    };\n  }\n\n  // Authentication\n  const userId = await getAuthenticatedUserId(event, context);\n  if (!userId) {\n    return {\n      statusCode: 401,\n      body: JSON.stringify({ message: \"Authentication required.\" }),\n      headers: COMMON_HEADERS,\n    };\n  }\n\n  try {\n    // Parse request body\n    if (!eventBodyString) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ message: \"Request body is missing.\" }),\n        headers: COMMON_HEADERS,\n      };\n    }\n\n    const requestBody: UnifiedBatchRequest = JSON.parse(eventBodyString);\n\n    // Route to appropriate handler based on request structure\n    if (isBulkImportRequest(requestBody)) {\n      // Handle bulk import\n      const { contacts, import_batch_id = uuidv4(), duplicate_handling = 'skip', import_source = 'csv' } = requestBody;\n\n      if (!Array.isArray(contacts) || contacts.length === 0) {\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ message: \"The 'contacts' field must be a non-empty array.\" }),\n          headers: COMMON_HEADERS,\n        };\n      }\n\n      const results = await retryWithBackoff(() => \n        processBulkImport(\n          contacts, \n          userId, \n          import_batch_id,\n          duplicate_handling,\n          import_source\n        )\n      );\n\n      return {\n        statusCode: 200,\n        body: JSON.stringify(results),\n        headers: COMMON_HEADERS,\n      };\n    } else {\n      // Handle standard batch operations\n      const { operations } = requestBody;\n\n      if (!operations || !Array.isArray(operations) || operations.length === 0) {\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ message: 'Operations array is required' }),\n          headers: COMMON_HEADERS,\n        };\n      }\n\n      const results = await processStandardBatchOperations(operations, userId);\n\n      return {\n        statusCode: 200,\n        body: JSON.stringify(results),\n        headers: COMMON_HEADERS,\n      };\n    }\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    console.error(`${logPrefix} Unhandled error:`, error);\n    \n    return {\n      statusCode: 500,\n      body: JSON.stringify({ message: `An unexpected error occurred: ${errorMessage}` }),\n      headers: COMMON_HEADERS,\n    };\n  }\n};\n\nexport { handler };"]}
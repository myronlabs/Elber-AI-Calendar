{"version":3,"file":"google-calendar.js","sourceRoot":"","sources":["../../../src/backend/functions/google-calendar.ts"],"names":[],"mappings":"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","sourcesContent":["import { Handler, HandlerEvent, HandlerContext } from '@netlify/functions';\nimport { google, calendar_v3 } from 'googleapis';\nimport { supabaseAdmin, oauthConfigService } from '../services';\nimport { getUserIdFromEvent } from './_shared/utils';\n\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext) => {\n  console.log('[google-calendar] Handler called:', event.path, event.httpMethod);\n\n  // CORS headers\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS'\n  };\n\n  // Handle preflight\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204,\n      headers: corsHeaders,\n      body: ''\n    };\n  }\n\n  try {\n    // Get user ID from auth token\n    const userId = getUserIdFromEvent(event);\n    if (!userId) {\n      return {\n        statusCode: 401,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        body: JSON.stringify({ error: 'Unauthorized' })\n      };\n    }\n\n    // Get Google OAuth tokens for user\n    console.log(`[google-calendar] Looking up OAuth token for user: ${userId}`);\n    \n    const { data: tokenData, error: fetchError } = await supabaseAdmin\n      .from('oauth_connections')\n      .select('*')\n      .eq('user_id', userId)\n      .eq('provider', 'google')\n      .maybeSingle();\n\n    if (fetchError) {\n      console.error(`[google-calendar] Error fetching OAuth token for user ${userId}:`, fetchError);\n      return {\n        statusCode: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          error: 'Failed to fetch OAuth connection',\n          message: fetchError.message\n        })\n      };\n    }\n\n    if (!tokenData || !tokenData.access_token) {\n      console.log(`[google-calendar] No Google OAuth token found for user ${userId}`);\n      return {\n        statusCode: 401,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          error: 'Google Calendar not connected',\n          message: 'Please connect your Google Calendar first'\n        })\n      };\n    }\n\n    // Get OAuth config\n    const googleConfig = oauthConfigService.getGoogleConfig();\n\n    // Check if token is expired and refresh if needed\n    if (tokenData.expires_at && new Date(tokenData.expires_at) < new Date()) {\n      console.log(`[google-calendar] Token is expired for user ${userId}, attempting to refresh`);\n\n      if (!tokenData.refresh_token) {\n        console.log(`[google-calendar] No refresh token available for user ${userId}, need to reauthenticate`);\n        return {\n          statusCode: 401,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            error: 'Google Calendar authorization expired',\n            message: 'Please reconnect your Google Calendar'\n          })\n        };\n      }\n\n      try {\n        const oauth2Client = new google.auth.OAuth2(\n          googleConfig.clientId,\n          googleConfig.clientSecret,\n          googleConfig.redirectUri\n        );\n\n        oauth2Client.setCredentials({\n          refresh_token: tokenData.refresh_token\n        });\n\n        const { credentials } = await oauth2Client.refreshAccessToken();\n        console.log(`[google-calendar] Successfully refreshed token for user ${userId}`);\n\n        await supabaseAdmin\n          .from('oauth_connections')\n          .update({\n            access_token: credentials.access_token,\n            expires_at: credentials.expiry_date ? new Date(credentials.expiry_date).toISOString() : null,\n            updated_at: new Date().toISOString()\n          })\n          .eq('id', tokenData.id);\n\n        tokenData.access_token = credentials.access_token || tokenData.access_token;\n        tokenData.expires_at = credentials.expiry_date ? new Date(credentials.expiry_date).toISOString() : null;\n      } catch (error) {\n        console.error(`[google-calendar] Error refreshing token for user ${userId}:`, error);\n        return {\n          statusCode: 401,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            error: 'Failed to refresh Google Calendar authorization',\n            message: 'Please reconnect your Google Calendar'\n          })\n        };\n      }\n    }\n\n    // Create OAuth2 client with user's tokens\n    const oauth2Client = new google.auth.OAuth2(\n      googleConfig.clientId,\n      googleConfig.clientSecret,\n      googleConfig.redirectUri\n    );\n\n    oauth2Client.setCredentials({\n      access_token: tokenData.access_token,\n      refresh_token: tokenData.refresh_token,\n      expiry_date: tokenData.expires_at ? new Date(tokenData.expires_at).getTime() : undefined\n    });\n\n    // Create calendar client\n    const calendar = google.calendar({ version: 'v3', auth: oauth2Client });\n\n    // Parse the path to determine the action\n    const pathParts = event.path.split('/').filter(p => p);\n    const action = pathParts[pathParts.length - 1];\n\n    console.log('[google-calendar] Action:', action);\n\n    // Handle different endpoints\n    switch (action) {\n      case 'events': {\n        if (event.httpMethod === 'GET') {\n          // Fetch events from Google Calendar\n          try {\n            const response = await calendar.events.list({\n              calendarId: 'primary',\n              timeMin: new Date().toISOString(),\n              maxResults: 50,\n              singleEvents: true,\n              orderBy: 'startTime'\n            });\n\n            const events = response.data.items || [];\n            \n            return {\n              statusCode: 200,\n              headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                success: true,\n                events: events.map(event => ({\n                  id: event.id,\n                  summary: event.summary || 'Untitled Event',\n                  description: event.description,\n                  location: event.location,\n                  start: event.start,\n                  end: event.end,\n                  status: event.status,\n                  htmlLink: event.htmlLink,\n                  created: event.created,\n                  updated: event.updated,\n                  reminders: event.reminders,\n                  attendees: event.attendees\n                }))\n              })\n            };\n          } catch (error) {\n            console.error('[google-calendar] Error fetching events:', error);\n            return {\n              statusCode: 500,\n              headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                success: false,\n                error: 'Failed to fetch Google Calendar events',\n                message: error instanceof Error ? error.message : 'Unknown error'\n              })\n            };\n          }\n        }\n        break;\n      }\n\n      case 'update': {\n        if (event.httpMethod === 'PUT' || event.httpMethod === 'PATCH') {\n          // Update a Google Calendar event\n          const body = JSON.parse(event.body || '{}');\n          const { eventId, updates } = body;\n\n          if (!eventId) {\n            return {\n              statusCode: 400,\n              headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n              body: JSON.stringify({ error: 'Event ID is required' })\n            };\n          }\n\n          try {\n            // First get the existing event\n            const existingEvent = await calendar.events.get({\n              calendarId: 'primary',\n              eventId: eventId\n            });\n\n            // Merge updates\n            const updatedEvent: calendar_v3.Schema$Event = {\n              ...existingEvent.data,\n              ...updates\n            };\n\n            // Update the event\n            const response = await calendar.events.update({\n              calendarId: 'primary',\n              eventId: eventId,\n              requestBody: updatedEvent\n            });\n\n            return {\n              statusCode: 200,\n              headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                success: true,\n                event: response.data,\n                message: 'Event updated successfully'\n              })\n            };\n          } catch (error) {\n            console.error('[google-calendar] Error updating event:', error);\n            return {\n              statusCode: 500,\n              headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                success: false,\n                error: 'Failed to update Google Calendar event',\n                message: error instanceof Error ? error.message : 'Unknown error'\n              })\n            };\n          }\n        }\n        break;\n      }\n\n      case 'disconnect': {\n        if (event.httpMethod === 'POST') {\n          // Disconnect Google Calendar by removing tokens\n          try {\n            console.log(`[google-calendar] Clearing OAuth connection for user ${userId}`);\n            \n            const { error: deleteError } = await supabaseAdmin\n              .from('oauth_connections')\n              .delete()\n              .eq('user_id', userId)\n              .eq('provider', 'google');\n            \n            if (deleteError) {\n              throw deleteError;\n            }\n            \n            return {\n              statusCode: 200,\n              headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                success: true,\n                message: 'Google Calendar disconnected successfully'\n              })\n            };\n          } catch (error) {\n            console.error('[google-calendar] Error disconnecting:', error);\n            return {\n              statusCode: 500,\n              headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                success: false,\n                error: 'Failed to disconnect Google Calendar',\n                message: error instanceof Error ? error.message : 'Unknown error'\n              })\n            };\n          }\n        }\n        break;\n      }\n\n      default:\n        return {\n          statusCode: 404,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n          body: JSON.stringify({ error: 'Endpoint not found' })\n        };\n    }\n\n    // Method not allowed for the endpoint\n    return {\n      statusCode: 405,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      body: JSON.stringify({ error: 'Method not allowed' })\n    };\n\n  } catch (error) {\n    console.error('[google-calendar] Unexpected error:', error);\n    return {\n      statusCode: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        error: 'Internal server error',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      })\n    };\n  }\n};\n\nexport { handler }; "]}
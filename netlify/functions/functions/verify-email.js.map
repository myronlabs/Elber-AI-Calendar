{"version":3,"file":"verify-email.js","sourceRoot":"","sources":["../../../src/backend/functions/verify-email.ts"],"names":[],"mappings":"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","sourcesContent":["import { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport { supabaseAdmin } from '../services';\n\ninterface VerifyEmailRequestBody {\n  userId?: string;\n  token?: string;\n}\n\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext) => {\n  const requestId = `verify-email-${Date.now()}-${Math.floor(Math.random() * 10000)}`;\n  console.log(`[verify-email] Request ${requestId}: FUNCTION INVOKED - Method: ${event.httpMethod}`);\n\n  if (event.httpMethod !== \"POST\") {\n    console.log(`[verify-email] Request ${requestId}: Method not allowed: ${event.httpMethod}`);\n    return {\n      statusCode: 405,\n      body: JSON.stringify({\n        message: \"Method Not Allowed\",\n        toast: { type: \"error\", message: \"Invalid request method\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  let requestBody: VerifyEmailRequestBody;\n  try {\n    if (!event.body) {\n      console.error(`[verify-email] Request ${requestId}: Error - Request body is missing.`);\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          message: \"Request body is missing.\",\n          toast: { type: \"error\", message: \"Missing request data\" }\n        }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n    requestBody = JSON.parse(event.body) as VerifyEmailRequestBody;\n    console.log(`[verify-email] Request ${requestId}: Request body parsed with userId: ${!!requestBody.userId}`); // Log safely\n  } catch (error) {\n    console.error(`[verify-email] Request ${requestId}: Error - Failed to parse request body.`, error);\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        message: \"Invalid request body. Failed to parse JSON.\",\n        toast: { type: \"error\", message: \"Invalid request format\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  const { userId, token } = requestBody;\n\n  if (!userId) {\n    console.error(`[verify-email] Request ${requestId}: Error - Missing userId.`);\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        message: \"Missing required field: userId is required.\",\n        toast: { type: \"error\", message: \"User ID is required\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  // Validate UUID format\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  if (!uuidRegex.test(userId)) {\n    console.error(`[verify-email] Request ${requestId}: Error - Invalid UUID format: \"${userId}\"`);\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        message: \"Invalid user ID format. Must be a valid UUID.\",\n        toast: { type: \"error\", message: \"Invalid user ID format\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  try {\n    // Handle special case: automatic verification during password reset\n    const isAutoVerification = token === 'AUTO_VERIFY_ON_PASSWORD_RESET';\n    let verificationData = null;\n    let verificationError = null;\n\n    if (isAutoVerification) {\n      console.log(`[verify-email] Request ${requestId}: AUTO_VERIFY_ON_PASSWORD_RESET token detected for user: ${userId}`);\n\n      // Check if user exists in the profiles table\n      const { data: userExists, error: userError } = await supabaseAdmin\n        .from('profiles')\n        .select('id')\n        .eq('id', userId)\n        .single();\n\n      if (userError || !userExists) {\n        console.error(`[verify-email] Request ${requestId}: Error - User does not exist or error checking user:`, userError);\n        verificationError = new Error('User does not exist');\n      } else {\n        // User exists, proceed with verification\n        verificationData = { user_id: userId };\n      }\n    } else if (!token) {\n      console.error(`[verify-email] Request ${requestId}: Error - Missing token for standard verification.`);\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          message: \"Missing required field: token is required for standard verification.\",\n          toast: { type: \"error\", message: \"Verification code is required\" }\n        }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    } else {\n      // Standard verification with a code from the database\n      const result = await supabaseAdmin\n        .from('verification_codes')\n        .select('user_id') // Select any column to confirm existence\n        .eq('user_id', userId)\n        .eq('code', token)\n        .single();\n\n      verificationData = result.data;\n      verificationError = result.error;\n    }\n\n    if (verificationError || !verificationData) {\n      console.error(`[verify-email] Request ${requestId}: Error - Invalid or expired verification code.`, verificationError);\n\n      // Check if user is already verified as a fallback\n      const { data: profileData } = await supabaseAdmin\n        .from('profiles')\n        .select('is_custom_verified')\n        .eq('id', userId)\n        .single();\n\n      // If user is already verified, we can proceed and update the email confirmation\n      if (profileData?.is_custom_verified) {\n        console.log(`[verify-email] Request ${requestId}: User ${userId} is already custom verified. Proceeding with email confirmation...`);\n      } else {\n        // If not verified, return an error response\n        return {\n          statusCode: 400,\n          body: JSON.stringify({\n            message: \"Verification failed. Invalid or expired verification code.\",\n            toast: { type: \"error\", message: \"Invalid or expired verification code\" }\n          }),\n          headers: { 'Content-Type': 'application/json' },\n        };\n      }\n    }\n\n    // Verification code is valid, update the user's profile\n    console.log(`[verify-email] Request ${requestId}: Valid verification code found for user: ${userId}. Updating profile.`);\n    const { error: profileUpdateError } = await supabaseAdmin\n      .from('profiles')\n      .update({ is_custom_verified: true, updated_at: new Date().toISOString() })\n      .eq('id', userId);\n\n    if (profileUpdateError) {\n      console.error(`[verify-email] Request ${requestId}: Error updating profile for user ${userId}:`, profileUpdateError);\n      return {\n        statusCode: 500,\n        body: JSON.stringify({\n          message: \"Server error while updating verification status.\",\n          toast: { type: \"error\", message: \"Server error during verification\" }\n        }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n\n    // Now, also confirm the email in Supabase's auth.users table\n    console.log(`[verify-email] Request ${requestId}: Attempting to set email_confirmed_at for user: ${userId} in Supabase auth.users.`);\n    const { error: updateUserError } = await supabaseAdmin.auth.admin.updateUserById(\n      userId,\n      { email_confirm: true } // This tells Supabase to set email_confirmed_at\n    );\n\n    if (updateUserError) {\n      console.error(`[verify-email] Request ${requestId}: Supabase email_confirm: true error for user ${userId}:`, updateUserError);\n      // This is a critical error, as the user won't be fully confirmed in Supabase's eyes.\n      return { \n        statusCode: 500,\n        body: JSON.stringify({\n          message: \"Verification succeeded locally, but failed to update master email confirmation status.\",\n          toast: { type: \"error\", message: \"Error finalizing email verification with provider.\" }\n        }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n    console.log(`[verify-email] Request ${requestId}: Supabase email_confirmed_at successfully set for user: ${userId}`);\n\n    // Delete the verification code from our database as it's now used\n    // But only if we found it initially\n    if (verificationData) {\n      const { error: deleteCodeError } = await supabaseAdmin\n        .from('verification_codes')\n        .delete()\n        .eq('user_id', userId)\n        .eq('code', token);\n\n      if (deleteCodeError) {\n        // Log the error but don't fail the verification if the profile was updated\n        console.warn(`[verify-email] Request ${requestId}: Failed to delete verification code for user ${userId}:`, deleteCodeError);\n      }\n    } else {\n      console.log(`[verify-email] Request ${requestId}: No verification code found to delete for user ${userId} with code ${token}`);\n    }\n\n    console.log(`[verify-email] Request ${requestId}: Custom email verification successful for user: ${userId}`);\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        message: \"Email verified successfully! You can now log in.\",\n        toast: { type: \"success\", message: \"Email verified! You can now log in.\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n\n  } catch (error: unknown) {\n    const typedError = error instanceof Error ? error : new Error(String(error));\n    console.error(`[verify-email] Request ${requestId}: Unexpected error in handler:`, typedError.message, typedError.stack);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: \"An unexpected server error occurred.\",\n        toast: { type: \"error\", message: \"Server error during verification\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n};\n\nexport { handler }; "]}
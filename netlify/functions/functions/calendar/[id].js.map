{"version":3,"file":"[id].js","sourceRoot":"","sources":["../../../../src/backend/functions/calendar/[id].ts"],"names":[],"mappings":"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","sourcesContent":["import { Handler, HandlerContext, HandlerResponse } from \"@netlify/functions\";\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { parseISO } from 'date-fns';\n\n// Import shared types and utilities\nimport { HandlerEvent, RecurringCalendarEvent, RawEventUpdatePayload } from '../_shared/calendarTypes';\nimport { \n    corsHeaders, \n    getUserIdFromEvent, \n    createClientWithAuth, \n    isValidUUID,\n    generateRecurringEventOccurrences // For GET /:id with expand_recurring\n} from '../_shared/calendarUtils';\n\n// Main handler for /api/calendar/:id (get by ID, update, delete)\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext): Promise<HandlerResponse> => {\n  if (event.httpMethod === 'OPTIONS') {\n    return { statusCode: 204, headers: corsHeaders, body: '' };\n  }\n\n  const userId = getUserIdFromEvent(event);\n  if (!userId) {\n    return { statusCode: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' }, body: JSON.stringify({ message: 'Unauthorized: Invalid or missing token' }) };\n  }\n\n  const requestEventId = event.pathParameters?.id;\n  if (!requestEventId) {\n    // This should ideally not happen if Netlify routes correctly to [id].ts\n    console.error('[calendar/[id].ts] Event ID missing in path parameters.');\n    return { statusCode: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' }, body: JSON.stringify({ message: 'Bad Request: Event ID is required in the path.' }) };\n  }\n\n  if (!isValidUUID(requestEventId)) {\n    return { statusCode: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' }, body: JSON.stringify({ message: 'Bad Request: Invalid Event ID format.' }) };\n  }\n\n  const responseHeaders = { ...corsHeaders, 'Content-Type': 'application/json' };\n  let supabaseClient: SupabaseClient;\n  try {\n    const jwt = event.headers?.authorization?.substring(7);\n    if (!jwt) throw new Error('JWT not found for creating authed Supabase client');\n    supabaseClient = createClientWithAuth(jwt);\n  } catch (error) {\n    console.error('[calendar/[id].ts] Error creating authenticated Supabase client:', error);\n    return { statusCode: 500, headers: responseHeaders, body: JSON.stringify({ message: 'Server error: Could not initialize authenticated database access.' }) };\n  }\n\n  try {\n    if (event.httpMethod === 'GET') {\n      return await handleGetEventById(event, userId, requestEventId, supabaseClient, responseHeaders);\n    } else if (event.httpMethod === 'PUT') {\n      return await handleUpdateEvent(event, userId, requestEventId, supabaseClient, responseHeaders);\n    } else if (event.httpMethod === 'DELETE') {\n      return await handleDeleteEvent(event, userId, requestEventId, supabaseClient, responseHeaders);\n    } else {\n      return { statusCode: 405, headers: responseHeaders, body: JSON.stringify({ message: `HTTP method ${event.httpMethod} is not supported.` }) };\n    }\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    console.error(`[calendar/[id].ts] Unhandled error for event ID ${requestEventId}: ${errorMessage}`, error);\n    return { statusCode: 500, headers: responseHeaders, body: JSON.stringify({ message: \"An unexpected server error occurred.\", error: errorMessage }) };\n  }\n};\n\nasync function handleGetEventById(\n  event: HandlerEvent,\n  userId: string,\n  eventId: string,\n  supabaseClient: SupabaseClient,\n  responseHeaders: { [header: string]: string | number | boolean; }\n): Promise<HandlerResponse> {\n  console.log(`[calendar/[id].ts] --- handleGetEventById --- User: ${userId}, EventID: ${eventId}`);\n  const { expand_recurring, start_date, end_date } = event.queryStringParameters || {};\n  const expandRecurringBool = expand_recurring === 'true';\n\n  const { data, error } = await supabaseClient\n    .from('calendar_events')\n    .select('*')\n    .eq('event_id', eventId)\n    // .eq('user_id', userId) // RLS handles this\n    .single<RecurringCalendarEvent>();\n\n  if (error) {\n    const statusCode = error.code === 'PGRST116' ? 404 : 500; // PGRST116: Not found\n    console.error(`[calendar/[id].ts] Error fetching event ${eventId} for user ${userId}:`, error);\n    return { statusCode, headers: responseHeaders, body: JSON.stringify({ message: statusCode === 404 ? 'Event not found or access denied.' : 'Failed to fetch event.', details: error.message }) };\n  }\n  if (!data) { // Should be caught by PGRST116, but as a safeguard\n      return { statusCode: 404, headers: responseHeaders, body: JSON.stringify({ message: 'Event not found.'}) };\n  }\n\n  if (expandRecurringBool && data.is_recurring && start_date && end_date) {\n    try {\n      const viewStartDate = parseISO(start_date);\n      const viewEndDate = parseISO(end_date);\n      if (isNaN(viewStartDate.valueOf()) || isNaN(viewEndDate.valueOf())) {\n        return { statusCode: 400, headers: responseHeaders, body: JSON.stringify({ message: 'Invalid start_date or end_date for expanding recurring event.' }) };\n      }\n      const occurrences = generateRecurringEventOccurrences(data, viewStartDate, viewEndDate);\n      // Note: The original code created synthetic event_ids for occurrences.\n      // This might be desired by the frontend, but for now, occurrences are returned as part of the main event.\n      const expandedEvent = { \n        ...data, \n        // Create a distinct ID for frontend keying if needed, otherwise occurrences are just data\n        occurrences: occurrences.map(occ => ({...occ, instance_id: `${data.event_id}_${occ.start_time}`})) \n      };\n      return { statusCode: 200, headers: responseHeaders, body: JSON.stringify(expandedEvent) };\n    } catch {\n      return { statusCode: 400, headers: responseHeaders, body: JSON.stringify({ message: 'Invalid date format for start_date or end_date.' }) };\n    }\n  }\n  \n  return { statusCode: 200, headers: responseHeaders, body: JSON.stringify(data) };\n}\n\nasync function handleUpdateEvent(\n  event: HandlerEvent,\n  userId: string,\n  eventId: string,\n  supabaseClient: SupabaseClient,\n  responseHeaders: { [header: string]: string | number | boolean; }\n): Promise<HandlerResponse> {\n  console.log(`[calendar/[id].ts] --- handleUpdateEvent --- User: ${userId}, EventID: ${eventId}`);\n  if (!event.body) {\n    return { statusCode: 400, headers: responseHeaders, body: JSON.stringify({ message: 'Bad Request: Missing request body' }) };\n  }\n\n  let updatePayload: Partial<Omit<RecurringCalendarEvent, 'event_id' | 'user_id' | 'created_at'>>;\n  try {\n    // Note: RawEventUpdatePayload might have fields like update_scope not directly part of RecurringCalendarEvent\n    const rawPayload = JSON.parse(event.body) as RawEventUpdatePayload;\n    // TODO: Handle update_scope ('single', 'future', 'all') if recurring event logic needs it.\n    // For now, treating as a simple update to the master event or a single non-recurring event.\n    const { update_scope, ...eventDataToUpdate } = rawPayload;\n    if (update_scope) {\n        console.log(`[calendar/[id].ts] Received update_scope: ${update_scope} - currently not implemented for full series edit.`);\n    }\n    updatePayload = eventDataToUpdate;\n\n  } catch {\n    return { statusCode: 400, headers: responseHeaders, body: JSON.stringify({ message: 'Bad Request: Invalid JSON format' }) };\n  }\n\n  // Validate dates if provided\n  try {\n    if (updatePayload.start_time) parseISO(updatePayload.start_time);\n    if (updatePayload.end_time) parseISO(updatePayload.end_time);\n    if (updatePayload.recurrence_end_date) parseISO(updatePayload.recurrence_end_date);\n    if (updatePayload.exception_date) parseISO(updatePayload.exception_date);\n  } catch {\n    return { statusCode: 400, headers: responseHeaders, body: JSON.stringify({ message: 'Bad Request: Invalid date format. Use ISO 8601.' }) };\n  }\n\n  // user_id and created_at are omitted by the type and should not be in updatePayload from client data meant for update.\n  // updated_at is set server-side.\n  updatePayload.updated_at = new Date().toISOString();\n\n  // Remove fields that are undefined to avoid PostgreSQL errors with undefined values\n  Object.keys(updatePayload).forEach(key => {\n    if (updatePayload[key as keyof typeof updatePayload] === undefined) {\n      delete updatePayload[key as keyof typeof updatePayload];\n    }\n  });\n\n  if (Object.keys(updatePayload).length === 1 && updatePayload.updated_at) {\n      return { statusCode: 400, headers: responseHeaders, body: JSON.stringify({ message: 'Bad Request: No updatable fields provided.' }) };\n  }\n\n  const { data, error } = await supabaseClient\n    .from('calendar_events')\n    .update(updatePayload)\n    .eq('event_id', eventId)\n    // .eq('user_id', userId) // RLS handles this\n    .select()\n    .single<RecurringCalendarEvent>();\n\n  if (error) {\n    const statusCode = error.code === 'PGRST116' ? 404 : 500; // PGRST116: Not found / no rows updated (check RLS)\n    console.error(`[calendar/[id].ts] Error updating event ${eventId} for user ${userId}:`, error);\n    return { statusCode, headers: responseHeaders, body: JSON.stringify({ message: statusCode === 404 ? 'Event not found, access denied, or no changes made.' : 'Failed to update event.', details: error.message }) };\n  }\n  if (!data) { // Should be caught by PGRST116 or if .select() returns null\n    return { statusCode: 404, headers: responseHeaders, body: JSON.stringify({ message: 'Event not found or no update performed.' }) };\n  }\n\n  return { statusCode: 200, headers: responseHeaders, body: JSON.stringify(data) };\n}\n\nasync function handleDeleteEvent(\n  event: HandlerEvent, // Parameter kept for consistency, though not directly used in this simplified version\n  userId: string,\n  eventId: string,\n  supabaseClient: SupabaseClient,\n  responseHeaders: { [header: string]: string | number | boolean; }\n): Promise<HandlerResponse> {\n  console.log(`[calendar/[id].ts] --- handleDeleteEvent --- User: ${userId}, EventID: ${eventId}`);\n\n  // TODO: Implement logic for deleting series ('all') or future instances ('future') if applicable.\n  // For now, this deletes a single event record (master or an exception).\n\n  // First, verify the event exists and belongs to the user (or RLS handles it)\n  // This also fetches the title for a more informative response, though not strictly necessary for delete op.\n  const { data: existingEvent, error: fetchError } = await supabaseClient\n    .from('calendar_events')\n    .select('event_id, title') // RLS ensures user_id match\n    .eq('event_id', eventId)\n    .single();\n\n  if (fetchError) {\n    const statusCode = fetchError.code === 'PGRST116' ? 404 : 500;\n    console.error(`[calendar/[id].ts] Error fetching event for delete verification ${eventId} for user ${userId}:`, fetchError);\n    return { statusCode, headers: responseHeaders, body: JSON.stringify({ message: statusCode === 404 ? 'Event not found or access denied.' : 'Failed to verify event for deletion.', details: fetchError.message }) };\n  }\n  if (!existingEvent) {\n      return { statusCode: 404, headers: responseHeaders, body: JSON.stringify({ message: 'Event not found for deletion.'}) };\n  }\n\n  const { error: deleteError } = await supabaseClient\n    .from('calendar_events')\n    .delete()\n    .eq('event_id', eventId);\n    // RLS will ensure the user can only delete their own events.\n\n  if (deleteError) {\n    console.error(`[calendar/[id].ts] Error deleting event ${eventId} for user ${userId}:`, deleteError);\n    return { statusCode: 500, headers: responseHeaders, body: JSON.stringify({ message: 'Failed to delete event.', details: deleteError.message }) };\n  }\n\n  return { statusCode: 200, headers: responseHeaders, body: JSON.stringify({ success: true, message: `Event '${existingEvent.title}' (ID: ${eventId}) deleted successfully.` }) };\n}\n\nexport { handler }; "]}
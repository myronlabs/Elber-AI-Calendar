{"version":3,"file":"contacts-search.js","sourceRoot":"","sources":["../../../src/backend/functions/contacts-search.ts"],"names":[],"mappings":"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","sourcesContent":["// src/backend/functions/contacts-search.ts (unified search & instant search)\nimport type { Handler, HandlerEvent, HandlerContext, HandlerResponse } from \"@netlify/functions\";\nimport { getUserIdFromEvent } from './_shared/utils';\nimport { supabaseAdmin } from '../services/supabaseAdmin';\nimport { FastContactFormatter } from '@services/fastContactFormatter';\nimport type { Contact } from '../types/domain';\nimport {\n  ContactSearchParams,\n  ContactSearchResponse,\n  SearchMatchType,\n  determineMatchType,\n  prioritizeContactsByMatchType\n} from '../types/search';\nimport { getCacheTTL, CACHE_CLEANUP_CONFIG } from '../utils/cacheConfig';\n\n// Constants using centralized config\nconst CACHE_TTL = getCacheTTL('search'); // Use centralized config for search operations\nconst QUERY_TIMEOUT_MS = CACHE_CLEANUP_CONFIG.QUERY_TIMEOUT_MS;\nconst COMMON_HEADERS = {\n  'Content-Type': 'application/json',\n  'Cache-Control': 'no-store, max-age=0',\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'POST, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization, apikey, x-client-info'\n};\n\n// Extend ContactSearchParams for unified functionality\ndeclare module '../types/search' {\n  interface ContactSearchParams {\n    forceRefresh?: boolean;\n    currentUserEmail?: string | null;\n    job_title_keywords?: string[] | null;\n    // Unified search parameters\n    format?: 'standard' | 'instant' | 'formatted';\n    searchTerm?: string; // For instant search compatibility\n  }\n}\n\n// Types\ninterface CacheEntry {\n  data: Contact[];\n  timestamp: number;\n  total: number;\n}\n\ninterface FallbackRankedContact extends Contact {\n  match_score: number | null;\n}\n\ninterface InstantSearchRequestBody {\n  searchTerm: string;\n}\n\ntype StandardSearchRequestBody = ContactSearchParams & {\n  // Additional fields specific to standard search can be added here\n}\n\ntype UnifiedSearchRequestBody = StandardSearchRequestBody | InstantSearchRequestBody;\n\ninterface InstantSearchResponse {\n  messages: Array<{\n    role: 'assistant';\n    content: string;\n  }>;\n  structuredData: {\n    contacts: Contact[];\n  };\n  searchMetadata: {\n    totalFound: number;\n    hasMore: boolean;\n    cached: boolean;\n  };\n}\n\ntype UnifiedSearchResponse = ContactSearchResponse | InstantSearchResponse;\n\n// Cache implementation\nconst searchCache = new Map<string, CacheEntry>();\n\nfunction getCacheKey(userId: string, query: string, limit: number, offset: number): string {\n  return `${userId}:${query}:${limit}:${offset}`;\n}\n\nfunction isValidCache(entry: CacheEntry | undefined): boolean {\n  if (!entry) return false;\n  return Date.now() - entry.timestamp < CACHE_TTL;\n}\n\n// Clear cache for a specific user - useful after contact updates\nexport function clearUserCache(userId: string): void {\n  const keysToDelete: string[] = [];\n  for (const key of searchCache.keys()) {\n    if (key.startsWith(`${userId}:`)) {\n      keysToDelete.push(key);\n    }\n  }\n  keysToDelete.forEach(key => searchCache.delete(key));\n  console.log(`[contacts-search] Cleared ${keysToDelete.length} cache entries for user ${userId}`);\n}\n\nfunction createTimeoutPromise(timeoutMs: number): Promise<never> {\n  return new Promise((_, reject) => {\n    setTimeout(() => {\n      reject(new Error(`Operation timed out after ${timeoutMs}ms`));\n    }, timeoutMs);\n  });\n}\n\n// Request type detection\nfunction isInstantSearchRequest(body: UnifiedSearchRequestBody): body is InstantSearchRequestBody {\n  return 'searchTerm' in body && typeof body.searchTerm === 'string';\n}\n\n// Import shared contact quality filters\nimport { applyContactQualityFilters } from '../utils/contactFilters';\n\n// Core search logic\nasync function performContactSearch(\n  userId: string,\n  query: string,\n  limit: number,\n  offset: number,\n  logPrefix: string,\n  options: {\n    forceRefresh?: boolean;\n    currentUserEmail?: string | null;\n    jobTitleKeywords?: string[] | null;\n  } = {}\n): Promise<{ contacts: Contact[]; total: number; cached: boolean }> {\n  const { forceRefresh = false, currentUserEmail = null, jobTitleKeywords = null } = options;\n  \n  console.log(`${logPrefix} Performing search: query=\"${query}\", limit=${limit}, offset=${offset}`);\n  \n  // Check cache first, unless forceRefresh or filtering parameters are present\n  const cacheKey = getCacheKey(userId, query, limit, offset);\n  const cachedEntry = searchCache.get(cacheKey);\n  \n  if (!forceRefresh && !currentUserEmail && !jobTitleKeywords && isValidCache(cachedEntry)) {\n    console.log(`${logPrefix} Cache hit for query: \"${query}\"`);\n    const cacheData = cachedEntry as CacheEntry;\n    // Apply Google filter to cached data as well\n    const filteredCachedContacts = applyContactQualityFilters(cacheData.data, logPrefix);\n    return {\n      contacts: filteredCachedContacts,\n      total: cacheData.total,\n      cached: true\n    };\n  }\n  \n  console.log(`${logPrefix} Cache ${forceRefresh ? 'bypassed' : (currentUserEmail || jobTitleKeywords ? 'bypassed (has filtering)' : 'miss')}, searching database`);\n  \n  // Create timeout for database operations\n  const timeoutPromise = createTimeoutPromise(QUERY_TIMEOUT_MS);\n  \n  const searchOperation = async (): Promise<{ contacts: Contact[]; total: number; cached: boolean }> => {\n    type OptimizedSearchResult = Contact & { match_score?: number };\n    \n    // Try optimized RPC first\n    const { data: rpcResults, error: searchError } = await supabaseAdmin\n      .rpc('search_contacts_optimized', {\n        p_user_id: userId,\n        p_query: query,\n        p_limit: limit,\n        p_offset: offset,\n        p_job_title_keywords: jobTitleKeywords\n      });\n    \n    let searchResults: OptimizedSearchResult[] = rpcResults || [];\n    \n    // Filter out current user if email is provided\n    if (currentUserEmail && searchResults.length > 0) {\n      searchResults = searchResults.filter(contact => \n        contact.email?.toLowerCase() !== currentUserEmail.toLowerCase()\n      );\n    }\n    \n    if (searchError) {\n      console.error(`${logPrefix} Search error from RPC:`, searchError);\n      \n      // Fallback to basic search if RPC doesn't exist\n      if (searchError.message.includes('function') && searchError.message.includes('does not exist')) {\n        console.log(`${logPrefix} Optimized search function not found, using basic search`);\n        \n        let basicQuery = supabaseAdmin\n          .from('contacts')\n          .select('*', { count: 'exact' });\n        \n        basicQuery = basicQuery.eq('user_id', userId);\n        \n        if (currentUserEmail) {\n          basicQuery = basicQuery.not('email', 'ilike', currentUserEmail);\n        }\n        \n        if (query.trim()) {\n          basicQuery = basicQuery.or(`first_name.ilike.%${query}%,last_name.ilike.%${query}%,email.ilike.%${query}%,company.ilike.%${query}%,phone.ilike.%${query}%`);\n        }\n        \n        // Add job title filtering for fallback\n        if (jobTitleKeywords && jobTitleKeywords.length > 0) {\n          const jobTitleCondition = jobTitleKeywords.map(keyword => `job_title.ilike.%${keyword}%`).join(',');\n          basicQuery = basicQuery.or(jobTitleCondition);\n        }\n        \n        const queryResponse = await basicQuery\n          .order('updated_at', { ascending: false })\n          .range(offset, offset + limit - 1);\n        \n        const basicContactsData = queryResponse.data as Contact[] | null;\n        const basicError = queryResponse.error;\n        const count = queryResponse.count;\n        \n        if (basicError) {\n          console.error(`${logPrefix} Basic search error:`, basicError);\n          throw new Error(`Search failed: ${basicError.message}`);\n        }\n        \n        const contactsForRanking: Contact[] = basicContactsData || [];\n        let rankedFallbackContacts: FallbackRankedContact[] = [];\n        \n        if (contactsForRanking.length > 0 && query.trim()) {\n          rankedFallbackContacts = contactsForRanking.map((contact: Contact) => {\n            const fullName = `${contact.first_name || ''} ${contact.last_name || ''}`.trim().toLowerCase();\n            const queryLower = query.toLowerCase();\n            let score = 0.1;\n            if (fullName.includes(queryLower)) score = 0.8;\n            else if (contact.email && contact.email.toLowerCase().includes(queryLower)) score = 0.6;\n            else if (contact.phone && contact.phone.includes(queryLower)) score = 0.5;\n            \n            return { ...contact, match_score: score };\n          });\n          \n          rankedFallbackContacts.sort((a, b) => (b.match_score ?? 0) - (a.match_score ?? 0));\n        } else if (contactsForRanking.length > 0) {\n          rankedFallbackContacts = contactsForRanking.map(contact => ({ ...contact, match_score: null }));\n        }\n        \n        // Filter out erroneous \"Google\" named contacts from fallback results\n        let fallbackContacts = rankedFallbackContacts.map(({ match_score: _ms, ...contactFields }) => contactFields as Contact);\n        fallbackContacts = applyContactQualityFilters(fallbackContacts, logPrefix);\n        \n        // Cache results if not filtering by currentUserEmail\n        if (!currentUserEmail) {\n          searchCache.set(cacheKey, {\n            data: fallbackContacts,\n            timestamp: Date.now(),\n            total: count || 0\n          });\n        }\n        \n        return {\n          contacts: fallbackContacts,\n          total: count || 0,\n          cached: false\n        };\n      }\n      \n      throw new Error(`Search failed: ${searchError.message}`);\n    }\n    \n    // Apply enhanced sorting logic for RPC results\n    const rankedContacts: OptimizedSearchResult[] = searchResults;\n    \n    if (rankedContacts.length > 0 && query.trim()) {\n      console.log(`${logPrefix} Applying enhanced sorting to ${rankedContacts.length} results`);\n      \n      // Analyze match types for each contact\n      const contactsWithMatchTypes = rankedContacts.map(contact => {\n        const matchType = determineMatchType(contact, query);\n        return { contact, matchType };\n      });\n      \n      // Group contacts by match type priority\n      const exactFullNameMatches = contactsWithMatchTypes\n        .filter(item => item.matchType === SearchMatchType.EXACT_FULL_NAME)\n        .map(item => item.contact);\n        \n      const exactFirstNameMatches = contactsWithMatchTypes\n        .filter(item => item.matchType === SearchMatchType.EXACT_FIRST_NAME)\n        .map(item => item.contact);\n        \n      const exactLastNameMatches = contactsWithMatchTypes\n        .filter(item => item.matchType === SearchMatchType.EXACT_LAST_NAME)\n        .map(item => item.contact);\n        \n      const partialNameMatches = contactsWithMatchTypes\n        .filter(item => item.matchType === SearchMatchType.PARTIAL_NAME)\n        .map(item => item.contact);\n        \n      const otherMatches = contactsWithMatchTypes\n        .filter(item => [\n          SearchMatchType.CONTACT_INFO,\n          SearchMatchType.COMPANY_INFO,\n          SearchMatchType.GENERAL_INFO,\n          SearchMatchType.NO_MATCH\n        ].includes(item.matchType))\n        .map(item => item.contact);\n      \n      // Create final ordered list with exact matches prioritized\n      const orderedRankedContacts = [\n        ...exactFullNameMatches.sort((a, b) => (b.match_score ?? 0) - (a.match_score ?? 0)),\n        ...exactFirstNameMatches.sort((a, b) => (b.match_score ?? 0) - (a.match_score ?? 0)),\n        ...exactLastNameMatches.sort((a, b) => (b.match_score ?? 0) - (a.match_score ?? 0)),\n        ...partialNameMatches.sort((a, b) => (b.match_score ?? 0) - (a.match_score ?? 0)),\n        ...otherMatches.sort((a, b) => (b.match_score ?? 0) - (a.match_score ?? 0))\n      ];\n      \n      // If exact full name matches exist, prioritize only those\n      if (exactFullNameMatches.length > 0) {\n        console.log(`${logPrefix} Prioritizing ${exactFullNameMatches.length} exact full name match(es)`);\n        rankedContacts.length = 0;\n        rankedContacts.push(...exactFullNameMatches);\n      } else {\n        rankedContacts.length = 0;\n        rankedContacts.push(...orderedRankedContacts);\n      }\n    } else {\n      rankedContacts.sort((a, b) => (b.match_score ?? 0) - (a.match_score ?? 0));\n    }\n    \n    console.log(`${logPrefix} Total contacts found: ${rankedContacts.length}`);\n    \n    // Extract contacts without match_score for response\n    let contacts: Contact[] = rankedContacts.map(({ match_score: _ignoredScore, ...contactFields }) => contactFields as Contact);\n    \n    // Filter out erroneous \"Google\" named contacts from import\n    contacts = applyContactQualityFilters(contacts, logPrefix);\n    \n    // Get total count for pagination\n    const countQuery = supabaseAdmin\n      .from('contacts')\n      .select('*', { count: 'exact', head: true })\n      .eq('user_id', userId);\n    \n    if (query.trim()) {\n      countQuery.or(`first_name.ilike.%${query}%,last_name.ilike.%${query}%,email.ilike.%${query}%,company.ilike.%${query}%,phone.ilike.%${query}%`);\n    }\n    \n    const { count: totalCountFromQuery } = await countQuery;\n    const finalTotal = totalCountFromQuery || rankedContacts.length;\n    \n    // Cache successful results if not filtering by currentUserEmail\n    if (!currentUserEmail) {\n      searchCache.set(cacheKey, {\n        data: contacts,\n        timestamp: Date.now(),\n        total: finalTotal\n      });\n    }\n    \n    // Clean up old cache entries periodically\n    if (Math.random() < 0.1) {\n      const now = Date.now();\n      for (const [key, entry] of searchCache.entries()) {\n        if (now - entry.timestamp > CACHE_TTL) {\n          searchCache.delete(key);\n        }\n      }\n    }\n    \n    return {\n      contacts,\n      total: finalTotal,\n      cached: false\n    };\n  };\n  \n  // Race search operation against timeout\n  return await Promise.race([searchOperation(), timeoutPromise]);\n}\n\n// Format response based on request type\nfunction formatResponse(\n  contacts: Contact[],\n  total: number,\n  cached: boolean,\n  format: 'standard' | 'instant' | 'formatted',\n  searchTerm: string,\n  limit: number,\n  offset: number\n): UnifiedSearchResponse {\n  if (format === 'instant' || format === 'formatted') {\n    // Instant search response format\n    const formattedResponse = FastContactFormatter.formatContactsForDisplay(contacts, searchTerm);\n    \n    return {\n      messages: [{\n        role: 'assistant',\n        content: formattedResponse\n      }],\n      structuredData: {\n        contacts: contacts.map(contact => ({\n          contact_id: contact.contact_id,\n          first_name: contact.first_name,\n          last_name: contact.last_name,\n          email: contact.email,\n          phone: contact.phone,\n          mobile_phone: contact.mobile_phone,\n          work_phone: contact.work_phone,\n          company: contact.company,\n          job_title: contact.job_title,\n          formatted_address: contact.formatted_address,\n          street_address: contact.street_address,\n          city: contact.city,\n          state_province: contact.state_province,\n          postal_code: contact.postal_code,\n          country: contact.country,\n          birthday: contact.birthday,\n          notes: contact.notes\n        }))\n      },\n      searchMetadata: {\n        totalFound: contacts.length,\n        hasMore: contacts.length < total,\n        cached: cached\n      }\n    } as InstantSearchResponse;\n  } else {\n    // Standard search response format\n    return {\n      contacts,\n      total,\n      hasMore: offset + limit < total,\n      cached\n    } as ContactSearchResponse;\n  }\n}\n\n// Main handler\nexport const handler: Handler = async (event: HandlerEvent, context: HandlerContext): Promise<HandlerResponse> => {\n  const reqId = context.awsRequestId || `local-${Date.now()}`;\n  const logPrefix = `[contacts-search-unified][${reqId}]`;\n  \n  console.log(`${logPrefix} Function invoked. HTTP Method: ${event?.httpMethod}. Path: ${event?.path}`);\n  \n  // Handle CORS preflight requests\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204,\n      headers: COMMON_HEADERS,\n      body: ''\n    };\n  }\n  \n  // Only allow POST requests\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ message: 'Method Not Allowed' }),\n      headers: { ...COMMON_HEADERS, 'Allow': 'POST, OPTIONS' },\n    };\n  }\n  \n  // Authenticate the user\n  const userId = getUserIdFromEvent(event, 'contacts-search-unified');\n  if (!userId) {\n    return {\n      statusCode: 401,\n      body: JSON.stringify({ message: 'Authentication required' }),\n      headers: COMMON_HEADERS,\n    };\n  }\n  \n  try {\n    // Parse request body\n    const body: UnifiedSearchRequestBody = JSON.parse(event.body || '{}');\n    \n    // Determine request type and extract parameters\n    let query: string;\n    let limit: number;\n    let offset: number;\n    let format: 'standard' | 'instant' | 'formatted';\n    let forceRefresh: boolean;\n    let currentUserEmail: string | null;\n    let jobTitleKeywords: string[] | null;\n    \n    if (isInstantSearchRequest(body)) {\n      // Instant search request\n      const { searchTerm } = body;\n      \n      if (!searchTerm || typeof searchTerm !== 'string') {\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ message: 'Search term is required and must be a string' }),\n          headers: COMMON_HEADERS,\n        };\n      }\n      \n      query = searchTerm;\n      limit = 50;\n      offset = 0;\n      format = 'instant';\n      forceRefresh = false;\n      currentUserEmail = null;\n      jobTitleKeywords = null;\n      \n      console.log(`${logPrefix} Instant search for: \"${searchTerm}\"`);\n    } else {\n      // Standard search request\n      query = body.query || '';\n      limit = Math.min(body.limit || 50, 100);\n      offset = body.offset || 0;\n      format = body.format || 'standard';\n      forceRefresh = body.forceRefresh || false;\n      currentUserEmail = body.currentUserEmail || null;\n      jobTitleKeywords = body.job_title_keywords || null;\n      \n      console.log(`${logPrefix} Standard search: query=\"${query}\", limit=${limit}, offset=${offset}, format=${format}`);\n    }\n    \n    // Perform the search\n    const timeoutPromise = createTimeoutPromise(QUERY_TIMEOUT_MS);\n    const searchPromise = performContactSearch(userId, query, limit, offset, logPrefix, {\n      forceRefresh,\n      currentUserEmail,\n      jobTitleKeywords\n    });\n    \n    const { contacts, total, cached } = await Promise.race([searchPromise, timeoutPromise]);\n    \n    // Apply additional prioritization for instant search\n    let finalContacts = contacts;\n    if (format === 'instant' && contacts.length > 1 && query.trim()) {\n      const prioritizedContacts = prioritizeContactsByMatchType(contacts, query.trim());\n      \n      // Check for exact full name matches and return only those\n      if (prioritizedContacts.length > 0) {\n        const cleanQuery = query.trim().toLowerCase();\n        const exactFullNameMatches = prioritizedContacts.filter(contact => {\n          const fullName = `${contact.first_name || ''} ${contact.last_name || ''}`.trim().toLowerCase();\n          return fullName === cleanQuery;\n        });\n        \n        if (exactFullNameMatches.length > 0) {\n          console.log(`${logPrefix} Found ${exactFullNameMatches.length} exact full name matches for instant search`);\n          finalContacts = exactFullNameMatches;\n        } else {\n          finalContacts = prioritizedContacts;\n        }\n      }\n    }\n    \n    // Filter out erroneous \"Google\" named contacts from import\n    finalContacts = applyContactQualityFilters(finalContacts, logPrefix);\n    \n    // Format and return response\n    const response = formatResponse(finalContacts, total, cached, format, query, limit, offset);\n    \n    return {\n      statusCode: 200,\n      body: JSON.stringify(response),\n      headers: COMMON_HEADERS,\n    };\n    \n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    console.error(`${logPrefix} Error:`, error);\n    \n    return {\n      statusCode: error instanceof Error && error.message.includes('timed out') ? 408 : 500,\n      body: JSON.stringify({\n        message: error instanceof Error && error.message.includes('timed out') ?\n          'Search request timed out. Try a more specific search term.' :\n          'Internal server error',\n        error: errorMessage\n      }),\n      headers: COMMON_HEADERS,\n    };\n  }\n};"]}
{"version":3,"file":"get-profile.js","sourceRoot":"","sources":["../../../src/backend/functions/get-profile.ts"],"names":[],"mappings":"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","sourcesContent":["import { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport { supabaseAdmin } from '../services';\nimport { getUserIdFromEvent } from './_shared/utils';\n\nconsole.log('[get-profile.ts] MODULE LOADED: Attempting to use imported supabaseAdmin.');\nif (supabaseAdmin) {\n  console.log('[get-profile.ts] MODULE LOADED: supabaseAdmin import seems successful.');\n} else {\n  console.error('[get-profile.ts] MODULE LOADED: supabaseAdmin import FAILED or is undefined. This is critical!');\n  // Potentially throw here or ensure the function cannot proceed if supabaseAdmin is not available.\n}\n\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext) => {\n  console.log(\"[get-profile.ts] HANDLER_START: Get-profile function invoked. Method:\", event.httpMethod);\n  console.log(\"[get-profile.ts] HANDLER_START: Checking supabaseAdmin object availability within handler:\", supabaseAdmin ? 'Available' : 'NOT AVAILABLE - CRITICAL');\n\n  const corsHeaders = {\n    \"Access-Control-Allow-Origin\": \"*\", // Allow all origins\n    \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n    \"Content-Type\": \"application/json\",\n  };\n\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204,\n      headers: {\n        ...corsHeaders,\n        \"Access-Control-Allow-Methods\": \"GET, OPTIONS\", // Only GET and OPTIONS are used\n      },\n      body: \"\",\n    };\n  }\n\n  if (event.httpMethod !== \"GET\") {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ message: \"Method Not Allowed\" }),\n      headers: corsHeaders, // Use defined CORS headers\n    };\n  }\n\n  // Use the shared utility to get userId from event\n  const userId = getUserIdFromEvent(event, 'get-profile');\n  \n  if (!userId) {\n    console.warn(\"[get-profile.ts] AUTH_FAIL: Auth session missing or userId could not be extracted!\");\n    return {\n      statusCode: 401,\n      body: JSON.stringify({ message: \"Auth session missing!\" }),\n      headers: corsHeaders, // Use defined CORS headers\n    };\n  }\n  \n  console.log(`[get-profile.ts] USER_ID_OBTAINED: Fetching profile for authenticated user ID: ${userId}`);\n\n  try {\n    console.log('[get-profile.ts] DB_QUERY_START: Attempting to query profiles table using supabaseAdmin.');\n    const { data: profileDataFromDb, error: profileError } = await supabaseAdmin\n      .from('profiles')\n      .select('*') // Select all profile fields, or be specific: 'is_custom_verified, first_name, last_name'\n      .eq('id', userId)\n      .single();\n\n    if (profileError) {\n      if (profileError.code === 'PGRST116') { // \"JSON object requested, multiple (or no) rows returned\"\n        console.warn(`[get-profile.ts] DB_NO_PROFILE: No profile found in 'profiles' table for user ${userId}. Code: PGRST116.`);\n        // This case is critical. If a user is authenticated by Supabase (has a valid token) \n        // but has no profile record, it's an inconsistent state. \n        // The frontend logic in AuthContext already handles signing out if 404 is received here.\n        return {\n          statusCode: 404,\n          body: JSON.stringify({ message: \"Profile not found for authenticated user.\" }), \n          headers: corsHeaders, // Use defined CORS headers\n        };\n      }\n      console.error(`[get-profile.ts] DB_ERROR: Error fetching from 'profiles' table for user ${userId}:`, profileError.message);\n      return {\n        statusCode: 500,\n        body: JSON.stringify({ message: \"Server error fetching profile data.\" }),\n        headers: corsHeaders, // Use defined CORS headers\n      };\n    }\n\n    if (!profileDataFromDb) {\n      // Should be caught by PGRST116, but as a safeguard\n      console.warn(`[get-profile.ts] DB_NO_DATA: No profile data returned from 'profiles' table for user ${userId} even without error.`);\n       return {\n          statusCode: 404,\n          body: JSON.stringify({ message: \"Profile data not available for authenticated user.\" }),\n          headers: corsHeaders, // Use defined CORS headers\n        };\n    }\n\n    console.log(`[get-profile.ts] AUTH_FETCH_START: Attempting to fetch user auth data (including user_metadata) for user ID: ${userId}`);\n    const { data: authUserData, error: authError } = await supabaseAdmin.auth.admin.getUserById(userId);\n\n    if (authError) {\n      console.error(`[get-profile.ts] AUTH_ERROR: Error fetching user auth data for user ${userId}:`, authError.message);\n      // Decide if this is fatal or if we can proceed with just profileDataFromDb\n      // For settings, user_metadata is crucial, so let's treat it as an error if it fails.\n      return {\n        statusCode: 500,\n        body: JSON.stringify({ message: \"Server error fetching user authentication details.\" }),\n        headers: corsHeaders, // Use defined CORS headers\n      };\n    }\n\n    if (!authUserData || !authUserData.user) {\n      console.warn(`[get-profile.ts] AUTH_NO_DATA: No user auth data returned for user ${userId}.`);\n      // This is unexpected if the user is authenticated.\n      return {\n        statusCode: 404,\n        body: JSON.stringify({ message: \"User authentication details not found.\" }),\n        headers: corsHeaders, // Use defined CORS headers\n      };\n    }\n    \n    const userMetadata = authUserData.user.user_metadata || {};\n    console.log(`[get-profile.ts] AUTH_SUCCESS: User auth data fetched. User_metadata keys: ${Object.keys(userMetadata).join(', ')}`);\n\n    // Combine profileDataFromDb with user_metadata\n    // user_metadata might have overlapping fields (like email, names if stored there too),\n    // decide on precedence or merge carefully. For settings, user_metadata is key.\n    // A simple spread might be okay if `profiles` table is source of truth for some fields\n    // and user_metadata for others.\n    // Here, we merge them, with user_metadata potentially overwriting profileDataFromDb if keys conflict,\n    // or more safely, add user_metadata as a nested object or merge specific fields.\n    // Given the problem is about missing settings from user_metadata, ensuring it's present is key.\n\n    const combinedData = {\n      ...profileDataFromDb, // Data from 'profiles' table\n      user_metadata: userMetadata, // All settings from auth.users.user_metadata\n      // Optionally, explicitly pull specific fields from user_metadata to the top level if needed by frontend contracts\n      // e.g., profile_visibility: userMetadata.profile_visibility,\n    };\n    \n    // Log a snippet of the combined data for verification, avoiding overly large logs\n    const combinedDataLogSample = { \n        ...combinedData, \n        user_metadata: `Keys: ${Object.keys(combinedData.user_metadata || {}).join(', ')} (actual values hidden)` \n    };\n    console.log(`[get-profile.ts] DATA_COMBINED: Profile and auth data combined. Sample:`, JSON.stringify(combinedDataLogSample).substring(0,300));\n\n    console.log(`[get-profile.ts] DB_SUCCESS: Profile data fetched successfully for user ${userId}. Custom verified: ${profileDataFromDb.is_custom_verified}`);\n    return {\n      statusCode: 200,\n      body: JSON.stringify(combinedData),\n      headers: corsHeaders, // Use defined CORS headers\n    };\n\n  } catch (error: unknown) {\n    let errorMessage = \"An unexpected server error occurred.\";\n    if (error instanceof Error) {\n      errorMessage = error.message;\n    }\n    console.error(\"[get-profile.ts] UNEXPECTED_ERROR: Unexpected error in handler after auth:\", errorMessage, error instanceof Error ? error.stack : undefined);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ message: \"An unexpected server error occurred.\" }), // Keep generic message for client\n      headers: corsHeaders, // Use defined CORS headers\n    };\n  }\n};\n\nexport { handler }; "]}
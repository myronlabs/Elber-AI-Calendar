{"version":3,"file":"contacts-management.js","sourceRoot":"","sources":["../../../src/backend/functions/contacts-management.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport { supabaseAdmin } from '../services';\nimport type { PostgrestError, SupabaseClient } from '@supabase/supabase-js';\n\n// Generic type for Supabase RPC responses\ninterface SupabaseRpcResponse<DataT> {\n  data: DataT | null;\n  error: PostgrestError | null;\n  count?: number | null;\n  status?: number;\n  statusText?: string;\n}\n\nconst COMMON_HEADERS = {\n  'Content-Type': 'application/json',\n  'Cache-Control': 'no-store, no-cache, must-revalidate',\n  'Pragma': 'no-cache'\n};\n\n// Constants for rate limiting\nconst MAX_BATCH_SIZE = 500;\nconst MAX_OPERATIONS_PER_HOUR = 20;\nconst MAX_CONTACTS_PER_HOUR = 2000;\n\n// Enum for standardized error codes\nenum ErrorCode {\n  INVALID_INPUT = 'INVALID_INPUT',\n  DUPLICATE_FOUND = 'DUPLICATE_FOUND',\n  RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED',\n  DATABASE_ERROR = 'DATABASE_ERROR',\n  PERMISSION_DENIED = 'PERMISSION_DENIED',\n  NOT_FOUND = 'NOT_FOUND',\n  VALIDATION_ERROR = 'VALIDATION_ERROR',\n  UNEXPECTED_ERROR = 'UNEXPECTED_ERROR'\n}\n\n// Helper for setting operation context\nconst setOperationContext = async (supabase: SupabaseClient, context: string): Promise<void> => {\n  try {\n    await supabase.rpc('set_operation_context', { context });\n  } catch (error) {\n    console.error('[contacts-management] Failed to set operation context:', error);\n    // Continue execution even if setting context fails\n  }\n};\n\n// Helper function to get authenticated user ID\nconst getAuthenticatedUserId = async (event: HandlerEvent): Promise<string | null> => {\n  const authHeader = event.headers.authorization;\n  if (!authHeader) return null;\n\n  const token = authHeader.split(' ')[1];\n  const { data: { user }, error } = await supabaseAdmin.auth.getUser(token);\n  \n  if (error || !user) return null;\n  return user.id;\n};\n\n// Interface for the response\ninterface OperationResponse {\n  success: boolean;\n  message: string;\n  error_code?: ErrorCode;\n  affected_count?: number;\n  details?: unknown;\n  errors?: { message: string; code?: string; field?: string }[];\n}\n\n// Utility to validate UUID format\nconst isValidUuid = (uuid: string): boolean => {\n  const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  return uuidPattern.test(uuid);\n};\n\n// Retry utility for transient errors\nconst retryOperation = async <T>(\n  operation: () => Promise<T>,\n  maxRetries: number = 3,\n  baseDelay: number = 100,\n  shouldRetry?: (error: Error) => boolean\n): Promise<T> => {\n  let lastError: Error | null = null;\n\n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      const currentError = error instanceof Error ? error : new Error(String(error));\n      lastError = currentError;\n\n      // Check if we should retry this error\n      if (shouldRetry && !shouldRetry(currentError)) {\n        throw currentError;\n      }\n\n      // Skip last retry's delay\n      if (attempt < maxRetries - 1) {\n        // Wait with exponential backoff before retry\n        const delay = baseDelay * Math.pow(2, attempt);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n\n  throw lastError || new Error('Operation failed after retries');\n};\n\n// Helper to check rate limits with fail-closed security model\nconst checkRateLimits = async (\n  userId: string,\n  operation: string,\n  size: number\n): Promise<{allowed: boolean; message?: string; error_code?: ErrorCode}> => {\n  try {\n    // Input validation\n    if (!userId || !operation || size <= 0) {\n      return {\n        allowed: false,\n        message: 'Invalid parameters for rate limiting',\n        error_code: ErrorCode.INVALID_INPUT\n      };\n    }\n\n    // Retry operation on transient database errors\n    const { data, error } = await retryOperation<\n      SupabaseRpcResponse<boolean>\n    >(\n      async () => await supabaseAdmin.rpc(\n        'rate_limit_contact_operations',\n        {\n          p_user_id: userId,\n          p_operation: operation,\n          p_size: size,\n          p_max_operations: MAX_OPERATIONS_PER_HOUR,\n          p_max_size: MAX_CONTACTS_PER_HOUR,\n          p_time_window: '1 hour'\n        }\n      ),\n      3, // Maximum 3 retries\n      100, // Start with 100ms delay\n      (err) => {\n        // Only retry on connection/timeout errors, not validation errors\n        const errorMsg = err.message.toLowerCase();\n        return errorMsg.includes('timeout') ||\n               errorMsg.includes('connection') ||\n               errorMsg.includes('network');\n      }\n    );\n\n    if (error) {\n      console.error(`[contacts-management] Rate limit check error: ${error.message}`);\n\n      // In case of error, default to denying the operation (fail closed security model)\n      return {\n        allowed: false,\n        message: `Unable to verify rate limits. Please try again later.`,\n        error_code: ErrorCode.DATABASE_ERROR\n      };\n    }\n\n    // If data is false, rate limit was exceeded\n    if (data === false) {\n      return {\n        allowed: false,\n        message: `Rate limit exceeded. You can perform up to ${MAX_OPERATIONS_PER_HOUR} operations or ${MAX_CONTACTS_PER_HOUR} contact modifications per hour.`,\n        error_code: ErrorCode.RATE_LIMIT_EXCEEDED\n      };\n    }\n\n    return { allowed: true };\n  } catch (error) {\n    console.error(`[contacts-management] Unexpected error in rate limit check: ${error}`);\n\n    // In case of unexpected error, fail closed for safety\n    return {\n      allowed: false,\n      message: `Rate limit check failed due to an unexpected error.`,\n      error_code: ErrorCode.UNEXPECTED_ERROR\n    };\n  }\n};\n\n// Batch update contacts with enhanced validation and error handling\nconst batchUpdateContacts = async (\n  userId: string,\n  contactIds: string[],\n  updates: Record<string, unknown>,\n  operationContext: string = 'batch_update_api'\n): Promise<OperationResponse> => {\n  const logPrefix = `[contacts-management:batchUpdate]`;\n\n  // Input validation\n  if (!userId || !isValidUuid(userId)) {\n    return {\n      success: false,\n      message: 'Invalid user ID format',\n      error_code: ErrorCode.INVALID_INPUT\n    };\n  }\n\n  if (!Array.isArray(contactIds) || contactIds.length === 0) {\n    return {\n      success: false,\n      message: 'Contact IDs must be a non-empty array',\n      error_code: ErrorCode.INVALID_INPUT\n    };\n  }\n\n  // Validate each contact ID format\n  const invalidIds = contactIds.filter(id => !isValidUuid(id));\n  if (invalidIds.length > 0) {\n    return {\n      success: false,\n      message: `Invalid contact ID format for ${invalidIds.length} IDs`,\n      error_code: ErrorCode.INVALID_INPUT,\n      details: { invalidIds: invalidIds.length > 10 ? invalidIds.slice(0, 10) : invalidIds }\n    };\n  }\n\n  // Validate batch size\n  if (contactIds.length > MAX_BATCH_SIZE) {\n    return {\n      success: false,\n      message: `Batch size exceeds maximum allowed (${MAX_BATCH_SIZE})`,\n      error_code: ErrorCode.INVALID_INPUT\n    };\n  }\n\n  // Validate updates object\n  if (!updates || typeof updates !== 'object' || Array.isArray(updates) || Object.keys(updates).length === 0) {\n    return {\n      success: false,\n      message: 'Updates must be a non-empty object',\n      error_code: ErrorCode.INVALID_INPUT\n    };\n  }\n\n  // Check for potential data issues\n  const validFields = ['first_name', 'last_name', 'email', 'phone', 'company', 'job_title', 'address', 'notes'];\n  const invalidFields = Object.keys(updates).filter(key => !validFields.includes(key));\n  if (invalidFields.length > 0) {\n    return {\n      success: false,\n      message: `Invalid update fields: ${invalidFields.join(', ')}`,\n      error_code: ErrorCode.INVALID_INPUT\n    };\n  }\n\n  // Email validation if present\n  if (updates.email && typeof updates.email === 'string') {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(updates.email)) {\n      return {\n        success: false,\n        message: 'Invalid email format',\n        error_code: ErrorCode.VALIDATION_ERROR\n      };\n    }\n  }\n\n  // Check rate limits\n  const rateLimitCheck = await checkRateLimits(userId, 'batch_update', contactIds.length);\n  if (!rateLimitCheck.allowed) {\n    return {\n      success: false,\n      message: rateLimitCheck.message || 'Rate limit exceeded',\n      error_code: rateLimitCheck.error_code || ErrorCode.RATE_LIMIT_EXCEEDED\n    };\n  }\n\n  // Verify ownership of contacts before attempting update\n  try {\n    const { data: ownershipData, error: ownershipError } = await supabaseAdmin.rpc(\n      'check_contact_ownership',\n      { p_user_id: userId, p_contact_ids: contactIds }\n    );\n\n    if (ownershipError) {\n      console.error(`${logPrefix} Error checking contact ownership: ${ownershipError.message}`);\n      return {\n        success: false,\n        message: 'Error verifying contact ownership',\n        error_code: ErrorCode.DATABASE_ERROR\n      };\n    }\n\n    const nonOwnedContacts = ownershipData.filter((item: { contact_id: string; exists_for_user: boolean }) => !item.exists_for_user);\n    if (nonOwnedContacts.length > 0) {\n      return {\n        success: false,\n        message: `You don't have permission to modify ${nonOwnedContacts.length} of the specified contacts`,\n        error_code: ErrorCode.PERMISSION_DENIED,\n        details: { nonOwnedCount: nonOwnedContacts.length }\n      };\n    }\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    console.error(`${logPrefix} Unexpected error checking contact ownership: ${errorMessage}`);\n\n    return {\n      success: false,\n      message: 'Error verifying contact ownership',\n      error_code: ErrorCode.UNEXPECTED_ERROR\n    };\n  }\n\n  try {\n    // Set the operation context\n    await setOperationContext(supabaseAdmin, operationContext);\n\n    // Execute the batch update with retry for transient errors\n    const { data, error } = await retryOperation<\n      SupabaseRpcResponse<number>\n    >(\n      async () => await supabaseAdmin.rpc('batch_update_contacts', {\n        p_user_id: userId,\n        p_contact_ids: contactIds,\n        p_updates: updates,\n        p_operation_context: operationContext\n      }),\n      3, // Maximum 3 retries\n      100, // Start with 100ms delay\n      (err) => {\n        // Only retry on connection/timeout errors, not validation errors\n        const errorMsg = err.message.toLowerCase();\n        return errorMsg.includes('timeout') ||\n               errorMsg.includes('connection') ||\n               errorMsg.includes('network');\n      }\n    );\n\n    if (error) {\n      console.error(`${logPrefix} Batch update error: ${error.message}`);\n\n      // Differentiate between different types of errors\n      if (error.message.includes('INVLD')) {\n        return {\n          success: false,\n          message: 'Validation error: ' + error.message.replace(/Error: INVLD: /i, ''),\n          error_code: ErrorCode.VALIDATION_ERROR\n        };\n      }\n\n      return {\n        success: false,\n        message: `Failed to update contacts: ${error.message}`,\n        error_code: ErrorCode.DATABASE_ERROR\n      };\n    }\n\n    console.log(`${logPrefix} Successfully updated ${data} contacts for user ${userId}`);\n\n    return {\n      success: true,\n      message: `Successfully updated ${data} contacts`,\n      affected_count: data as number\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    console.error(`${logPrefix} Unexpected error in batch update: ${errorMessage}`);\n\n    return {\n      success: false,\n      message: `An unexpected error occurred: ${errorMessage}`,\n      error_code: ErrorCode.UNEXPECTED_ERROR\n    };\n  }\n};\n\n// Batch delete contacts\nconst batchDeleteContacts = async (\n  userId: string,\n  contactIds: string[],\n  operationContext: string = 'batch_delete_api'\n): Promise<OperationResponse> => {\n  // Validate batch size\n  if (contactIds.length > MAX_BATCH_SIZE) {\n    return {\n      success: false,\n      message: `Batch size exceeds maximum allowed (${MAX_BATCH_SIZE})`,\n    };\n  }\n\n  // Check rate limits\n  const rateLimitCheck = await checkRateLimits(userId, 'batch_delete', contactIds.length);\n  if (!rateLimitCheck.allowed) {\n    return {\n      success: false,\n      message: rateLimitCheck.message || 'Rate limit exceeded',\n    };\n  }\n\n  try {\n    // Use the batch delete function\n    const { data, error } = await supabaseAdmin.rpc('batch_delete_contacts', {\n      p_user_id: userId,\n      p_contact_ids: contactIds,\n      p_operation_context: operationContext\n    });\n\n    if (error) {\n      console.error(`[contacts-management] Batch delete error: ${error.message}`);\n      return {\n        success: false,\n        message: `Failed to delete contacts: ${error.message}`,\n      };\n    }\n\n    return {\n      success: true,\n      message: `Successfully deleted ${data} contacts`,\n      affected_count: data\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    console.error(`[contacts-management] Unexpected error in batch delete: ${errorMessage}`);\n    \n    return {\n      success: false,\n      message: `An unexpected error occurred: ${errorMessage}`,\n    };\n  }\n};\n\n// Batch tag contacts\nconst batchTagContacts = async (\n  userId: string,\n  contactIds: string[],\n  tagNames: string[],\n  operationContext: string = 'batch_tag_api'\n): Promise<OperationResponse> => {\n  // Validate batch size\n  if (contactIds.length > MAX_BATCH_SIZE) {\n    return {\n      success: false,\n      message: `Batch size exceeds maximum allowed (${MAX_BATCH_SIZE})`,\n    };\n  }\n\n  // Check rate limits\n  const rateLimitCheck = await checkRateLimits(userId, 'batch_tag', contactIds.length);\n  if (!rateLimitCheck.allowed) {\n    return {\n      success: false,\n      message: rateLimitCheck.message || 'Rate limit exceeded',\n    };\n  }\n\n  try {\n    // Use the batch tag function\n    const { data, error } = await supabaseAdmin.rpc('batch_tag_contacts', {\n      p_user_id: userId,\n      p_contact_ids: contactIds,\n      p_tag_names: tagNames,\n      p_operation_context: operationContext\n    });\n\n    if (error) {\n      console.error(`[contacts-management] Batch tag error: ${error.message}`);\n      return {\n        success: false,\n        message: `Failed to tag contacts: ${error.message}`,\n      };\n    }\n\n    return {\n      success: true,\n      message: `Successfully tagged ${data} contacts`,\n      affected_count: data\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    console.error(`[contacts-management] Unexpected error in batch tag: ${errorMessage}`);\n    \n    return {\n      success: false,\n      message: `An unexpected error occurred: ${errorMessage}`,\n    };\n  }\n};\n\n// Find duplicate contacts\nconst findDuplicateContacts = async (\n  userId: string,\n  params: {\n    email?: string;\n    phone?: string;\n    first_name?: string;\n    last_name?: string;\n    company?: string;\n  }\n): Promise<OperationResponse> => {\n  try {\n    // Use the find duplicates function to get potential duplicates\n    const { data, error } = await supabaseAdmin.rpc('find_duplicate_contacts', {\n      p_user_id: userId,\n      p_email: params.email || null,\n      p_phone: params.phone || null,\n      p_first_name: params.first_name || null,\n      p_last_name: params.last_name || null,\n      p_company: params.company || null\n    });\n\n    if (error) {\n      console.error(`[contacts-management] Find duplicates error: ${error.message}`);\n      return {\n        success: false,\n        message: `Failed to find duplicate contacts: ${error.message}`,\n      };\n    }\n\n    // If we found duplicates, enrich them with full contact details\n    if (data && data.length > 0) {\n      // Extract contact IDs from the duplicate results\n      const contactIds = data.map((dup: { contact_id: string }) => dup.contact_id);\n\n      // Fetch the full contact details for these IDs\n      const { data: contactsData, error: contactsError } = await supabaseAdmin\n        .from('contacts')\n        .select('contact_id, first_name, last_name, email, phone, company')\n        .in('contact_id', contactIds)\n        .eq('user_id', userId);\n\n      if (contactsError) {\n        console.error(`[contacts-management] Error fetching contact details: ${contactsError.message}`);\n        // Return just the duplicate results without enrichment\n        return {\n          success: true,\n          message: `Found ${data.length} potential duplicate contacts (without details)`,\n          details: data\n        };\n      }\n\n      // Create a map for quick lookup of contact details by ID\n      const contactsMap = new Map();\n      contactsData.forEach((contact) => {\n        contactsMap.set(contact.contact_id, contact);\n      });\n\n      // Enrich the duplicate results with contact details\n      const enrichedData = data.map((duplicate: { contact_id: string; confidence: string; match_reason: string }) => {\n        const contactDetails = contactsMap.get(duplicate.contact_id);\n        return {\n          ...duplicate,\n          // Add the contact details directly to the duplicate object\n          first_name: contactDetails?.first_name || null,\n          last_name: contactDetails?.last_name || null,\n          email: contactDetails?.email || null,\n          phone: contactDetails?.phone || null,\n          company: contactDetails?.company || null\n        };\n      });\n\n      return {\n        success: true,\n        message: `Found ${enrichedData.length} potential duplicate contacts`,\n        details: enrichedData\n      };\n    }\n\n    // No duplicates found\n    return {\n      success: true,\n      message: `Found ${data ? data.length : 0} potential duplicate contacts`,\n      details: data || []\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    console.error(`[contacts-management] Unexpected error in find duplicates: ${errorMessage}`);\n\n    return {\n      success: false,\n      message: `An unexpected error occurred: ${errorMessage}`,\n    };\n  }\n};\n\n// Get contact audit history\nconst getContactAuditHistory = async (\n  userId: string,\n  contactId: string,\n  limit: number = 50,\n  offset: number = 0\n): Promise<OperationResponse> => {\n  try {\n    // First verify that the contact belongs to the user\n    const { data: contactData, error: contactError } = await supabaseAdmin\n      .from('contacts')\n      .select('contact_id')\n      .eq('user_id', userId)\n      .eq('contact_id', contactId)\n      .single();\n\n    if (contactError || !contactData) {\n      console.error(`[contacts-management] Contact verification error: ${contactError?.message || 'Contact not found'}`);\n      return {\n        success: false,\n        message: `Contact not found or you don't have permission to access it`,\n      };\n    }\n\n    // Get the audit history\n    const { data, error } = await supabaseAdmin\n      .from('contacts_audit')\n      .select('*')\n      .eq('contact_id', contactId)\n      .order('changed_at', { ascending: false })\n      .range(offset, offset + limit - 1);\n\n    if (error) {\n      console.error(`[contacts-management] Audit history error: ${error.message}`);\n      return {\n        success: false,\n        message: `Failed to retrieve audit history: ${error.message}`,\n      };\n    }\n\n    return {\n      success: true,\n      message: `Retrieved ${data.length} audit records`,\n      details: data\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    console.error(`[contacts-management] Unexpected error in get audit history: ${errorMessage}`);\n    \n    return {\n      success: false,\n      message: `An unexpected error occurred: ${errorMessage}`,\n    };\n  }\n};\n\n// Get operations history\nconst getOperationsHistory = async (\n  userId: string,\n  limit: number = 50,\n  offset: number = 0\n): Promise<OperationResponse> => {\n  try {\n    // Use direct query instead of RPC for better compatibility\n    const { data, error } = await supabaseAdmin\n      .from('contact_operations_log')\n      .select('operation, operation_size, created_at')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1);\n\n    if (error) {\n      console.error(`[contacts-management] Operations history error: ${error.message}`);\n      return {\n        success: false,\n        message: `Failed to retrieve operations history: ${error.message}`,\n      };\n    }\n\n    return {\n      success: true,\n      message: `Retrieved ${data ? data.length : 0} operation records`,\n      details: data || []\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    console.error(`[contacts-management] Unexpected error in get operations history: ${errorMessage}`);\n\n    return {\n      success: false,\n      message: `An unexpected error occurred: ${errorMessage}`,\n    };\n  }\n};\n\n// Get import queue status\nconst getImportQueueStatus = async (\n  userId: string\n): Promise<OperationResponse> => {\n  try {\n    // Get the import queue status\n    const { data, error } = await supabaseAdmin\n      .from('import_processing_queue')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false })\n      .limit(10);\n\n    if (error) {\n      console.error(`[contacts-management] Import queue status error: ${error.message}`);\n      return {\n        success: false,\n        message: `Failed to retrieve import queue status: ${error.message}`,\n      };\n    }\n\n    // Get import history\n    const { data: historyData, error: historyError } = await supabaseAdmin\n      .from('import_history')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false })\n      .limit(10);\n\n    if (historyError) {\n      console.warn(`[contacts-management] Import history error: ${historyError.message}`);\n    }\n\n    return {\n      success: true,\n      message: `Retrieved import status`,\n      details: {\n        queue: data || [],\n        history: historyData || []\n      }\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    console.error(`[contacts-management] Unexpected error in get import queue status: ${errorMessage}`);\n    \n    return {\n      success: false,\n      message: `An unexpected error occurred: ${errorMessage}`,\n    };\n  }\n};\n\n// Main handler\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext) => {\n  const { httpMethod, path, queryStringParameters, body: eventBodyString } = event;\n  const logPrefix = `[contacts-management:${httpMethod}:${path}]`;\n\n  console.log(`${logPrefix} Invoked. Query: ${JSON.stringify(queryStringParameters || {})}`);\n\n  // 1. Authentication & authorization\n  const userId = await getAuthenticatedUserId(event);\n  if (!userId) {\n    return {\n      statusCode: 401,\n      body: JSON.stringify({ message: \"Authentication required.\" }),\n      headers: COMMON_HEADERS,\n    };\n  }\n\n  // Get operation from query string or path\n  const operation = queryStringParameters?.operation || ((): string => {\n    const pathParts = path.split('/').filter(Boolean);\n    return pathParts[pathParts.length - 1];\n  })();\n\n  // Handle POST requests for batch operations\n  if (httpMethod === 'POST') {\n    // Parse request body\n    let requestBody;\n    try {\n      if (!eventBodyString) {\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ message: \"Request body is required.\" }),\n          headers: COMMON_HEADERS,\n        };\n      }\n      requestBody = JSON.parse(eventBodyString);\n    } catch {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ message: \"Invalid JSON in request body.\" }),\n        headers: COMMON_HEADERS,\n      };\n    }\n\n    let response: OperationResponse;\n\n    // Route to appropriate operation\n    switch (operation) {\n      case 'import-status':\n        response = await getImportQueueStatus(userId);\n        break;\n\n      case 'operations-history': {\n        const opLimit = parseInt(queryStringParameters?.limit || '50', 10);\n        const opOffset = parseInt(queryStringParameters?.offset || '0', 10);\n        response = await getOperationsHistory(userId, opLimit, opOffset);\n        break;\n      }\n\n      case 'find-duplicates':\n        response = await findDuplicateContacts(\n          userId,\n          {\n            email: requestBody.email,\n            phone: requestBody.phone,\n            first_name: requestBody.first_name,\n            last_name: requestBody.last_name,\n            company: requestBody.company\n          }\n        );\n        break;\n\n      case 'batch-update':\n        if (!requestBody.contactIds || !Array.isArray(requestBody.contactIds) || requestBody.contactIds.length === 0) {\n          return {\n            statusCode: 400,\n            body: JSON.stringify({ message: \"contactIds array is required and must not be empty.\" }),\n            headers: COMMON_HEADERS,\n          };\n        }\n        if (!requestBody.updates || typeof requestBody.updates !== 'object') {\n          return {\n            statusCode: 400,\n            body: JSON.stringify({ message: \"updates object is required.\" }),\n            headers: COMMON_HEADERS,\n          };\n        }\n        response = await batchUpdateContacts(\n          userId, \n          requestBody.contactIds, \n          requestBody.updates, \n          requestBody.operationContext\n        );\n        break;\n\n      case 'batch-delete':\n        if (!requestBody.contactIds || !Array.isArray(requestBody.contactIds) || requestBody.contactIds.length === 0) {\n          return {\n            statusCode: 400,\n            body: JSON.stringify({ message: \"contactIds array is required and must not be empty.\" }),\n            headers: COMMON_HEADERS,\n          };\n        }\n        response = await batchDeleteContacts(\n          userId, \n          requestBody.contactIds, \n          requestBody.operationContext\n        );\n        break;\n\n      case 'batch-tag':\n        if (!requestBody.contactIds || !Array.isArray(requestBody.contactIds) || requestBody.contactIds.length === 0) {\n          return {\n            statusCode: 400,\n            body: JSON.stringify({ message: \"contactIds array is required and must not be empty.\" }),\n            headers: COMMON_HEADERS,\n          };\n        }\n        if (!requestBody.tagNames || !Array.isArray(requestBody.tagNames) || requestBody.tagNames.length === 0) {\n          return {\n            statusCode: 400,\n            body: JSON.stringify({ message: \"tagNames array is required and must not be empty.\" }),\n            headers: COMMON_HEADERS,\n          };\n        }\n        response = await batchTagContacts(\n          userId, \n          requestBody.contactIds, \n          requestBody.tagNames, \n          requestBody.operationContext\n        );\n        break;\n\n\n      default:\n        return {\n          statusCode: 404,\n          body: JSON.stringify({ message: `Unknown operation: ${operation}` }),\n          headers: COMMON_HEADERS,\n        };\n    }\n\n    const statusCode = response.success ? 200 : 400;\n    return {\n      statusCode,\n      body: JSON.stringify(response),\n      headers: COMMON_HEADERS,\n    };\n  }\n  \n  // Handle GET requests for information\n  else if (httpMethod === 'GET') {\n    let response: OperationResponse;\n\n    switch (operation) {\n      case 'audit-history': {\n        const contactId = queryStringParameters?.contact_id;\n        if (!contactId) {\n          return {\n            statusCode: 400,\n            body: JSON.stringify({ message: \"contact_id is required in query parameters.\" }),\n            headers: COMMON_HEADERS,\n          };\n        }\n        const limit = parseInt(queryStringParameters?.limit || '50', 10);\n        const offset = parseInt(queryStringParameters?.offset || '0', 10);\n\n        response = await getContactAuditHistory(userId, contactId, limit, offset);\n        break;\n      }\n\n      case 'operations-history': {\n        const opLimit = parseInt(queryStringParameters?.limit || '50', 10);\n        const opOffset = parseInt(queryStringParameters?.offset || '0', 10);\n\n        response = await getOperationsHistory(userId, opLimit, opOffset);\n        break;\n      }\n\n      case 'import-status':\n        response = await getImportQueueStatus(userId);\n        break;\n\n      case 'find-duplicates':\n        // For GET requests to find-duplicates, redirect to POST method\n        return {\n          statusCode: 405,\n          body: JSON.stringify({ message: \"Please use POST method for find-duplicates operation\" }),\n          headers: { ...COMMON_HEADERS, 'Allow': 'POST' },\n        };\n\n      default:\n        return {\n          statusCode: 404,\n          body: JSON.stringify({ message: `Unknown operation: ${operation}` }),\n          headers: COMMON_HEADERS,\n        };\n    }\n\n    const statusCode = response.success ? 200 : 400;\n    return {\n      statusCode,\n      body: JSON.stringify(response),\n      headers: COMMON_HEADERS,\n    };\n  }\n\n  // Handle other HTTP methods\n  return {\n    statusCode: 405,\n    body: JSON.stringify({ message: `Method ${httpMethod} Not Allowed` }),\n    headers: { ...COMMON_HEADERS, 'Allow': 'GET, POST' },\n  };\n};\n\nexport { handler };"]}
{"version":3,"file":"auth-check.js","sourceRoot":"","sources":["../../../src/backend/functions/auth-check.ts"],"names":[],"mappings":"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","sourcesContent":["// src/backend/functions/auth-check.ts\nimport type { Handler, HandlerEvent, HandlerContext, HandlerResponse } from \"@netlify/functions\";\nimport { supabaseAdmin, sendVerificationEmail, generateVerificationToken } from '../services';\nimport { createClient } from '@supabase/supabase-js';\nimport type { SupabaseClient } from '@supabase/supabase-js';\n\n/**\n * AuthStatus - Represents all possible authentication states for a user\n * - UNREGISTERED: No account exists with the provided email\n * - REGISTERED_UNVERIFIED: Account exists but email not verified in Supabase\n * - REGISTERED_VERIFIED_INCOMPLETE: Email verified in Supabase but custom verification not complete\n * - REGISTERED_FULLY_VERIFIED: User is fully verified and can log in\n */\ntype AuthStatus = 'UNREGISTERED' | 'REGISTERED_UNVERIFIED' | 'REGISTERED_VERIFIED_INCOMPLETE' | 'REGISTERED_FULLY_VERIFIED';\n\ninterface AuthCheckRequestBody {\n  email: string;\n  action?: 'check' | 'resend' | 'status'; // Default is 'check'\n}\n\ninterface AuthCheckResponse {\n  message: string;\n  status: AuthStatus;\n  userId?: string;\n  requiresVerification?: boolean;\n  verificationEmailSent?: boolean;\n  toast?: {\n    type: 'success' | 'error' | 'info' | 'warning';\n    message: string;\n  };\n  nextAction?: 'login' | 'verify' | 'signup';\n}\n\n// Create a dedicated client with explicitly disabled RLS for verification operations\nconst createRlsDisabledClient = (): SupabaseClient => {\n  const supabaseUrl = process.env.SUPABASE_URL;\n  const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n  \n  if (!supabaseUrl || !supabaseServiceRoleKey) {\n    console.error('Missing Supabase configuration');\n    throw new Error('Missing Supabase configuration');\n  }\n  \n  return createClient(supabaseUrl, supabaseServiceRoleKey, {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false,\n    },\n    db: {\n      schema: 'public',\n    },\n    global: {\n      headers: {\n        Authorization: `Bearer ${supabaseServiceRoleKey}`\n      }\n    }\n  });\n};\n\n/**\n * Centralized function to get a user's authentication status\n * This is the single source of truth for user verification status\n */\nasync function getUserAuthStatus(email: string): Promise<{ status: AuthStatus; userId?: string }> {\n  // Look up the user by email\n  // Using the admin API to search for user with this email\n  const { data: userData, error: userError } = await supabaseAdmin.auth.admin\n    .listUsers();\n\n  // Filter users manually to find the one with matching email\n  const matchingUsers = userData?.users?.filter(u =>\n    u.email?.toLowerCase() === email.toLowerCase()\n  ) || [];\n\n  // No user found\n  if (userError || !userData || matchingUsers.length === 0) {\n    return { status: 'UNREGISTERED' };\n  }\n\n  // Get the first user with this email\n  const user = matchingUsers[0];\n  \n  // Check if email is verified in Supabase\n  const isSupabaseVerified = !!user.email_confirmed_at;\n\n  // If email not verified in Supabase\n  if (!isSupabaseVerified) {\n    return { status: 'REGISTERED_UNVERIFIED', userId: user.id };\n  }\n\n  // Check custom verification status\n  const { data: profileData } = await supabaseAdmin\n    .from('profiles')\n    .select('is_custom_verified')\n    .eq('id', user.id)\n    .single();\n\n  const isCustomVerified = profileData?.is_custom_verified === true;\n\n  // If custom verification not complete\n  if (!isCustomVerified) {\n    return { status: 'REGISTERED_VERIFIED_INCOMPLETE', userId: user.id };\n  }\n\n  // User is fully verified\n  return { status: 'REGISTERED_FULLY_VERIFIED', userId: user.id };\n}\n\n/**\n * Send verification email to a user\n */\nasync function resendVerificationEmail(userId: string, email: string): Promise<{ success: boolean; error?: unknown }> {\n  try {\n    // Get user profile data for personalization\n    const { data: userData } = await supabaseAdmin.auth.admin.getUserById(userId);\n    const firstName = userData?.user?.user_metadata?.first_name || 'User';\n\n    // Generate verification token\n    const verificationToken = generateVerificationToken();\n    const noRlsClient = createRlsDisabledClient();\n    \n    // Delete existing verification codes for this user\n    await noRlsClient\n      .from('verification_codes')\n      .delete()\n      .eq('user_id', userId);\n    \n    // Create new verification code\n    const { error: codeError } = await noRlsClient\n      .from('verification_codes')\n      .insert({\n        user_id: userId,\n        email: email,\n        code: verificationToken,\n        created_at: new Date().toISOString(),\n        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 hours\n      });\n    \n    if (codeError) {\n      console.error(`Error creating verification code for user ${userId}:`, codeError);\n      return { success: false, error: codeError };\n    }\n    \n    // Send verification email\n    const emailResult = await sendVerificationEmail(\n      email,\n      firstName,\n      userId,\n      verificationToken\n    );\n    \n    return emailResult;\n  } catch (error) {\n    console.error(`Error sending verification email for user ${userId}:`, error);\n    return { success: false, error };\n  }\n}\n\n/**\n * Main handler function for the auth-check endpoint\n */\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext): Promise<HandlerResponse> => {\n  const requestId = `auth-check-${Date.now()}-${Math.floor(Math.random() * 10000)}`;\n  console.log(`[auth-check] Request ${requestId}: NEW REQUEST`);\n\n  // Only allow POST method\n  if (event.httpMethod !== \"POST\") {\n    console.log(`[auth-check] Request ${requestId}: Method not allowed: ${event.httpMethod}`);\n    return {\n      statusCode: 405,\n      body: JSON.stringify({\n        message: \"Method Not Allowed\",\n        toast: { type: \"error\", message: \"Invalid request method\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  // Parse request body\n  let requestBody: AuthCheckRequestBody;\n  try {\n    if (!event.body) {\n      console.error(`[auth-check] Request ${requestId}: Request body is missing.`);\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          message: \"Request body is missing.\",\n          toast: { type: \"error\", message: \"Missing request data\" }\n        }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n    requestBody = JSON.parse(event.body) as AuthCheckRequestBody;\n    console.log(`[auth-check] Request ${requestId}: Request parsed:`, { \n      email: requestBody.email ? 'Provided' : 'Missing',\n      action: requestBody.action || 'check'\n    });\n  } catch (error) {\n    console.error(`[auth-check] Request ${requestId}: Failed to parse request body:`, error);\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        message: \"Invalid request body. Failed to parse JSON.\",\n        toast: { type: \"error\", message: \"Invalid request format\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  const { email, action = 'check' } = requestBody;\n\n  if (!email) {\n    console.error(`[auth-check] Request ${requestId}: Missing email.`);\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        message: \"Missing required field: email is required.\",\n        toast: { type: \"error\", message: \"Email address is required\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  try {\n    // Get user authentication status\n    console.log(`[auth-check] Request ${requestId}: Getting auth status for email: (redacted for security)`);\n    const { status: authStatus, userId } = await getUserAuthStatus(email);\n    \n    console.log(`[auth-check] Request ${requestId}: User auth status:`, {\n      // Redact email and specific status for security (prevent user enumeration)\n      emailProvided: true,\n      hasUserId: !!userId,\n      // Still include status for debugging but with sensitive info redacted\n      statusCategory: authStatus === 'UNREGISTERED' ? 'requires_signup' : 'account_exists'\n    });\n\n    const response: AuthCheckResponse = {\n      message: '',\n      status: authStatus\n    };\n\n    // If email not registered\n    if (authStatus === 'UNREGISTERED') {\n      response.message = \"No account exists with this email address.\";\n      response.toast = { type: \"info\", message: \"Create an account to get started\" };\n      response.nextAction = 'signup';\n      return {\n        statusCode: 200,\n        body: JSON.stringify(response),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n\n    // If email registered but not verified or verification incomplete\n    if (authStatus === 'REGISTERED_UNVERIFIED' || authStatus === 'REGISTERED_VERIFIED_INCOMPLETE') {\n      response.userId = userId;\n      response.requiresVerification = true;\n      \n      // If just checking status\n      if (action === 'status' || action === 'check') {\n        response.message = \"Your account requires verification.\";\n        response.toast = { type: \"info\", message: \"Verification required to access your account\" };\n        response.nextAction = 'verify';\n      }\n      \n      // If requesting resend of verification email\n      if (action === 'resend' || action === 'check') {\n        if (!userId) {\n          console.error(`Cannot resend verification email - no userId available`);\n          return {\n            statusCode: 400,\n            body: JSON.stringify({\n              authenticated: false,\n              verified: false,\n              message: \"Cannot resend verification email - user ID not found\"\n            }),\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n              'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n              'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'\n            }\n          };\n        }\n        const emailResult = await resendVerificationEmail(userId, email);\n        response.verificationEmailSent = emailResult.success;\n        \n        if (emailResult.success) {\n          response.message = \"A new verification email has been sent. Please check your inbox.\";\n          response.toast = { type: \"success\", message: \"Verification email sent!\" };\n          response.nextAction = 'verify';\n        } else {\n          response.message = \"Failed to send verification email. Please try again later.\";\n          response.toast = { type: \"error\", message: \"Error sending verification email\" };\n          response.nextAction = 'verify';\n        }\n      }\n      \n      return {\n        statusCode: 200,\n        body: JSON.stringify(response),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n\n    // If fully verified\n    if (authStatus === 'REGISTERED_FULLY_VERIFIED') {\n      response.userId = userId;\n      response.requiresVerification = false;\n      response.message = \"Your account is fully verified. You can log in.\";\n      response.toast = { type: \"success\", message: \"Account verified. Please log in.\" };\n      response.nextAction = 'login';\n      \n      return {\n        statusCode: 200,\n        body: JSON.stringify(response),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n\n    // Shouldn't get here\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: \"Unknown authentication status.\",\n        toast: { type: \"error\", message: \"System error. Please contact support.\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  } catch (error: unknown) {\n    const typedError = error instanceof Error ? error : new Error(String(error));\n    console.error(`[auth-check] Request ${requestId}: Unexpected error:`, typedError.message, typedError.stack);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: \"An unexpected server error occurred.\",\n        toast: { type: \"error\", message: \"Server error during authentication check\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n};\n\nexport { handler, getUserAuthStatus };"]}
{"version":3,"file":"events.js","sourceRoot":"","sources":["../../../src/backend/functions/events.ts"],"names":[],"mappings":"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","sourcesContent":["import { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\n\n// Define Event interface for type safety\ninterface AppEvent { // Renamed to avoid conflict with DOM Event type if used in broader context\n  event_id: string;\n  title: string;\n  start_time: string;\n  end_time: string;\n  created_at: string;\n  updated_at: string;\n  user_id: string;\n  is_all_day: boolean;\n  description?: string;\n  location?: string;\n  // Add any other event-specific fields here, e.g., type, category, attendees\n}\n\n// In-memory mock database for testing events\nconst appEvents: AppEvent[] = [\n  {\n    event_id: \"test-app-event-1\",\n    title: \"Test App Event\",\n    start_time: new Date().toISOString(),\n    end_time: new Date(Date.now() + 7200000).toISOString(), // 2 hours later\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    user_id: \"test-user-events\",\n    is_all_day: false,\n    description: \"This is a test application event from events.ts\",\n    location: \"Events Test Location\"\n  }\n];\n\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext) => {\n  console.log(\"--- events.ts function invoked ---\");\n  console.log(\"HTTP Method:\", event.httpMethod);\n  console.log(\"Path:\", event.path);\n  console.log(\"Query Parameters:\", event.queryStringParameters);\n  console.log(\"Body:\", event.body ? event.body : \"No body\");\n\n  // Extract event ID from path if it exists (e.g., /events/{eventId})\n  const pathParts = event.path.split('/');\n  // Check if the last part is 'events' or if the path contains '/events/'\n  const isEventsEndpoint = pathParts[pathParts.length - 1] === 'events' ||\n                          event.path.includes('/events/') && pathParts[pathParts.length - 2] === 'events';\n  const eventIdFromPath = !isEventsEndpoint ? pathParts[pathParts.length - 1] : null;\n\n  // Set CORS headers\n  const headers = {\n    \"Access-Control-Allow-Origin\": \"*\", // Allow requests from any origin\n    \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\", // Specify allowed headers\n    \"Content-Type\": \"application/json\"\n  };\n\n  // Handle preflight OPTIONS request for CORS\n  if (event.httpMethod === 'OPTIONS') {\n    console.log(\"--- events.ts handling OPTIONS preflight request ---\");\n    return {\n      statusCode: 204, // No Content\n      headers: {\n        ...headers,\n        \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\" // Specify allowed methods\n      },\n      body: \"\"\n    };\n  }\n\n  try {\n    // Handle GET request - fetch all events or a specific event\n    if (event.httpMethod === 'GET') {\n      console.log(\"--- events.ts handling GET request ---\");\n      if (eventIdFromPath) {\n        console.log(`Fetching event with ID: ${eventIdFromPath}`);\n        const foundEvent = appEvents.find(e => e.event_id === eventIdFromPath);\n        if (!foundEvent) {\n          console.log(`Event with ID ${eventIdFromPath} not found.`);\n          return {\n            statusCode: 404,\n            headers,\n            body: JSON.stringify({ message: `Event with ID ${eventIdFromPath} not found` })\n          };\n        }\n        console.log(`Returning event: ${JSON.stringify(foundEvent)}`);\n        return {\n          statusCode: 200,\n          headers,\n          body: JSON.stringify(foundEvent)\n        };\n      }\n      console.log(`Returning all events: ${JSON.stringify(appEvents)}`);\n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify(appEvents)\n      };\n    }\n\n    // Handle POST request - create a new event\n    if (event.httpMethod === 'POST') {\n      console.log(\"--- events.ts handling POST request ---\");\n      if (!event.body) {\n        console.log(\"Error: Missing event data in request body.\");\n        return {\n          statusCode: 400,\n          headers,\n          body: JSON.stringify({ message: \"Missing event data in request body\" })\n        };\n      }\n      \n      let eventData: Omit<AppEvent, 'event_id' | 'created_at' | 'updated_at'>;\n      try {\n        eventData = JSON.parse(event.body);\n        console.log(`Parsed event data for POST: ${JSON.stringify(eventData)}`);\n      } catch (parseError: unknown) { // Explicitly type parseError\n        const message = (parseError instanceof Error) ? parseError.message : String(parseError);\n        console.error(\"Error parsing POST request body:\", message);\n        return {\n            statusCode: 400,\n            headers,\n            body: JSON.stringify({ message: \"Invalid JSON in request body\", error: message })\n        };\n      }\n\n      if (!eventData.title || !eventData.start_time || !eventData.end_time) {\n        console.log(\"Error: Missing required fields (title, start_time, end_time).\");\n        return {\n          statusCode: 400,\n          headers,\n          body: JSON.stringify({ message: \"Missing required fields: title, start_time, end_time\" })\n        };\n      }\n      \n      const newEvent: AppEvent = {\n        ...eventData,\n        event_id: `app-event-${Date.now()}-${Math.floor(Math.random() * 1000)}`,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        user_id: eventData.user_id || \"default-event-user\",\n        is_all_day: eventData.is_all_day || false\n      };\n      \n      appEvents.push(newEvent);\n      console.log(`New event created: ${JSON.stringify(newEvent)}`);\n      return {\n        statusCode: 201, // Created\n        headers,\n        body: JSON.stringify(newEvent)\n      };\n    }\n\n    // Handle PUT request - update an existing event\n    if (event.httpMethod === 'PUT') {\n      console.log(\"--- events.ts handling PUT request ---\");\n      if (!eventIdFromPath) {\n        console.log(\"Error: Missing event ID in path for PUT request.\");\n        return {\n          statusCode: 400,\n          headers,\n          body: JSON.stringify({ message: \"Missing event ID in path\" })\n        };\n      }\n      if (!event.body) {\n        console.log(\"Error: Missing event data in request body for PUT request.\");\n        return {\n          statusCode: 400,\n          headers,\n          body: JSON.stringify({ message: \"Missing event data in request body\" })\n        };\n      }\n      \n      const eventIndex = appEvents.findIndex(e => e.event_id === eventIdFromPath);\n      if (eventIndex === -1) {\n        console.log(`Event with ID ${eventIdFromPath} not found for PUT request.`);\n        return {\n          statusCode: 404,\n          headers,\n          body: JSON.stringify({ message: `Event with ID ${eventIdFromPath} not found` })\n        };\n      }\n      \n      let updateData: Partial<Omit<AppEvent, 'event_id' | 'created_at' | 'updated_at'>>;\n       try {\n        updateData = JSON.parse(event.body);\n        console.log(`Parsed update data for PUT: ${JSON.stringify(updateData)}`);\n      } catch (parseError: unknown) { // Explicitly type parseError\n        const message = (parseError instanceof Error) ? parseError.message : String(parseError);\n        console.error(\"Error parsing PUT request body:\", message);\n        return {\n            statusCode: 400,\n            headers,\n            body: JSON.stringify({ message: \"Invalid JSON in request body\", error: message })\n        };\n      }\n\n      const updatedEvent: AppEvent = {\n        ...appEvents[eventIndex],\n        ...updateData,\n        updated_at: new Date().toISOString()\n      };\n      \n      appEvents[eventIndex] = updatedEvent;\n      console.log(`Event with ID ${eventIdFromPath} updated: ${JSON.stringify(updatedEvent)}`);\n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify(updatedEvent)\n      };\n    }\n\n    // Handle DELETE request - delete an event\n    if (event.httpMethod === 'DELETE') {\n      console.log(\"--- events.ts handling DELETE request ---\");\n      if (!eventIdFromPath) {\n        console.log(\"Error: Missing event ID in path for DELETE request.\");\n        return {\n          statusCode: 400,\n          headers,\n          body: JSON.stringify({ message: \"Missing event ID in path\" })\n        };\n      }\n      \n      const eventIndex = appEvents.findIndex(e => e.event_id === eventIdFromPath);\n      if (eventIndex === -1) {\n        console.log(`Event with ID ${eventIdFromPath} not found for DELETE request.`);\n        return {\n          statusCode: 404,\n          headers,\n          body: JSON.stringify({ message: `Event with ID ${eventIdFromPath} not found` })\n        };\n      }\n      \n      appEvents.splice(eventIndex, 1);\n      console.log(`Event with ID ${eventIdFromPath} deleted.`);\n      return {\n        statusCode: 200, // Or 204 No Content if not returning a message\n        headers,\n        body: JSON.stringify({ success: true, message: `Event with ID ${eventIdFromPath} deleted` })\n      };\n    }\n\n    // Handle unsupported HTTP methods\n    console.log(`Unsupported HTTP method: ${event.httpMethod}`);\n    return {\n      statusCode: 405, // Method Not Allowed\n      headers,\n      body: JSON.stringify({ message: `Method ${event.httpMethod} Not Allowed` })\n    };\n\n  } catch (error: unknown) { // Explicitly type error\n    const errorMessage = (error instanceof Error) ? error.message : String(error);\n    console.error(\"Error in events.ts function:\", errorMessage, error);\n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({ message: \"Internal server error\", error: errorMessage })\n    };\n  }\n};\n\nexport { handler };\n"]}
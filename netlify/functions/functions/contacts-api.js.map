{"version":3,"file":"contacts-api.js","sourceRoot":"","sources":["../../../src/backend/functions/contacts-api.ts"],"names":[],"mappings":";;;AACA,2CAAuC;AACvC,0CAA4C;AAC5C,+DAA4D;AA6B5D,mEAAmE;AACnE,MAAM,kBAAkB,GAAG,CAAC,KAAmB,EAAiB,EAAE;IAChE,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,EAAE,aAAa,CAAC;IAEhD,IAAI,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;QACnD,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,0BAA0B;QACjE,IAAI,CAAC;YACH,MAAM,YAAY,GAAG,IAAA,sBAAS,EAAa,KAAK,CAAC,CAAC;YAClD,IAAI,YAAY,IAAI,YAAY,CAAC,GAAG,EAAE,CAAC;gBACrC,OAAO,CAAC,GAAG,CAAC,8CAA8C,YAAY,CAAC,GAAG,YAAY,CAAC,CAAC;gBACxF,OAAO,YAAY,CAAC,GAAG,CAAC;YAC1B,CAAC;iBAAM,CAAC;gBACN,OAAO,CAAC,IAAI,CAAC,0EAA0E,EAAE,YAAY,CAAC,CAAC;gBACvG,OAAO,IAAI,CAAC;YACd,CAAC;QACH,CAAC;QAAC,OAAO,KAAc,EAAE,CAAC;YACxB,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,oCAAoC,CAAC;YACnG,OAAO,CAAC,KAAK,CAAC,yCAAyC,YAAY,EAAE,EAAE,KAAK,CAAC,CAAC;YAC9E,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IACD,OAAO,CAAC,IAAI,CAAC,oEAAoE,CAAC,CAAC;IACnF,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,uBAAuB;AACvB,MAAM,WAAW,GAAG,CAAC,IAAY,EAAW,EAAE;IAC5C,IAAI,CAAC,IAAI;QAAE,OAAO,KAAK,CAAC;IACxB,MAAM,SAAS,GAAG,+EAA+E,CAAC;IAClG,OAAO,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9B,CAAC,CAAC;AAEF,iCAAiC;AACjC,MAAM,WAAW,GAAG;IAClB,6BAA6B,EAAE,GAAG;IAClC,8BAA8B,EAAE,6BAA6B;IAC7D,8BAA8B,EAAE,iCAAiC;IACjE,cAAc,EAAE,kBAAkB;CACnC,CAAC;AAEF,6DAA6D;AAC7D,KAAK,UAAU,oBAAoB,CACjC,SAAiB,EACjB,KAAa,EACb,SAAiB;IAEjB,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,wBAAwB,EAAE,KAAK,CAAC,CAAC;IAE3E,IAAI,CAAC;QACH,4EAA4E;QAE5E,8DAA8D;QAC9D,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,0BAA0B,EAAE;YAClF,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,yBAAyB,IAAI,EAAE;gBACrD,eAAe,EAAE,UAAU,OAAO,CAAC,GAAG,CAAC,yBAAyB,IAAI,EAAE,EAAE;gBACxE,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,CAAC;SAChC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,uBAAuB,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QAC5D,CAAC;QAED,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrC,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,+BAA+B,CAAC,CAAC;QAC3E,OAAO,MAAM,CAAC;IAChB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,qBAAqB,SAAS,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACnF,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC;AAED,8DAA8D;AAC9D,KAAK,UAAU,mBAAmB,CAChC,SAAiB,EACjB,MAAc,EACd,SAAiB,EACjB,aAAsB;IAEtB,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG;;iBAEJ,MAAM,OAAO,SAAS,MAAM,aAAa,IAAI,MAAM;KAC/D,CAAC;QAEF,MAAM,oBAAoB,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,SAAS,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACpF,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,yDAAyD;QACzD,OAAO,CAAC,KAAK,CAAC,oDAAoD,EAAE,KAAK,CAAC,CAAC;IAC7E,CAAC;AACH,CAAC;AAED,iDAAiD;AACjD,MAAM,OAAO,GAAY,KAAK,EAAE,KAAmB,EAAE,QAAwB,EAA4B,EAAE;IACzG,gCAAgC;IAChC,MAAM,SAAS,GAAG,OAAO,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;IACrF,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,mCAAmC,KAAK,CAAC,UAAU,WAAW,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;IAEtH,sBAAsB;IACtB,MAAM,mBAAmB,GAAG,sBAAsB,CAAC;IAEnD,oCAAoC;IACpC,IAAI,KAAK,CAAC,UAAU,KAAK,SAAS,EAAE,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,sCAAsC,CAAC,CAAC;QAClF,OAAO;YACL,UAAU,EAAE,GAAG;YACf,OAAO,EAAE,WAAW;YACpB,IAAI,EAAE,EAAE;SACT,CAAC;IACJ,CAAC;IAED,uCAAuC;IACvC,MAAM,MAAM,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACzC,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,CAAC,KAAK,CAAC,qBAAqB,SAAS,0DAA0D,CAAC,CAAC;QACxG,OAAO;YACL,UAAU,EAAE,GAAG;YACf,OAAO,EAAE,WAAW;YACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,0CAA0C,EAAE,CAAC;SAC9E,CAAC;IACJ,CAAC;IAED,mDAAmD;IACnD,iFAAiF;IACjF,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC3C,MAAM,SAAS,GAAG,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAExD,4EAA4E;IAC5E,MAAM,YAAY,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC;IAE5C,IAAI,CAAC;QACH,kCAAkC;QAClC,IAAI,KAAK,CAAC,UAAU,KAAK,KAAK,EAAE,CAAC;YAC/B,qCAAqC;YACrC,IAAI,YAAY,EAAE,CAAC;gBACjB,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,uCAAuC,SAAS,EAAE,CAAC,CAAC;gBAE9F,MAAM,KAAK,GAAG;;gCAEU,SAAS,oBAAoB,MAAM;;SAE1D,CAAC;gBAEF,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC,mBAAmB,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;gBAEjF,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;oBAC9B,OAAO;wBACL,UAAU,EAAE,GAAG;wBACf,OAAO,EAAE,WAAW;wBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;qBACvD,CAAC;gBACJ,CAAC;gBAED,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,WAAW;oBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBAChC,CAAC;YACJ,CAAC;YACD,qCAAqC;iBAChC,CAAC;gBACJ,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,sCAAsC,CAAC,CAAC;gBAElF,yBAAyB;gBACzB,MAAM,WAAW,GAAG,KAAK,CAAC,qBAAqB,IAAI,EAAE,CAAC;gBACtD,MAAM,UAAU,GAAG,WAAW,CAAC,WAAW,CAAC;gBAE3C,IAAI,KAAK,GAAG,EAAE,CAAC;gBAEf,IAAI,UAAU,EAAE,CAAC;oBACf,oCAAoC;oBACpC,KAAK,GAAG;;+BAEa,MAAM;4DACuB,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;sCACpD,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;qCAC/B,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;iCAClC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;mCAC5B,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;+CAClB,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;;;;yCAIpC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;wCAC/B,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;;;;;;WAM3D,CAAC;gBACJ,CAAC;qBAAM,CAAC;oBACN,gDAAgD;oBAChD,KAAK,GAAG;;+BAEa,MAAM;;;WAG1B,CAAC;gBACJ,CAAC;gBAED,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC,mBAAmB,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;gBAEjF,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,WAAW;oBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,EAAE,CAAC;iBACnC,CAAC;YACJ,CAAC;QACH,CAAC;QAED,uCAAuC;aAClC,IAAI,KAAK,CAAC,UAAU,KAAK,MAAM,EAAE,CAAC;YACrC,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,wBAAwB,CAAC,CAAC;YAEpE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;gBAChB,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,WAAW;oBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC;iBAC1D,CAAC;YACJ,CAAC;YAED,MAAM,OAAO,GAAY,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAEhD,gDAAgD;YAChD,OAAO,CAAC,OAAO,GAAG,MAAM,CAAC;YAEzB,yEAAyE;YACzE,gEAAgE;YAChE,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;gBAC5D,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,WAAW;oBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;iBAC5D,CAAC;YACJ,CAAC;YAED,yDAAyD;YAEzD,uCAAuC;YACvC,MAAM,WAAW,GAAG;gBAClB,OAAO,EAAE,MAAM;gBACf,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,WAAW,EAAE,OAAO,CAAC,WAAW,IAAI,IAAI;gBACxC,SAAS,EAAE,OAAO,CAAC,SAAS,IAAI,IAAI;gBACpC,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAI,IAAI;gBAClC,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,IAAI;gBAC5B,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,IAAI;gBAC5B,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,IAAI;gBAChC,SAAS,EAAE,OAAO,CAAC,SAAS,IAAI,IAAI;gBACpC,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,IAAI;gBAChC,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,IAAI;gBAChC,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;gBAC1F,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,IAAI;aAC7B,CAAC;YAEF,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,+BAA+B,EAAE,WAAW,CAAC,CAAC;YAExF,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,wBAAa;iBAChD,IAAI,CAAC,UAAU,CAAC;iBAChB,MAAM,CAAC,WAAW,CAAC;iBACnB,MAAM,EAAE;iBACR,MAAM,EAAE,CAAC;YAEZ,IAAI,KAAK,EAAE,CAAC;gBACV,OAAO,CAAC,KAAK,CAAC,qBAAqB,SAAS,2BAA2B,EAAE,KAAK,CAAC,CAAC;gBAChF,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,WAAW;oBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,0BAA0B,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;iBACpF,CAAC;YACJ,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,iCAAiC,EAAE,MAAM,CAAC,CAAC;YAErF,kCAAkC;YAClC,MAAM,mBAAmB,CAAC,mBAAmB,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;YAEpE,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,OAAO,EAAE,WAAW;gBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;aAC7B,CAAC;QACJ,CAAC;QAED,kCAAkC;aAC7B,IAAI,KAAK,CAAC,UAAU,KAAK,KAAK,EAAE,CAAC;YACpC,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,WAAW;oBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,oCAAoC,EAAE,CAAC;iBACxE,CAAC;YACJ,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,+BAA+B,SAAS,EAAE,CAAC,CAAC;YAEtF,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;gBAChB,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,WAAW;oBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC;iBAC1D,CAAC;YACJ,CAAC;YAED,MAAM,OAAO,GAAY,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAEhD,yDAAyD;YACzD,IAAI,aAAa,GAAG,MAAM,CAAC;YAC3B,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;gBACnC,IAAI,OAAO,CAAC,QAAQ,KAAK,IAAI,EAAE,CAAC;oBAC9B,aAAa,GAAG,MAAM,CAAC;gBACzB,CAAC;qBAAM,CAAC;oBACN,IAAI,CAAC;wBACH,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;wBACxC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC;4BAC3B,aAAa,GAAG,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;wBAChE,CAAC;oBACH,CAAC;oBAAC,MAAM,CAAC;wBACP,OAAO,CAAC,IAAI,CAAC,qBAAqB,SAAS,8BAA8B,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;wBAC7F,aAAa,GAAG,MAAM,CAAC;oBACzB,CAAC;gBACH,CAAC;YACH,CAAC;YAED,4DAA4D;YAC5D,MAAM,SAAS,GAAG,EAAE,CAAC;YAErB,iEAAiE;YACjE,IAAI,OAAO,CAAC,UAAU,KAAK,SAAS,EAAE,CAAC;gBACrC,SAAS,CAAC,IAAI,CAAC,gBAAgB,OAAO,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;YACzH,CAAC;YACD,IAAI,OAAO,CAAC,WAAW,KAAK,SAAS,EAAE,CAAC;gBACtC,SAAS,CAAC,IAAI,CAAC,iBAAiB,OAAO,CAAC,WAAW,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;YAC5H,CAAC;YACD,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,EAAE,CAAC;gBACpC,SAAS,CAAC,IAAI,CAAC,eAAe,OAAO,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;YACtH,CAAC;YACD,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;gBACnC,SAAS,CAAC,IAAI,CAAC,cAAc,OAAO,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;YACnH,CAAC;YACD,IAAI,OAAO,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;gBAChC,SAAS,CAAC,IAAI,CAAC,WAAW,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;YAC1G,CAAC;YACD,IAAI,OAAO,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;gBAChC,SAAS,CAAC,IAAI,CAAC,WAAW,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;YAC1G,CAAC;YACD,IAAI,OAAO,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;gBAClC,SAAS,CAAC,IAAI,CAAC,aAAa,OAAO,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;YAChH,CAAC;YACD,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,EAAE,CAAC;gBACpC,SAAS,CAAC,IAAI,CAAC,eAAe,OAAO,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;YACtH,CAAC;YACD,IAAI,OAAO,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;gBAClC,SAAS,CAAC,IAAI,CAAC,aAAa,OAAO,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;YAChH,CAAC;YACD,IAAI,OAAO,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;gBAClC,SAAS,CAAC,IAAI,CAAC,aAAa,OAAO,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;YAChH,CAAC;YACD,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;gBACnC,SAAS,CAAC,IAAI,CAAC,cAAc,aAAa,EAAE,CAAC,CAAC;YAChD,CAAC;YACD,IAAI,OAAO,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;gBAChC,SAAS,CAAC,IAAI,CAAC,WAAW,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;YAC1G,CAAC;YAED,yCAAyC;YACzC,SAAS,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAErC,yDAAyD;YACzD,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC,CAAC,+BAA+B;gBAC3D,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,WAAW;oBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,qCAAqC,EAAE,CAAC;iBACzE,CAAC;YACJ,CAAC;YAED,MAAM,KAAK,GAAG;;cAEN,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;8BACJ,SAAS,oBAAoB,MAAM;;OAE1D,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC,mBAAmB,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;YAEjF,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;gBAC9B,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,WAAW;oBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,iEAAiE,EAAE,CAAC;iBACrG,CAAC;YACJ,CAAC;YAED,kCAAkC;YAClC,MAAM,mBAAmB,CAAC,mBAAmB,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;YAEpE,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,OAAO,EAAE,WAAW;gBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aAChC,CAAC;QACJ,CAAC;QAED,0DAA0D;aACrD,IAAI,KAAK,CAAC,UAAU,KAAK,QAAQ,EAAE,CAAC;YACvC,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,WAAW;oBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,yBAAyB,EAAE,CAAC;iBAC7D,CAAC;YACJ,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,6BAA6B,CAAC,CAAC;YAEzE,+CAA+C;YAC/C,IAAI,iBAAoC,CAAC;YACzC,IAAI,WAAW,GAAG,EAAE,CAAC;YAErB,qEAAqE;YACrE,IAAI,CAAC,YAAY,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC;gBAChC,IAAI,CAAC;oBACH,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBACpC,WAAW,GAAG,IAAI,CAAC,YAAY,IAAI,EAAE,CAAC;gBACxC,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACX,OAAO,CAAC,IAAI,CAAC,qBAAqB,SAAS,wCAAwC,EAAE,CAAC,CAAC,CAAC;gBAC1F,CAAC;YACH,CAAC;YAED,mEAAmE;YACnE,IAAI,YAAY,EAAE,CAAC;gBACjB,iBAAiB,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC;gBAC1D,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,gCAAgC,SAAS,EAAE,CAAC,CAAC;YACzF,CAAC;iBAAM,IAAI,WAAW,EAAE,CAAC;gBACvB,iBAAiB,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;gBACxD,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,kCAAkC,WAAW,EAAE,CAAC,CAAC;YAC7F,CAAC;iBAAM,CAAC;gBACN,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,WAAW;oBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,6CAA6C,EAAE,CAAC;iBACjF,CAAC;YACJ,CAAC;YAED,iDAAiD;YACjD,IAAI,CAAC;gBACH,MAAM,YAAY,GAAG,MAAM,+BAAc,CAAC,aAAa,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;gBAEnF,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;oBAC1B,yDAAyD;oBACzD,IAAI,UAAU,GAAG,GAAG,CAAC;oBACrB,IAAI,YAAY,CAAC,KAAK,EAAE,IAAI,KAAK,mBAAmB,EAAE,CAAC;wBACrD,UAAU,GAAG,GAAG,CAAC;oBACnB,CAAC;yBAAM,IAAI,CAAC,YAAY,EAAE,cAAc,EAAE,iBAAiB,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,IAAI,EAAE,CAAC,EAAE,CAAC;wBACtG,UAAU,GAAG,GAAG,CAAC;oBACnB,CAAC;oBAED,OAAO;wBACL,UAAU;wBACV,OAAO,EAAE,WAAW;wBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;4BACnB,OAAO,EAAE,YAAY,CAAC,KAAK,EAAE,OAAO,IAAI,0BAA0B;4BAClE,KAAK,EAAE,YAAY,CAAC,KAAK,EAAE,IAAI,IAAI,eAAe;yBACnD,CAAC;qBACH,CAAC;gBACJ,CAAC;gBAED,sBAAsB;gBACtB,OAAO,CAAC,GAAG,CAAC,qBAAqB,SAAS,iCAAiC,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;gBAEhG,kCAAkC;gBAClC,MAAM,mBAAmB,CAAC,mBAAmB,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;gBAEpE,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,WAAW;oBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wBACnB,OAAO,EAAE,8BAA8B;wBACvC,UAAU,EAAE,YAAY,CAAC,IAAI,EAAE,UAAU;qBAC1C,CAAC;iBACH,CAAC;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,qBAAqB,SAAS,6CAA6C,EAAE,KAAK,CAAC,CAAC;gBAElG,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,WAAW;oBACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wBACnB,OAAO,EAAE,sDAAsD;wBAC/D,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;qBAChE,CAAC;iBACH,CAAC;YACJ,CAAC;QACH,CAAC;QAED,wBAAwB;aACnB,CAAC;YACJ,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,OAAO,EAAE;oBACP,GAAG,WAAW;oBACd,OAAO,EAAE,iCAAiC;iBAC3C;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC;aACxD,CAAC;QACJ,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,qBAAqB,SAAS,6BAA6B,EAAE,KAAK,CAAC,CAAC;QAElF,IAAI,UAAU,GAAG,GAAG,CAAC;QACrB,IAAI,YAAY,GAAG,uBAAuB,CAAC;QAE3C,IAAI,KAAK,YAAY,WAAW,EAAE,CAAC;YACjC,UAAU,GAAG,GAAG,CAAC;YACjB,YAAY,GAAG,8BAA8B,CAAC;QAChD,CAAC;aAAM,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;YAClC,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC;QAC/B,CAAC;QAED,OAAO;YACL,UAAU;YACV,OAAO,EAAE,WAAW;YACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC;SAChD,CAAC;IACJ,CAAC;AACH,CAAC,CAAC;AAEO,0BAAO","sourcesContent":["import type { Handler, HandlerEvent, HandlerContext, HandlerResponse } from \"@netlify/functions\";\nimport { jwtDecode } from 'jwt-decode';\nimport { supabaseAdmin } from '../services';\nimport { contactService } from '../services/contactService';\nimport { ContactIdentifier } from '../types/domain';\n\n// Define the interface for contact data\ninterface Contact {\n  contact_id?: string;\n  user_id: string;\n  first_name: string | null;\n  middle_name?: string | null;\n  last_name: string | null;\n  nickname?: string | null;\n  email: string | null;\n  phone: string | null;\n  company: string | null;\n  job_title?: string | null;\n  address?: string | null;\n  website?: string | null;\n  birthday?: string | null;\n  notes: string | null;\n  created_at?: string;\n  updated_at?: string;\n}\n\n// Interface for the decoded JWT payload\ninterface DecodedJwt {\n  sub?: string; // Subject (user ID)\n  [key: string]: string | number | boolean | null | undefined; // Allow other claims\n}\n\n// Get authenticated user ID from JWT token in authorization header\nconst getUserIdFromEvent = (event: HandlerEvent): string | null => { \n  const authHeader = event.headers?.authorization;\n\n  if (authHeader && authHeader.startsWith('Bearer ')) {\n    const token = authHeader.substring(7); // Remove \"Bearer \" prefix\n    try {\n      const decodedToken = jwtDecode<DecodedJwt>(token);\n      if (decodedToken && decodedToken.sub) {\n        console.log(`[contacts-api.ts] Extracted user ID (sub): ${decodedToken.sub} from JWT.`);\n        return decodedToken.sub;\n      } else {\n        console.warn('[contacts-api.ts] JWT decoded but did not contain a sub (user ID) claim.', decodedToken);\n        return null;\n      }\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error during JWT decoding.';\n      console.error(`[contacts-api.ts] Error decoding JWT: ${errorMessage}`, error);\n      return null;\n    }\n  }\n  console.warn('[contacts-api.ts] No Authorization header with Bearer token found.');\n  return null; \n};\n\n// Validate UUID format\nconst isValidUUID = (uuid: string): boolean => {\n  if (!uuid) return false;\n  const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\n  return uuidRegex.test(uuid);\n};\n\n// CORS headers for all responses\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Content-Type': 'application/json'\n};\n\n// Handler to execute SQL queries using the Supabase MCP tool\nasync function executeSupabaseQuery(\n  projectId: string,\n  query: string,\n  requestId: string\n): Promise<Contact[]> {\n  console.log(`[contacts-api.ts][${requestId}] Executing SQL query:`, query);\n\n  try {\n    // Note: This section validates Supabase connection before raw SQL execution\n\n    // For now, let's execute the query directly with the REST API\n    const response = await fetch(`${process.env.SUPABASE_URL}/rest/v1/rpc/execute_sql`, {\n      method: 'POST',\n      headers: {\n        'apikey': process.env.SUPABASE_SERVICE_ROLE_KEY || '',\n        'Authorization': `Bearer ${process.env.SUPABASE_SERVICE_ROLE_KEY || ''}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ query })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const result = await response.json();\n    console.log(`[contacts-api.ts][${requestId}] Query executed successfully`);\n    return result;\n  } catch (error) {\n    console.error(`[contacts-api.ts][${requestId}] Error executing SQL query:`, error);\n    throw error;\n  }\n}\n\n// Log contact operations to help with analytics and debugging\nasync function logContactOperation(\n  projectId: string,\n  userId: string,\n  operation: string,\n  operationSize?: number\n): Promise<void> {\n  try {\n    const logQuery = `\n      INSERT INTO public.contact_operations_log (user_id, operation, operation_size)\n      VALUES ('${userId}', '${operation}', ${operationSize || 'NULL'});\n    `;\n    \n    await executeSupabaseQuery(projectId, logQuery, `log_${operation}_${Date.now()}`);\n  } catch (error) {\n    // Log but don't fail the main operation if logging fails\n    console.error(`[contacts-api.ts] Failed to log contact operation:`, error);\n  }\n}\n\n// Main handler function for the Netlify function\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext): Promise<HandlerResponse> => {\n  // Unique request ID for logging\n  const requestId = `req_${Date.now()}_${Math.random().toString(36).substring(2, 10)}`;\n  console.log(`[contacts-api.ts][${requestId}] Function invoked with method: ${event.httpMethod}, path: ${event.path}`);\n  \n  // Supabase project ID\n  const SUPABASE_PROJECT_ID = 'tzwipktdyvijxsdpkfco';\n  \n  // Handle OPTIONS preflight requests\n  if (event.httpMethod === 'OPTIONS') {\n    console.log(`[contacts-api.ts][${requestId}] Handling OPTIONS preflight request`);\n    return {\n      statusCode: 204,\n      headers: corsHeaders,\n      body: ''\n    };\n  }\n  \n  // Authentication: Get user ID from JWT\n  const userId = getUserIdFromEvent(event);\n  if (!userId) {\n    console.error(`[contacts-api.ts][${requestId}] Authentication failed: No valid user ID found in token`);\n    return {\n      statusCode: 401,\n      headers: corsHeaders,\n      body: JSON.stringify({ message: 'Authentication required. Please sign in.' })\n    };\n  }\n  \n  // Extract contactId from path parameter if present\n  // Example: /.netlify/functions/contacts-api/123e4567-e89b-12d3-a456-426614174000\n  const pathSegments = event.path.split('/');\n  const contactId = pathSegments[pathSegments.length - 1];\n  \n  // Only consider valid UUIDs as contactId, otherwise treat as a regular path\n  const hasContactId = isValidUUID(contactId);\n  \n  try {\n    // 1. GET Request - Fetch contacts\n    if (event.httpMethod === 'GET') {\n      // Case 1: Get specific contact by ID\n      if (hasContactId) {\n        console.log(`[contacts-api.ts][${requestId}] Getting specific contact with ID: ${contactId}`);\n        \n        const query = `\n          SELECT * FROM public.contacts \n          WHERE contact_id = '${contactId}' AND user_id = '${userId}'\n          LIMIT 1;\n        `;\n        \n        const result = await executeSupabaseQuery(SUPABASE_PROJECT_ID, query, requestId);\n        \n        if (!result || !result.length) {\n          return {\n            statusCode: 404,\n            headers: corsHeaders,\n            body: JSON.stringify({ message: 'Contact not found' })\n          };\n        }\n        \n        return {\n          statusCode: 200,\n          headers: corsHeaders,\n          body: JSON.stringify(result[0])\n        };\n      } \n      // Case 2: Get all contacts or search\n      else {\n        console.log(`[contacts-api.ts][${requestId}] Getting contacts list or searching`);\n        \n        // Parse query parameters\n        const queryParams = event.queryStringParameters || {};\n        const searchTerm = queryParams.search_term;\n        \n        let query = '';\n        \n        if (searchTerm) {\n          // Use full text search if available\n          query = `\n            SELECT * FROM public.contacts \n            WHERE user_id = '${userId}' AND (\n              fts_document @@ plainto_tsquery('english', '${searchTerm.replace(/'/g, \"''\")}')\n              OR first_name ILIKE '%${searchTerm.replace(/'/g, \"''\")}%'\n              OR last_name ILIKE '%${searchTerm.replace(/'/g, \"''\")}%'\n              OR email ILIKE '%${searchTerm.replace(/'/g, \"''\")}%'\n              OR company ILIKE '%${searchTerm.replace(/'/g, \"''\")}%'\n              OR COALESCE(phone, '') ILIKE '%${searchTerm.replace(/'/g, \"''\")}%'\n            )\n            ORDER BY \n              CASE \n                WHEN first_name ILIKE '${searchTerm.replace(/'/g, \"''\")}%' THEN 1\n                WHEN last_name ILIKE '${searchTerm.replace(/'/g, \"''\")}%' THEN 2\n                ELSE 3\n              END,\n              first_name, \n              last_name\n            LIMIT 100;\n          `;\n        } else {\n          // Return all contacts (with a reasonable limit)\n          query = `\n            SELECT * FROM public.contacts \n            WHERE user_id = '${userId}'\n            ORDER BY first_name, last_name\n            LIMIT 500;\n          `;\n        }\n        \n        const result = await executeSupabaseQuery(SUPABASE_PROJECT_ID, query, requestId);\n        \n        return {\n          statusCode: 200,\n          headers: corsHeaders,\n          body: JSON.stringify(result || [])\n        };\n      }\n    }\n    \n    // 2. POST Request - Create new contact\n    else if (event.httpMethod === 'POST') {\n      console.log(`[contacts-api.ts][${requestId}] Creating new contact`);\n      \n      if (!event.body) {\n        return {\n          statusCode: 400,\n          headers: corsHeaders,\n          body: JSON.stringify({ message: 'Missing request body' })\n        };\n      }\n      \n      const contact: Contact = JSON.parse(event.body);\n      \n      // Associate contact with the authenticated user\n      contact.user_id = userId;\n      \n      // Validate required fields based on the assistant-contacts schema update\n      // Only first_name is truly required now, but we'll check for it\n      if (!contact.first_name || contact.first_name.trim() === '') {\n        return {\n          statusCode: 400,\n          headers: corsHeaders,\n          body: JSON.stringify({ message: 'First name is required' })\n        };\n      }\n      \n      // Birthday will be processed by Supabase client directly\n      \n      // Create contact using Supabase client\n      const contactData = {\n        user_id: userId,\n        first_name: contact.first_name,\n        middle_name: contact.middle_name || null,\n        last_name: contact.last_name || null,\n        nickname: contact.nickname || null,\n        email: contact.email || null,\n        phone: contact.phone || null,\n        company: contact.company || null,\n        job_title: contact.job_title || null,\n        address: contact.address || null,\n        website: contact.website || null,\n        birthday: contact.birthday ? new Date(contact.birthday).toISOString().split('T')[0] : null,\n        notes: contact.notes || null\n      };\n\n      console.log(`[contacts-api.ts][${requestId}] Creating contact with data:`, contactData);\n\n      const { data: result, error } = await supabaseAdmin\n        .from('contacts')\n        .insert(contactData)\n        .select()\n        .single();\n\n      if (error) {\n        console.error(`[contacts-api.ts][${requestId}] Error creating contact:`, error);\n        return {\n          statusCode: 500,\n          headers: corsHeaders,\n          body: JSON.stringify({ message: 'Failed to create contact', error: error.message })\n        };\n      }\n\n      console.log(`[contacts-api.ts][${requestId}] Successfully created contact:`, result);\n      \n      // Log the operation for analytics\n      await logContactOperation(SUPABASE_PROJECT_ID, userId, 'create', 1);\n      \n      return {\n        statusCode: 201,\n        headers: corsHeaders,\n        body: JSON.stringify(result)\n      };\n    }\n    \n    // 3. PUT Request - Update contact\n    else if (event.httpMethod === 'PUT') {\n      if (!hasContactId) {\n        return {\n          statusCode: 400,\n          headers: corsHeaders,\n          body: JSON.stringify({ message: 'Contact ID is required for updates' })\n        };\n      }\n      \n      console.log(`[contacts-api.ts][${requestId}] Updating contact with ID: ${contactId}`);\n      \n      if (!event.body) {\n        return {\n          statusCode: 400,\n          headers: corsHeaders,\n          body: JSON.stringify({ message: 'Missing request body' })\n        };\n      }\n      \n      const updates: Contact = JSON.parse(event.body);\n      \n      // Process birthday to ensure it's in a valid date format\n      let birthdayValue = 'NULL';\n      if (updates.birthday !== undefined) {\n        if (updates.birthday === null) {\n          birthdayValue = 'NULL';\n        } else {\n          try {\n            const date = new Date(updates.birthday);\n            if (!isNaN(date.getTime())) {\n              birthdayValue = `'${date.toISOString().split('T')[0]}'::date`;\n            }\n          } catch {\n            console.warn(`[contacts-api.ts][${requestId}] Invalid birthday format: ${updates.birthday}`);\n            birthdayValue = 'NULL';\n          }\n        }\n      }\n      \n      // Build SQL SET clause dynamically based on provided fields\n      const setClause = [];\n      \n      // Only include fields that were actually provided in the request\n      if (updates.first_name !== undefined) {\n        setClause.push(`first_name = ${updates.first_name !== null ? `'${updates.first_name.replace(/'/g, \"''\")}'` : 'NULL'}`);\n      }\n      if (updates.middle_name !== undefined) {\n        setClause.push(`middle_name = ${updates.middle_name !== null ? `'${updates.middle_name.replace(/'/g, \"''\")}'` : 'NULL'}`);\n      }\n      if (updates.last_name !== undefined) {\n        setClause.push(`last_name = ${updates.last_name !== null ? `'${updates.last_name.replace(/'/g, \"''\")}'` : 'NULL'}`);\n      }\n      if (updates.nickname !== undefined) {\n        setClause.push(`nickname = ${updates.nickname !== null ? `'${updates.nickname.replace(/'/g, \"''\")}'` : 'NULL'}`);\n      }\n      if (updates.email !== undefined) {\n        setClause.push(`email = ${updates.email !== null ? `'${updates.email.replace(/'/g, \"''\")}'` : 'NULL'}`);\n      }\n      if (updates.phone !== undefined) {\n        setClause.push(`phone = ${updates.phone !== null ? `'${updates.phone.replace(/'/g, \"''\")}'` : 'NULL'}`);\n      }\n      if (updates.company !== undefined) {\n        setClause.push(`company = ${updates.company !== null ? `'${updates.company.replace(/'/g, \"''\")}'` : 'NULL'}`);\n      }\n      if (updates.job_title !== undefined) {\n        setClause.push(`job_title = ${updates.job_title !== null ? `'${updates.job_title.replace(/'/g, \"''\")}'` : 'NULL'}`);\n      }\n      if (updates.address !== undefined) {\n        setClause.push(`address = ${updates.address !== null ? `'${updates.address.replace(/'/g, \"''\")}'` : 'NULL'}`);\n      }\n      if (updates.website !== undefined) {\n        setClause.push(`website = ${updates.website !== null ? `'${updates.website.replace(/'/g, \"''\")}'` : 'NULL'}`);\n      }\n      if (updates.birthday !== undefined) {\n        setClause.push(`birthday = ${birthdayValue}`);\n      }\n      if (updates.notes !== undefined) {\n        setClause.push(`notes = ${updates.notes !== null ? `'${updates.notes.replace(/'/g, \"''\")}'` : 'NULL'}`);\n      }\n      \n      // Always update the updated_at timestamp\n      setClause.push(`updated_at = now()`);\n      \n      // If no fields were provided for update, return an error\n      if (setClause.length === 1) { // Only updated_at would be set\n        return {\n          statusCode: 400,\n          headers: corsHeaders,\n          body: JSON.stringify({ message: 'No valid fields provided for update' })\n        };\n      }\n      \n      const query = `\n        UPDATE public.contacts \n        SET ${setClause.join(', ')} \n        WHERE contact_id = '${contactId}' AND user_id = '${userId}'\n        RETURNING *;\n      `;\n      \n      const result = await executeSupabaseQuery(SUPABASE_PROJECT_ID, query, requestId);\n      \n      if (!result || !result.length) {\n        return {\n          statusCode: 404,\n          headers: corsHeaders,\n          body: JSON.stringify({ message: 'Contact not found or user does not have permission to update it' })\n        };\n      }\n      \n      // Log the operation for analytics\n      await logContactOperation(SUPABASE_PROJECT_ID, userId, 'update', 1);\n      \n      return {\n        statusCode: 200,\n        headers: corsHeaders,\n        body: JSON.stringify(result[0])\n      };\n    }\n    \n    // 4. DELETE Request - Delete contact using ContactService\n    else if (event.httpMethod === 'DELETE') {\n      if (!userId) {\n        return {\n          statusCode: 401,\n          headers: corsHeaders,\n          body: JSON.stringify({ message: 'Authentication required' })\n        };\n      }\n\n      console.log(`[contacts-api.ts][${requestId}] Processing DELETE request`);\n      \n      // Determine the appropriate contact identifier\n      let contactIdentifier: ContactIdentifier;\n      let contactName = '';\n      \n      // First try to get a contact name from request body if ID is missing\n      if (!hasContactId && event.body) {\n        try {\n          const body = JSON.parse(event.body);\n          contactName = body.contact_name || '';\n        } catch (e) {\n          console.warn(`[contacts-api.ts][${requestId}] Error parsing body for contact name:`, e);\n        }\n      }\n      \n      // Create the appropriate identifier based on available information\n      if (hasContactId) {\n        contactIdentifier = { type: 'id', contact_id: contactId };\n        console.log(`[contacts-api.ts][${requestId}] Using ID-based identifier: ${contactId}`);\n      } else if (contactName) {\n        contactIdentifier = { type: 'name', name: contactName };\n        console.log(`[contacts-api.ts][${requestId}] Using name-based identifier: ${contactName}`);\n      } else {\n        return {\n          statusCode: 400,\n          headers: corsHeaders,\n          body: JSON.stringify({ message: 'Contact ID or name is required for deletion' })\n        };\n      }\n      \n      // Use our contact service to handle the deletion\n      try {\n        const deleteResult = await contactService.deleteContact(userId, contactIdentifier);\n        \n        if (!deleteResult.success) {\n          // Handle deletion failures with appropriate status codes\n          let statusCode = 500;\n          if (deleteResult.error?.code === 'CONTACT_NOT_FOUND') {\n            statusCode = 404;\n          } else if (['INVALID_ID', 'INVALID_NAME', 'MISSING_USER_ID'].includes(deleteResult.error?.code || '')) {\n            statusCode = 400;\n          }\n          \n          return {\n            statusCode,\n            headers: corsHeaders,\n            body: JSON.stringify({ \n              message: deleteResult.error?.message || 'Failed to delete contact',\n              error: deleteResult.error?.code || 'UNKNOWN_ERROR'\n            })\n          };\n        }\n        \n        // Deletion successful\n        console.log(`[contacts-api.ts][${requestId}] Successfully deleted contact:`, deleteResult.data);\n        \n        // Log the operation for analytics\n        await logContactOperation(SUPABASE_PROJECT_ID, userId, 'delete', 1);\n        \n        return {\n          statusCode: 200,\n          headers: corsHeaders,\n          body: JSON.stringify({ \n            message: 'Contact deleted successfully',\n            contact_id: deleteResult.data?.contact_id\n          })\n        };\n      } catch (error) {\n        console.error(`[contacts-api.ts][${requestId}] Unexpected error during contact deletion:`, error);\n        \n        return {\n          statusCode: 500,\n          headers: corsHeaders,\n          body: JSON.stringify({ \n            message: 'An unexpected error occurred during contact deletion',\n            error: error instanceof Error ? error.message : 'Unknown error'\n          })\n        };\n      }\n    }\n    \n    // 5. Unsupported method\n    else {\n      return {\n        statusCode: 405,\n        headers: {\n          ...corsHeaders,\n          'Allow': 'GET, POST, PUT, DELETE, OPTIONS'\n        },\n        body: JSON.stringify({ message: 'Method not allowed' })\n      };\n    }\n  } catch (error) {\n    console.error(`[contacts-api.ts][${requestId}] Error processing request:`, error);\n    \n    let statusCode = 500;\n    let errorMessage = 'Internal server error';\n    \n    if (error instanceof SyntaxError) {\n      statusCode = 400;\n      errorMessage = 'Invalid JSON in request body';\n    } else if (error instanceof Error) {\n      errorMessage = error.message;\n    }\n    \n    return {\n      statusCode,\n      headers: corsHeaders,\n      body: JSON.stringify({ message: errorMessage })\n    };\n  }\n};\n\nexport { handler }; "]}
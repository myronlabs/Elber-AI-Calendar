{"version":3,"file":"alerts.js","sourceRoot":"","sources":["../../../src/backend/functions/alerts.ts"],"names":[],"mappings":";;;AACA,2CAAqD;AACrD,6DAA0D;AAM1D,4CAIyB;AASzB,MAAM,UAAU,GAAG,QAAQ,CAAC;AAC5B,MAAM,cAAc,GAAG;IACrB,cAAc,EAAE,kBAAkB;IAClC,6BAA6B,EAAE,GAAG;IAClC,8BAA8B,EAAE,6BAA6B;IAC7D,8BAA8B,EAAE,wCAAwC;CAChE,CAAC;AAEX;;GAEG;AACH,MAAM,0BAA0B,GAAG,CAAC,IAAa,EAAsB,EAAE;IACvE,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;QACtC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,OAAO,GAAG,IAA+B,CAAC;IAEhD,kBAAkB;IAClB,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;QACvF,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACtE,CAAC;IAED,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,kBAAS,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAuB,CAAC,EAAE,CAAC;QAC/F,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;IAC1E,CAAC;IAED,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE,CAAC;QAC9D,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;IACpE,CAAC;IAED,0CAA0C;IAC1C,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC;YAC7B,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAAC,MAAM,CAAC;QACP,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;IAC9D,CAAC;IAED,kCAAkC;IAClC,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,sBAAa,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAyB,CAAC,EAAE,CAAC;QAChH,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;IAC5D,CAAC;IAED,IAAI,OAAO,CAAC,WAAW,KAAK,SAAS,IAAI,OAAO,CAAC,WAAW,KAAK,IAAI,IAAI,OAAO,OAAO,CAAC,WAAW,KAAK,QAAQ,EAAE,CAAC;QACjH,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IAC1D,CAAC;IAED,IAAI,OAAO,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,CAAC,UAAU,KAAK,IAAI,IAAI,OAAO,OAAO,CAAC,UAAU,KAAK,QAAQ,EAAE,CAAC;QAC9G,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;IAC9D,CAAC;IAED,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,IAAI,OAAO,CAAC,QAAQ,KAAK,IAAI,IAAI,OAAO,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE,CAAC;QACxG,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;IAC5D,CAAC;IAED,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,IAAI,OAAO,OAAO,CAAC,SAAS,KAAK,SAAS,EAAE,CAAC;QAC9E,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACjD,CAAC;IAED,IAAI,OAAO,CAAC,eAAe,KAAK,SAAS,IAAI,OAAO,CAAC,eAAe,KAAK,IAAI,IAAI,OAAO,OAAO,CAAC,eAAe,KAAK,QAAQ,EAAE,CAAC;QAC7H,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;IAC9D,CAAC;IAED,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC;QACxD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,EAAE,CAAC;YACxF,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IAED,OAAO;QACL,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE;QAC3B,WAAW,EAAE,OAAO,CAAC,WAAwC;QAC7D,UAAU,EAAE,OAAO,CAAC,UAAuB;QAC3C,QAAQ,EAAE,OAAO,CAAC,QAAQ;QAC1B,QAAQ,EAAE,OAAO,CAAC,QAAqC;QACvD,UAAU,EAAE,OAAO,CAAC,UAAuC;QAC3D,QAAQ,EAAE,OAAO,CAAC,QAAqC;QACvD,SAAS,EAAE,OAAO,CAAC,SAAgC;QACnD,eAAe,EAAE,OAAO,CAAC,eAA4C;QACrE,QAAQ,EAAE,OAAO,CAAC,QAAsD;QACxE,IAAI,EAAE,OAAO,CAAC,IAAmC;KAClD,CAAC;AACJ,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,0BAA0B,GAAG,CAAC,IAAa,EAAsB,EAAE;IACvE,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;QACtC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,OAAO,GAAG,IAA+B,CAAC;IAEhD,qEAAqE;IACrE,IAAI,OAAO,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;QAChC,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;YACrE,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;QAClE,CAAC;IACH,CAAC;IAED,IAAI,OAAO,CAAC,UAAU,KAAK,SAAS,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,kBAAS,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAuB,CAAC,EAAE,CAAC;QAC5G,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACtE,CAAC;IAED,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,oBAAW,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAqB,CAAC,EAAE,CAAC;QACxG,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;IACpE,CAAC;IAED,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,sBAAa,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAyB,CAAC,EAAE,CAAC;QAChH,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IACxE,CAAC;IAED,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;QACnC,IAAI,OAAO,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE,CAAC;YACzC,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;QAChE,CAAC;QACD,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC3C,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC;gBAC7B,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;YAClC,CAAC;QACH,CAAC;QAAC,MAAM,CAAC;YACP,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;IAED,OAAO,OAA6B,CAAC;AACvC,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,kBAAkB,GAAG,CAAC,MAAc,EAAE,IAA8B,EAAkB,EAAE;IAC5F,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;IAErC,QAAQ,MAAM,EAAE,CAAC;QACf,KAAK,SAAS;YACZ,OAAO;gBACL,MAAM,EAAE,oBAAW,CAAC,SAAS;gBAC7B,YAAY,EAAE,GAAG;gBACjB,aAAa,EAAE,IAAI;aACpB,CAAC;QAEJ,KAAK,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,KAAK,GAAG,IAAI,EAAE,KAAe,IAAI,CAAC,CAAC;YACzC,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YAClF,OAAO;gBACL,MAAM,EAAE,oBAAW,CAAC,OAAO;gBAC3B,aAAa,EAAE,WAAW;gBAC1B,YAAY,EAAE,IAAI;aACnB,CAAC;QACJ,CAAC;QAED,KAAK,YAAY,CAAC;QAClB,KAAK,UAAU;YACb,OAAO;gBACL,MAAM,EAAE,oBAAW,CAAC,OAAO;gBAC3B,aAAa,EAAE,IAAI;gBACnB,YAAY,EAAE,IAAI;aACnB,CAAC;QAEJ;YACE,MAAM,IAAI,KAAK,CAAC,mBAAmB,MAAM,EAAE,CAAC,CAAC;IACjD,CAAC;AACH,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,aAAa,GAAG,KAAK,EAAE,KAAmB,EAAE,QAAwB,EAAwB,EAAE;IAClG,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,eAAe,EAAE,GAAG,KAAK,CAAC;IACjF,MAAM,SAAS,GAAG,cAAc,UAAU,IAAI,IAAI,GAAG,CAAC;IAEtD,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,oBAAoB,IAAI,CAAC,SAAS,CAAC,qBAAqB,IAAI,EAAE,CAAC,kBAAkB,eAAe,EAAE,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC;IAEzI,wBAAwB;IACxB,IAAI,UAAU,KAAK,SAAS,EAAE,CAAC;QAC7B,OAAO;YACL,UAAU,EAAE,GAAG;YACf,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,EAAE;SACT,CAAC;IACJ,CAAC;IAED,6DAA6D;IAC7D,MAAM,SAAS,GAAG,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IACzC,MAAM,OAAO,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAEnF,IAAI,CAAC;QACH,iBAAiB;QACjB,MAAM,MAAM,GAAG,MAAM,IAAA,0BAAkB,EAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,0BAA0B,CAAC,CAAC;YACtD,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,yBAAyB,EAAE,CAAC;aAC3D,CAAC;QACJ,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,wBAAwB,MAAM,EAAE,CAAC,CAAC;QAE1D,+BAA+B;QAC/B,QAAQ,UAAU,EAAE,CAAC;YACnB,KAAK,KAAK;gBACR,OAAO,MAAM,eAAe,CAAC,MAAM,EAAE,qBAAqB,EAAE,SAAS,CAAC,CAAC;YAEzE,KAAK,MAAM;gBACT,OAAO,MAAM,iBAAiB,CAAC,MAAM,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC;YAErE,KAAK,KAAK,CAAC;YACX,KAAK,OAAO;gBACV,IAAI,CAAC,OAAO,EAAE,CAAC;oBACb,OAAO;wBACL,UAAU,EAAE,GAAG;wBACf,OAAO,EAAE,cAAc;wBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,kCAAkC,EAAE,CAAC;qBACpE,CAAC;gBACJ,CAAC;gBACD,OAAO,MAAM,iBAAiB,CAAC,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC;YAE9E,KAAK,QAAQ;gBACX,IAAI,CAAC,OAAO,EAAE,CAAC;oBACb,OAAO;wBACL,UAAU,EAAE,GAAG;wBACf,OAAO,EAAE,cAAc;wBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,mCAAmC,EAAE,CAAC;qBACrE,CAAC;gBACJ,CAAC;gBACD,OAAO,MAAM,iBAAiB,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;YAE7D;gBACE,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,cAAc;oBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,UAAU,UAAU,cAAc,EAAE,CAAC;iBACpE,CAAC;QACN,CAAC;IAEH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,oBAAoB,EAAE,KAAK,CAAC,CAAC;QACvD,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;QAC9E,OAAO;YACL,UAAU,EAAE,GAAG;YACf,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,uBAAuB,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC;SAChF,CAAC;IACJ,CAAC;AACH,CAAC,CAAC;AAEF;;GAEG;AACH,KAAK,UAAU,eAAe,CAC5B,MAAc,EACd,WAAsD,EACtD,SAAiB;IAEjB,IAAI,CAAC;QACH,IAAI,KAAK,GAAG,6BAAa;aACtB,IAAI,CAAC,UAAU,CAAC;aAChB,MAAM,CAAC,GAAG,CAAC;aACX,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;aACrB,KAAK,CAAC,UAAU,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAE1C,4BAA4B;QAC5B,IAAI,WAAW,EAAE,MAAM,IAAI,WAAW,CAAC,MAAM,KAAK,KAAK,EAAE,CAAC;YACxD,KAAK,GAAG,KAAK,CAAC,EAAE,CAAC,QAAQ,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;QACjD,CAAC;QAED,IAAI,WAAW,EAAE,UAAU,IAAI,WAAW,CAAC,UAAU,KAAK,KAAK,EAAE,CAAC;YAChE,KAAK,GAAG,KAAK,CAAC,EAAE,CAAC,YAAY,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;QACzD,CAAC;QAED,IAAI,WAAW,EAAE,QAAQ,IAAI,WAAW,CAAC,QAAQ,KAAK,KAAK,EAAE,CAAC;YAC5D,KAAK,GAAG,KAAK,CAAC,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC/D,CAAC;QAED,aAAa;QACb,MAAM,KAAK,GAAG,QAAQ,CAAC,WAAW,EAAE,KAAK,IAAI,IAAI,CAAC,CAAC;QACnD,MAAM,MAAM,GAAG,QAAQ,CAAC,WAAW,EAAE,MAAM,IAAI,GAAG,CAAC,CAAC;QACpD,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;QAEhD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM,KAAK,CAAC;QAE3C,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,kBAAkB,EAAE,KAAK,CAAC,CAAC;YACrD,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;aAClF,CAAC;QACJ,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,yBAAyB,IAAI,EAAE,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC;QAE7E,OAAO;YACL,UAAU,EAAE,GAAG;YACf,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,MAAM,EAAE,IAAI,IAAI,EAAE;gBAClB,KAAK,EAAE,KAAK,IAAI,CAAC;gBACjB,KAAK;gBACL,MAAM;aACP,CAAC;SACH,CAAC;IAEJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,4BAA4B,EAAE,KAAK,CAAC,CAAC;QAC/D,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;QAC9E,OAAO;YACL,UAAU,EAAE,GAAG;YACf,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC;SACjF,CAAC;IACJ,CAAC;AACH,CAAC;AAED;;GAEG;AACH,KAAK,UAAU,iBAAiB,CAC9B,MAAc,EACd,eAA8B,EAC9B,SAAiB;IAEjB,IAAI,CAAC;QACH,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,0BAA0B,EAAE,CAAC;aAC5D,CAAC;QACJ,CAAC;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAChD,MAAM,gBAAgB,GAAG,0BAA0B,CAAC,WAAW,CAAC,CAAC;QAEjE,kCAAkC;QAClC,MAAM,SAAS,GAAG;YAChB,OAAO,EAAE,MAAM;YACf,KAAK,EAAE,gBAAgB,CAAC,KAAK;YAC7B,WAAW,EAAE,gBAAgB,CAAC,WAAW,IAAI,IAAI;YACjD,UAAU,EAAE,gBAAgB,CAAC,UAAU;YACvC,QAAQ,EAAE,gBAAgB,CAAC,QAAQ;YACnC,QAAQ,EAAE,gBAAgB,CAAC,QAAQ,IAAI,sBAAa,CAAC,MAAM;YAC3D,UAAU,EAAE,gBAAgB,CAAC,UAAU,IAAI,IAAI;YAC/C,QAAQ,EAAE,gBAAgB,CAAC,QAAQ,IAAI,IAAI;YAC3C,SAAS,EAAE,gBAAgB,CAAC,SAAS,IAAI,KAAK;YAC9C,eAAe,EAAE,gBAAgB,CAAC,eAAe,IAAI,IAAI;YACzD,QAAQ,EAAE,gBAAgB,CAAC,QAAQ,IAAI,IAAI;YAC3C,IAAI,EAAE,gBAAgB,CAAC,IAAI,IAAI,IAAI;YACnC,MAAM,EAAE,oBAAW,CAAC,OAAO;SAC5B,CAAC;QAEF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,6BAAa;aACxC,IAAI,CAAC,UAAU,CAAC;aAChB,MAAM,CAAC,SAAS,CAAC;aACjB,MAAM,EAAE;aACR,MAAM,EAAE,CAAC;QAEZ,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,kBAAkB,EAAE,KAAK,CAAC,CAAC;YACrD,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;aAClF,CAAC;QACJ,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,gCAAgC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEzE,OAAO;YACL,UAAU,EAAE,GAAG;YACf,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;SACtC,CAAC;IAEJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACjE,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;QAC9E,OAAO;YACL,UAAU,EAAE,GAAG;YACf,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC;SACjF,CAAC;IACJ,CAAC;AACH,CAAC;AAED;;GAEG;AACH,KAAK,UAAU,iBAAiB,CAC9B,MAAc,EACd,OAAe,EACf,eAA8B,EAC9B,SAAiB;IAEjB,IAAI,CAAC;QACH,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,0BAA0B,EAAE,CAAC;aAC5D,CAAC;QACJ,CAAC;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAEhD,6DAA6D;QAC7D,IAAI,WAAW,CAAC,MAAM,EAAE,CAAC;YACvB,MAAM,aAAa,GAAG,kBAAkB,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YAE1E,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,6BAAa;iBACxC,IAAI,CAAC,UAAU,CAAC;iBAChB,MAAM,CAAC,EAAE,GAAG,aAAa,EAAE,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC;iBAClE,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC;iBACvB,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;iBACrB,MAAM,EAAE;iBACR,MAAM,EAAE,CAAC;YAEZ,IAAI,KAAK,EAAE,CAAC;gBACV,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,6BAA6B,EAAE,KAAK,CAAC,CAAC;gBAChE,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,cAAc;oBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,aAAa,WAAW,CAAC,MAAM,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;iBACjG,CAAC;YACJ,CAAC;YAED,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,cAAc;oBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC;iBACnD,CAAC;YACJ,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,kCAAkC,WAAW,CAAC,MAAM,cAAc,OAAO,EAAE,CAAC,CAAC;YAErG,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;aACtC,CAAC;QACJ,CAAC;QAED,iBAAiB;QACjB,MAAM,gBAAgB,GAAG,0BAA0B,CAAC,WAAW,CAAC,CAAC;QACjE,MAAM,UAAU,GAAG;YACjB,GAAG,gBAAgB;YACnB,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACrC,CAAC;QAEF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,6BAAa;aACxC,IAAI,CAAC,UAAU,CAAC;aAChB,MAAM,CAAC,UAAU,CAAC;aAClB,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC;aACvB,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;aACrB,MAAM,EAAE;aACR,MAAM,EAAE,CAAC;QAEZ,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,kBAAkB,EAAE,KAAK,CAAC,CAAC;YACrD,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;aAClF,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC;aACnD,CAAC;QACJ,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,gCAAgC,OAAO,EAAE,CAAC,CAAC;QAEnE,OAAO;YACL,UAAU,EAAE,GAAG;YACf,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;SACtC,CAAC;IAEJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACjE,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;QAC9E,OAAO;YACL,UAAU,EAAE,GAAG;YACf,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC;SACjF,CAAC;IACJ,CAAC;AACH,CAAC;AAED;;GAEG;AACH,KAAK,UAAU,iBAAiB,CAC9B,MAAc,EACd,OAAe,EACf,SAAiB;IAEjB,IAAI,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,6BAAa;aACxC,IAAI,CAAC,UAAU,CAAC;aAChB,MAAM,EAAE;aACR,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC;aACvB,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;aACrB,MAAM,EAAE;aACR,MAAM,EAAE,CAAC;QAEZ,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,kBAAkB,EAAE,KAAK,CAAC,CAAC;YACrD,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;aAClF,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC;aACnD,CAAC;QACJ,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,gCAAgC,OAAO,EAAE,CAAC,CAAC;QAEnE,OAAO;YACL,UAAU,EAAE,GAAG;YACf,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC;SACnF,CAAC;IAEJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACjE,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;QAC9E,OAAO;YACL,UAAU,EAAE,GAAG;YACf,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC;SACjF,CAAC;IACJ,CAAC;AACH,CAAC;AAED,4BAA4B;AAC5B,MAAM,OAAO,GAAY,aAAa,CAAC;AAE9B,0BAAO","sourcesContent":["import type { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport { getUserIdFromEvent } from './_shared/utils';\nimport { supabaseAdmin } from '../services/supabaseAdmin';\nimport type { \n  Alert, \n  CreateAlertPayload, \n  UpdateAlertPayload\n} from '../types/domain';\nimport { \n  AlertType, \n  AlertStatus, \n  AlertPriority \n} from '../types/domain';\n\n// Define proper response type for our handlers\ninterface ApiResponse {\n  statusCode: number;\n  headers: Record<string, string>;\n  body: string;\n}\n\nconst TABLE_NAME = 'alerts';\nconst COMMON_HEADERS = { \n  'Content-Type': 'application/json',\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, PATCH, DELETE, OPTIONS'\n} as const;\n\n/**\n * Validates alert data for creation\n */\nconst validateCreateAlertPayload = (data: unknown): CreateAlertPayload => {\n  if (!data || typeof data !== 'object') {\n    throw new Error('Request body must be an object');\n  }\n\n  const payload = data as Record<string, unknown>;\n\n  // Required fields\n  if (!payload.title || typeof payload.title !== 'string' || payload.title.trim() === '') {\n    throw new Error('title is required and must be a non-empty string');\n  }\n\n  if (!payload.alert_type || !Object.values(AlertType).includes(payload.alert_type as AlertType)) {\n    throw new Error('alert_type is required and must be a valid AlertType');\n  }\n\n  if (!payload.due_date || typeof payload.due_date !== 'string') {\n    throw new Error('due_date is required and must be an ISO string');\n  }\n\n  // Validate due_date is a valid ISO string\n  try {\n    const dueDate = new Date(payload.due_date);\n    if (isNaN(dueDate.getTime())) {\n      throw new Error('Invalid date');\n    }\n  } catch {\n    throw new Error('due_date must be a valid ISO date string');\n  }\n\n  // Optional fields with validation\n  if (payload.priority !== undefined && !Object.values(AlertPriority).includes(payload.priority as AlertPriority)) {\n    throw new Error('priority must be a valid AlertPriority');\n  }\n\n  if (payload.description !== undefined && payload.description !== null && typeof payload.description !== 'string') {\n    throw new Error('description must be a string or null');\n  }\n\n  if (payload.contact_id !== undefined && payload.contact_id !== null && typeof payload.contact_id !== 'string') {\n    throw new Error('contact_id must be a string UUID or null');\n  }\n\n  if (payload.event_id !== undefined && payload.event_id !== null && typeof payload.event_id !== 'string') {\n    throw new Error('event_id must be a string UUID or null');\n  }\n\n  if (payload.recurring !== undefined && typeof payload.recurring !== 'boolean') {\n    throw new Error('recurring must be a boolean');\n  }\n\n  if (payload.recurrence_rule !== undefined && payload.recurrence_rule !== null && typeof payload.recurrence_rule !== 'string') {\n    throw new Error('recurrence_rule must be a string or null');\n  }\n\n  if (payload.tags !== undefined && payload.tags !== null) {\n    if (!Array.isArray(payload.tags) || !payload.tags.every(tag => typeof tag === 'string')) {\n      throw new Error('tags must be an array of strings or null');\n    }\n  }\n\n  return {\n    title: payload.title.trim(),\n    description: payload.description as string | null | undefined,\n    alert_type: payload.alert_type as AlertType,\n    due_date: payload.due_date,\n    priority: payload.priority as AlertPriority | undefined,\n    contact_id: payload.contact_id as string | null | undefined,\n    event_id: payload.event_id as string | null | undefined,\n    recurring: payload.recurring as boolean | undefined,\n    recurrence_rule: payload.recurrence_rule as string | null | undefined,\n    metadata: payload.metadata as Record<string, unknown> | null | undefined,\n    tags: payload.tags as string[] | null | undefined\n  };\n};\n\n/**\n * Validates alert data for updates\n */\nconst validateUpdateAlertPayload = (data: unknown): UpdateAlertPayload => {\n  if (!data || typeof data !== 'object') {\n    throw new Error('Request body must be an object');\n  }\n\n  const payload = data as Record<string, unknown>;\n\n  // All fields are optional for updates, but must be valid if provided\n  if (payload.title !== undefined) {\n    if (typeof payload.title !== 'string' || payload.title.trim() === '') {\n      throw new Error('title must be a non-empty string if provided');\n    }\n  }\n\n  if (payload.alert_type !== undefined && !Object.values(AlertType).includes(payload.alert_type as AlertType)) {\n    throw new Error('alert_type must be a valid AlertType if provided');\n  }\n\n  if (payload.status !== undefined && !Object.values(AlertStatus).includes(payload.status as AlertStatus)) {\n    throw new Error('status must be a valid AlertStatus if provided');\n  }\n\n  if (payload.priority !== undefined && !Object.values(AlertPriority).includes(payload.priority as AlertPriority)) {\n    throw new Error('priority must be a valid AlertPriority if provided');\n  }\n\n  if (payload.due_date !== undefined) {\n    if (typeof payload.due_date !== 'string') {\n      throw new Error('due_date must be an ISO string if provided');\n    }\n    try {\n      const dueDate = new Date(payload.due_date);\n      if (isNaN(dueDate.getTime())) {\n        throw new Error('Invalid date');\n      }\n    } catch {\n      throw new Error('due_date must be a valid ISO date string if provided');\n    }\n  }\n\n  return payload as UpdateAlertPayload;\n};\n\n/**\n * Processes alert action operations (dismiss, snooze, reactivate)\n */\nconst processAlertAction = (action: string, data?: Record<string, unknown>): Partial<Alert> => {\n  const now = new Date().toISOString();\n\n  switch (action) {\n    case 'dismiss':\n      return {\n        status: AlertStatus.DISMISSED,\n        dismissed_at: now,\n        snoozed_until: null\n      };\n\n    case 'snooze': {\n      const hours = data?.hours as number || 1;\n      const snoozeUntil = new Date(Date.now() + (hours * 60 * 60 * 1000)).toISOString();\n      return {\n        status: AlertStatus.SNOOZED,\n        snoozed_until: snoozeUntil,\n        dismissed_at: null\n      };\n    }\n\n    case 'reactivate':\n    case 'activate':\n      return {\n        status: AlertStatus.PENDING,\n        snoozed_until: null,\n        dismissed_at: null\n      };\n\n    default:\n      throw new Error(`Unknown action: ${action}`);\n  }\n};\n\n/**\n * Internal handler with proper typing\n */\nconst alertsHandler = async (event: HandlerEvent, _context: HandlerContext): Promise<ApiResponse> => {\n  const { httpMethod, path, queryStringParameters, body: eventBodyString } = event;\n  const logPrefix = `[alerts.ts:${httpMethod}:${path}]`;\n\n  console.log(`${logPrefix} Invoked. Query: ${JSON.stringify(queryStringParameters || {})}. Body length: ${eventBodyString?.length || 0}`);\n\n  // Handle CORS preflight\n  if (httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers: COMMON_HEADERS,\n      body: ''\n    };\n  }\n\n  // Extract alert ID from path for individual alert operations\n  const pathParts = path?.split('/') || [];\n  const alertId = pathParts.length > 2 ? pathParts[pathParts.length - 1] : undefined;\n\n  try {\n    // Authentication\n    const userId = await getUserIdFromEvent(event);\n    if (!userId) {\n      console.error(`${logPrefix} Authentication required`);\n      return {\n        statusCode: 401,\n        headers: COMMON_HEADERS,\n        body: JSON.stringify({ error: 'Authentication required' })\n      };\n    }\n\n    console.log(`${logPrefix} Authenticated user: ${userId}`);\n\n    // Route to appropriate handler\n    switch (httpMethod) {\n      case 'GET':\n        return await handleGetAlerts(userId, queryStringParameters, logPrefix);\n      \n      case 'POST':\n        return await handleCreateAlert(userId, eventBodyString, logPrefix);\n      \n      case 'PUT':\n      case 'PATCH':\n        if (!alertId) {\n          return {\n            statusCode: 400,\n            headers: COMMON_HEADERS,\n            body: JSON.stringify({ error: 'Alert ID is required for updates' })\n          };\n        }\n        return await handleUpdateAlert(userId, alertId, eventBodyString, logPrefix);\n      \n      case 'DELETE':\n        if (!alertId) {\n          return {\n            statusCode: 400,\n            headers: COMMON_HEADERS,\n            body: JSON.stringify({ error: 'Alert ID is required for deletion' })\n          };\n        }\n        return await handleDeleteAlert(userId, alertId, logPrefix);\n\n      default:\n        return {\n          statusCode: 405,\n          headers: COMMON_HEADERS,\n          body: JSON.stringify({ error: `Method ${httpMethod} not allowed` })\n        };\n    }\n\n  } catch (error) {\n    console.error(`${logPrefix} Unexpected error:`, error);\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    return {\n      statusCode: 500,\n      headers: COMMON_HEADERS,\n      body: JSON.stringify({ error: 'Internal server error', message: errorMessage })\n    };\n  }\n};\n\n/**\n * Handle GET requests - fetch alerts with optional filtering\n */\nasync function handleGetAlerts(\n  userId: string, \n  queryParams: Record<string, string | undefined> | null, \n  logPrefix: string\n): Promise<ApiResponse> {\n  try {\n    let query = supabaseAdmin\n      .from(TABLE_NAME)\n      .select('*')\n      .eq('user_id', userId)\n      .order('due_date', { ascending: true });\n\n    // Apply filters if provided\n    if (queryParams?.status && queryParams.status !== 'all') {\n      query = query.eq('status', queryParams.status);\n    }\n\n    if (queryParams?.alert_type && queryParams.alert_type !== 'all') {\n      query = query.eq('alert_type', queryParams.alert_type);\n    }\n\n    if (queryParams?.priority && queryParams.priority !== 'all') {\n      query = query.eq('priority', parseInt(queryParams.priority));\n    }\n\n    // Pagination\n    const limit = parseInt(queryParams?.limit || '50');\n    const offset = parseInt(queryParams?.offset || '0');\n    query = query.range(offset, offset + limit - 1);\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      console.error(`${logPrefix} Supabase error:`, error);\n      return {\n        statusCode: 500,\n        headers: COMMON_HEADERS,\n        body: JSON.stringify({ error: 'Failed to fetch alerts', details: error.message })\n      };\n    }\n\n    console.log(`${logPrefix} Successfully fetched ${data?.length || 0} alerts`);\n\n    return {\n      statusCode: 200,\n      headers: COMMON_HEADERS,\n      body: JSON.stringify({\n        alerts: data || [],\n        total: count || 0,\n        limit,\n        offset\n      })\n    };\n\n  } catch (error) {\n    console.error(`${logPrefix} Error in handleGetAlerts:`, error);\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    return {\n      statusCode: 500,\n      headers: COMMON_HEADERS,\n      body: JSON.stringify({ error: 'Failed to fetch alerts', message: errorMessage })\n    };\n  }\n}\n\n/**\n * Handle POST requests - create new alert\n */\nasync function handleCreateAlert(\n  userId: string, \n  eventBodyString: string | null, \n  logPrefix: string\n): Promise<ApiResponse> {\n  try {\n    if (!eventBodyString) {\n      return {\n        statusCode: 400,\n        headers: COMMON_HEADERS,\n        body: JSON.stringify({ error: 'Request body is required' })\n      };\n    }\n\n    const requestData = JSON.parse(eventBodyString);\n    const validatedPayload = validateCreateAlertPayload(requestData);\n\n    // Create alert data with defaults\n    const alertData = {\n      user_id: userId,\n      title: validatedPayload.title,\n      description: validatedPayload.description || null,\n      alert_type: validatedPayload.alert_type,\n      due_date: validatedPayload.due_date,\n      priority: validatedPayload.priority || AlertPriority.MEDIUM,\n      contact_id: validatedPayload.contact_id || null,\n      event_id: validatedPayload.event_id || null,\n      recurring: validatedPayload.recurring || false,\n      recurrence_rule: validatedPayload.recurrence_rule || null,\n      metadata: validatedPayload.metadata || null,\n      tags: validatedPayload.tags || null,\n      status: AlertStatus.PENDING\n    };\n\n    const { data, error } = await supabaseAdmin\n      .from(TABLE_NAME)\n      .insert(alertData)\n      .select()\n      .single();\n\n    if (error) {\n      console.error(`${logPrefix} Supabase error:`, error);\n      return {\n        statusCode: 500,\n        headers: COMMON_HEADERS,\n        body: JSON.stringify({ error: 'Failed to create alert', details: error.message })\n      };\n    }\n\n    console.log(`${logPrefix} Successfully created alert: ${data.alert_id}`);\n\n    return {\n      statusCode: 201,\n      headers: COMMON_HEADERS,\n      body: JSON.stringify({ alert: data })\n    };\n\n  } catch (error) {\n    console.error(`${logPrefix} Error in handleCreateAlert:`, error);\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    return {\n      statusCode: 400,\n      headers: COMMON_HEADERS,\n      body: JSON.stringify({ error: 'Failed to create alert', message: errorMessage })\n    };\n  }\n}\n\n/**\n * Handle PUT/PATCH requests - update alert or handle actions\n */\nasync function handleUpdateAlert(\n  userId: string, \n  alertId: string, \n  eventBodyString: string | null, \n  logPrefix: string\n): Promise<ApiResponse> {\n  try {\n    if (!eventBodyString) {\n      return {\n        statusCode: 400,\n        headers: COMMON_HEADERS,\n        body: JSON.stringify({ error: 'Request body is required' })\n      };\n    }\n\n    const requestData = JSON.parse(eventBodyString);\n\n    // Check if this is an action request (dismiss, snooze, etc.)\n    if (requestData.action) {\n      const actionUpdates = processAlertAction(requestData.action, requestData);\n      \n      const { data, error } = await supabaseAdmin\n        .from(TABLE_NAME)\n        .update({ ...actionUpdates, updated_at: new Date().toISOString() })\n        .eq('alert_id', alertId)\n        .eq('user_id', userId)\n        .select()\n        .single();\n\n      if (error) {\n        console.error(`${logPrefix} Supabase error for action:`, error);\n        return {\n          statusCode: 500,\n          headers: COMMON_HEADERS,\n          body: JSON.stringify({ error: `Failed to ${requestData.action} alert`, details: error.message })\n        };\n      }\n\n      if (!data) {\n        return {\n          statusCode: 404,\n          headers: COMMON_HEADERS,\n          body: JSON.stringify({ error: 'Alert not found' })\n        };\n      }\n\n      console.log(`${logPrefix} Successfully performed action ${requestData.action} on alert: ${alertId}`);\n\n      return {\n        statusCode: 200,\n        headers: COMMON_HEADERS,\n        body: JSON.stringify({ alert: data })\n      };\n    }\n\n    // Regular update\n    const validatedPayload = validateUpdateAlertPayload(requestData);\n    const updateData = {\n      ...validatedPayload,\n      updated_at: new Date().toISOString()\n    };\n\n    const { data, error } = await supabaseAdmin\n      .from(TABLE_NAME)\n      .update(updateData)\n      .eq('alert_id', alertId)\n      .eq('user_id', userId)\n      .select()\n      .single();\n\n    if (error) {\n      console.error(`${logPrefix} Supabase error:`, error);\n      return {\n        statusCode: 500,\n        headers: COMMON_HEADERS,\n        body: JSON.stringify({ error: 'Failed to update alert', details: error.message })\n      };\n    }\n\n    if (!data) {\n      return {\n        statusCode: 404,\n        headers: COMMON_HEADERS,\n        body: JSON.stringify({ error: 'Alert not found' })\n      };\n    }\n\n    console.log(`${logPrefix} Successfully updated alert: ${alertId}`);\n\n    return {\n      statusCode: 200,\n      headers: COMMON_HEADERS,\n      body: JSON.stringify({ alert: data })\n    };\n\n  } catch (error) {\n    console.error(`${logPrefix} Error in handleUpdateAlert:`, error);\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    return {\n      statusCode: 400,\n      headers: COMMON_HEADERS,\n      body: JSON.stringify({ error: 'Failed to update alert', message: errorMessage })\n    };\n  }\n}\n\n/**\n * Handle DELETE requests - delete alert\n */\nasync function handleDeleteAlert(\n  userId: string, \n  alertId: string, \n  logPrefix: string\n): Promise<ApiResponse> {\n  try {\n    const { data, error } = await supabaseAdmin\n      .from(TABLE_NAME)\n      .delete()\n      .eq('alert_id', alertId)\n      .eq('user_id', userId)\n      .select()\n      .single();\n\n    if (error) {\n      console.error(`${logPrefix} Supabase error:`, error);\n      return {\n        statusCode: 500,\n        headers: COMMON_HEADERS,\n        body: JSON.stringify({ error: 'Failed to delete alert', details: error.message })\n      };\n    }\n\n    if (!data) {\n      return {\n        statusCode: 404,\n        headers: COMMON_HEADERS,\n        body: JSON.stringify({ error: 'Alert not found' })\n      };\n    }\n\n    console.log(`${logPrefix} Successfully deleted alert: ${alertId}`);\n\n    return {\n      statusCode: 200,\n      headers: COMMON_HEADERS,\n      body: JSON.stringify({ message: 'Alert deleted successfully', alert_id: alertId })\n    };\n\n  } catch (error) {\n    console.error(`${logPrefix} Error in handleDeleteAlert:`, error);\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    return {\n      statusCode: 500,\n      headers: COMMON_HEADERS,\n      body: JSON.stringify({ error: 'Failed to delete alert', message: errorMessage })\n    };\n  }\n}\n\n// Export as Netlify Handler\nconst handler: Handler = alertsHandler;\n\nexport { handler }; "]}
{"version":3,"file":"login.js","sourceRoot":"","sources":["../../../src/backend/functions/login.ts"],"names":[],"mappings":"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","sourcesContent":["import { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport { supabaseAdmin } from '../services'; // Assuming supabaseAdmin is correctly configured\nimport { authRateLimiter, RATE_LIMITS } from '../services/rateLimiter'; // Import rate limiter\nimport type { User, Session } from '@supabase/supabase-js'; // Import Supabase types\n\n// Define a more specific type for the expected request body\ninterface LoginRequestBody {\n  email?: string;\n  password?: string;\n}\n\n// Define a more specific type for the expected successful response body\ninterface LoginSuccessResponseBody {\n  success: true;\n  message: string;\n  user: User;\n  session: Session;\n  toast?: {\n    type: 'success' | 'error' | 'info' | 'warning';\n    message: string;\n  };\n}\n\n// Define a type for error responses\ninterface LoginErrorResponseBody {\n  success: false;\n  message: string;\n  toast?: {\n    type: 'success' | 'error' | 'info' | 'warning';\n    message: string;\n  };\n}\n\nconst loginHandler: Handler = async (event: HandlerEvent, _context: HandlerContext) => {\n  console.log(\"LOGIN FUNCTION - INVOKED AT:\", new Date().toISOString());\n\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ success: false, message: \"Method Not Allowed\" } as LoginErrorResponseBody),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  let body: LoginRequestBody;\n  try {\n    if (!event.body) {\n      throw new Error(\"Request body is missing\");\n    }\n    body = JSON.parse(event.body);\n  } catch (error) {\n    console.error(\"Error parsing request body:\", error);\n    return {\n      statusCode: 400,\n      body: JSON.stringify({ success: false, message: \"Invalid request body\" } as LoginErrorResponseBody),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  const { email, password } = body;\n\n  if (!email || !password) {\n    return {\n      statusCode: 400,\n      body: JSON.stringify({ success: false, message: \"Email and password are required\" } as LoginErrorResponseBody),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  try {\n    // Apply rate limiting based on IP address\n    const clientIp = event.headers['client-ip'] || \n                     event.headers['x-forwarded-for'] || \n                     'unknown-ip';\n                     \n    // Use email as secondary identifier to prevent email enumeration attacks\n    // Hash/normalize to prevent exposing actual email in logs\n    const emailIdentifier = email.toLowerCase().trim();\n    \n    // Check rate limits - first by IP, then by email if IP check passes\n    const ipRateLimit = await authRateLimiter.isAllowed(\n      clientIp, \n      'login', \n      RATE_LIMITS.login\n    );\n    \n    if (!ipRateLimit.allowed) {\n      console.warn(`Rate limit exceeded for IP: ${clientIp} on login endpoint`);\n      \n      // Return 429 Too Many Requests with Retry-After header\n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json',\n      };\n      \n      // Only add Retry-After header if retryAfter has a value\n      if (ipRateLimit.retryAfter !== undefined) {\n        headers['Retry-After'] = String(ipRateLimit.retryAfter);\n      } else {\n        headers['Retry-After'] = '60'; // Default to 60 seconds\n      }\n      \n      return {\n        statusCode: 429,\n        headers,\n        body: JSON.stringify({\n          success: false,\n          message: \"Too many login attempts. Please try again later.\",\n          toast: { \n            type: \"error\", \n            message: \"Too many login attempts. Please try again later.\" \n          }\n        } as LoginErrorResponseBody)\n      };\n    }\n    \n    // If IP check passes, check email rate limit as well for better security\n    const emailRateLimit = await authRateLimiter.isAllowed(\n      `email:${emailIdentifier}`, \n      'login', \n      RATE_LIMITS.login\n    );\n    \n    if (!emailRateLimit.allowed) {\n      console.warn(`Rate limit exceeded for email: ${email} on login endpoint`);\n      \n      // Return 429 Too Many Requests with Retry-After header\n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json',\n      };\n      \n      // Only add Retry-After header if retryAfter has a value\n      if (emailRateLimit.retryAfter !== undefined) {\n        headers['Retry-After'] = String(emailRateLimit.retryAfter);\n      } else {\n        headers['Retry-After'] = '60'; // Default to 60 seconds\n      }\n      \n      return {\n        statusCode: 429,\n        headers,\n        body: JSON.stringify({\n          success: false,\n          message: \"Too many login attempts. Please try again later.\",\n          toast: { \n            type: \"error\", \n            message: \"Too many login attempts. Please try again later.\" \n          }\n        } as LoginErrorResponseBody)\n      };\n    }\n    \n    // Delay response if progressive delay is enabled\n    if (emailRateLimit.delay && emailRateLimit.delay > 0) {\n      await new Promise(resolve => setTimeout(resolve, emailRateLimit.delay));\n    }\n    \n    // Proceed with authentication\n    const { data, error } = await supabaseAdmin.auth.signInWithPassword({\n      email: email,\n      password: password,\n    });\n\n    if (error) {\n      console.error(\"Supabase login error:\", error.message);\n      // Provide more specific error messages based on Supabase error types if needed\n      let userMessage = \"Login failed. Please check your credentials.\";\n      if (error.message.includes(\"Invalid login credentials\")) {\n        userMessage = \"Invalid email or password.\";\n        \n        // Track failed login attempt to trigger progressive delays/blocks\n        await authRateLimiter.isAllowed(clientIp, 'login', RATE_LIMITS.login, true);\n        await authRateLimiter.isAllowed(`email:${emailIdentifier}`, 'login', RATE_LIMITS.login, true);\n      } else if (error.message.includes(\"Email not confirmed\")) {\n        userMessage = \"Please confirm your email address before logging in.\";\n      }\n      \n      return {\n        statusCode: 401, // Unauthorized\n        body: JSON.stringify({ \n          success: false, \n          message: userMessage,\n          toast: { type: \"error\", message: userMessage }\n        } as LoginErrorResponseBody),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n\n    if (data && data.user && data.session) {\n      console.log(\"Login successful for user:\", data.user.id);\n      \n      // Reset rate limiter on successful login\n      await authRateLimiter.reset(clientIp, 'login');\n      await authRateLimiter.reset(`email:${emailIdentifier}`, 'login');\n      // Check if the user is verified (if your app requires it)\n      // Example: if (!data.user.email_confirmed_at) { ... return error ... }\n\n      const responseBody: LoginSuccessResponseBody = {\n        success: true,\n        message: \"Login successful!\",\n        user: data.user,\n        session: data.session,\n        toast: { type: \"success\", message: \"Logged in successfully\" }\n      };\n      return {\n        statusCode: 200,\n        body: JSON.stringify(responseBody),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    } else {\n      // This case should ideally not be reached if Supabase returns error for failed logins\n      console.error(\"Supabase login response missing user or session data\");\n      return {\n        statusCode: 500,\n        body: JSON.stringify({ \n          success: false, \n          message: \"Login failed due to a server issue. Please try again.\",\n          toast: { type: \"error\", message: \"Server error during login\" }\n        } as LoginErrorResponseBody),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n\n  } catch (e) {\n    const err = e instanceof Error ? e : new Error(String(e));\n    console.error(\"Unexpected error during login:\", err.message, err.stack);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ \n        success: false, \n        message: \"An unexpected error occurred. Please try again.\",\n        toast: { type: \"error\", message: \"Unexpected server error\" }\n      } as LoginErrorResponseBody),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n};\n\nexport { loginHandler as handler };\n"]}
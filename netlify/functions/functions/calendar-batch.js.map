{"version":3,"file":"calendar-batch.js","sourceRoot":"","sources":["../../../src/backend/functions/calendar-batch.ts"],"names":[],"mappings":"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","sourcesContent":["// src/backend/functions/calendar-batch.ts\nimport { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport { supabaseAdmin } from '../services';\nimport { CalendarEvent } from '../types/domain';\n\ninterface EventCreatePayload {\n  title: string;\n  start_time: string;\n  end_time: string;\n  description?: string | null;\n  location?: string | null;\n  all_day?: boolean;\n}\n\ninterface EventUpdatePayload extends Partial<EventCreatePayload> {\n  id: string;\n}\n\ninterface CalendarBatchOperation {\n  type: 'create' | 'update' | 'delete' | 'get';\n  data?: EventCreatePayload | EventUpdatePayload | { id: string } | { ids: string[] };\n}\n\ninterface CalendarBatchRequestBody {\n  operations: CalendarBatchOperation[];\n}\n\ninterface CalendarBatchResponse {\n  results: Array<{\n    success: boolean;\n    data?: CalendarEvent | CalendarEvent[] | null;\n    error?: string;\n    operation: string;\n  }>;\n  statistics: {\n    total: number;\n    successful: number;\n    failed: number;\n  };\n}\n\n// Helper function to get authenticated user ID\nexport const getAuthenticatedUserId = (event: HandlerEvent, context: HandlerContext): string | null => {\n  // First, try to get user from the clientContext (direct browser calls via Netlify Identity)\n  const { user: clientContextUser } = context.clientContext || {};\n  if (clientContextUser && clientContextUser.sub) {\n    return clientContextUser.sub;\n  }\n\n  // If clientContext auth fails, check for Authorization header (when called from another function or frontend)\n  const authHeader = event.headers.authorization || event.headers.Authorization;\n\n  if (authHeader && authHeader.startsWith('Bearer ')) {\n    try {\n      const token = authHeader.replace('Bearer ', '');\n      const parts = token.split('.');\n      if (parts.length !== 3) {\n        return null;\n      }\n      const payloadBase64 = parts[1];\n      const payloadJson = Buffer.from(payloadBase64, 'base64url').toString('utf8');\n      const payload = JSON.parse(payloadJson);\n      return payload.sub || null;\n    } catch (error) {\n      console.error(\"[authHelper] Error parsing JWT from Authorization header:\", error);\n      return null;\n    }\n  }\n\n  return null;\n};\n\nexport const handler: Handler = async (event: HandlerEvent, context: HandlerContext) => {\n  // Only allow POST method\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ error: 'Method not allowed' }),\n      headers: { 'Content-Type': 'application/json' }\n    };\n  }\n\n  // Get authenticated user\n  const userId = getAuthenticatedUserId(event, context);\n  if (!userId) {\n    return {\n      statusCode: 401,\n      body: JSON.stringify({ error: 'Unauthorized' }),\n      headers: { 'Content-Type': 'application/json' }\n    };\n  }\n\n  // Parse request body\n  const requestBody: CalendarBatchRequestBody = JSON.parse(event.body || '{}');\n  const { operations } = requestBody;\n\n  if (!operations || !Array.isArray(operations) || operations.length === 0) {\n    return {\n      statusCode: 400,\n      body: JSON.stringify({ error: 'Operations array is required' }),\n      headers: { 'Content-Type': 'application/json' }\n    };\n  }\n\n  // Process operations\n  const results = await Promise.allSettled(\n    operations.map(async (operation) => {\n      try {\n        let result;\n        \n        switch (operation.type) {\n          case 'create': {\n            const data = operation.data as EventCreatePayload;\n            const { data: event, error } = await supabaseAdmin\n              .from('calendar_events')\n              .insert({ ...data, user_id: userId })\n              .select()\n              .single();\n            \n            if (error) throw error;\n            result = event;\n            break;\n          }\n          \n          case 'update': {\n            const data = operation.data as EventUpdatePayload;\n            const { id, ...updateData } = data;\n            \n            const { data: event, error } = await supabaseAdmin\n              .from('calendar_events')\n              .update(updateData)\n              .match({ id, user_id: userId })\n              .select()\n              .single();\n            \n            if (error) throw error;\n            result = event;\n            break;\n          }\n          \n          case 'delete': {\n            const data = operation.data as { id: string };\n            const { error } = await supabaseAdmin\n              .from('calendar_events')\n              .delete()\n              .match({ id: data.id, user_id: userId });\n            \n            if (error) throw error;\n            result = null;\n            break;\n          }\n          \n          case 'get': {\n            const data = operation.data as { ids: string[] };\n            const { data: events, error } = await supabaseAdmin\n              .from('calendar_events')\n              .select('*')\n              .eq('user_id', userId)\n              .in('id', data.ids);\n            \n            if (error) throw error;\n            result = events;\n            break;\n          }\n          \n          default:\n            throw new Error(`Unknown operation type: ${operation.type}`);\n        }\n        \n        return {\n          success: true,\n          data: result,\n          operation: operation.type\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error',\n          operation: operation.type\n        };\n      }\n    })\n  );\n\n  const processedResults = results.map((result) => {\n    if (result.status === 'fulfilled') {\n      return result.value;\n    } else {\n      return {\n        success: false,\n        error: result.reason?.message || 'Unknown error',\n        operation: 'unknown'\n      };\n    }\n  });\n\n  const response: CalendarBatchResponse = {\n    results: processedResults,\n    statistics: {\n      total: processedResults.length,\n      successful: processedResults.filter(r => r.success).length,\n      failed: processedResults.filter(r => !r.success).length\n    }\n  };\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify(response),\n    headers: { 'Content-Type': 'application/json' }\n  };\n};"]}
{"version":3,"file":"forgot-password.js","sourceRoot":"","sources":["../../../src/backend/functions/forgot-password.ts"],"names":[],"mappings":";;;AAEA,0CAAoE;AACpE,yDAAuE;AAMvE,MAAM,OAAO,GAAY,KAAK,EAAE,KAAmB,EAAE,QAAwB,EAAE,EAAE;IAC/E,OAAO,CAAC,GAAG,CAAC,2CAA2C,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;IAE3E,IAAI,KAAK,CAAC,UAAU,KAAK,MAAM,EAAE,CAAC;QAChC,OAAO,CAAC,GAAG,CAAC,yCAAyC,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;QACzE,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,oBAAoB;gBAC7B,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,wBAAwB,EAAE;aAC5D,CAAC;YACF,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;SAChD,CAAC;IACJ,CAAC;IAED,IAAI,WAAsC,CAAC;IAC3C,IAAI,CAAC;QACH,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YAChB,OAAO,CAAC,KAAK,CAAC,iDAAiD,CAAC,CAAC;YACjE,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;oBACnB,OAAO,EAAE,0BAA0B;oBACnC,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,sBAAsB,EAAE;iBAC1D,CAAC;gBACF,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;aAChD,CAAC;QACJ,CAAC;QACD,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAA8B,CAAC;QAClE,OAAO,CAAC,GAAG,CAAC,sCAAsC,EAAE,EAAE,KAAK,EAAE,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,oBAAoB;IACzG,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,sDAAsD,EAAE,KAAK,CAAC,CAAC;QAC7E,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,6CAA6C;gBACtD,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,wBAAwB,EAAE;aAC5D,CAAC;YACF,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;SAChD,CAAC;IACJ,CAAC;IAED,0CAA0C;IAC1C,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC;QACjC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC;QAC1B,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC;QAC1B,SAAS,CAAC;IAE1B,+BAA+B;IAC/B,MAAM,WAAW,GAAG,MAAM,6BAAe,CAAC,SAAS,CACjD,QAAQ,EACR,eAAe,EACf,yBAAW,CAAC,aAAa,CAC1B,CAAC;IAEF,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;QACzB,OAAO,CAAC,IAAI,CAAC,+BAA+B,QAAQ,6BAA6B,CAAC,CAAC;QAEnF,MAAM,OAAO,GAA2B;YACtC,cAAc,EAAE,kBAAkB;SACnC,CAAC;QACF,IAAI,WAAW,CAAC,UAAU,KAAK,SAAS,EAAE,CAAC;YACzC,OAAO,CAAC,aAAa,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAC1D,CAAC;QAED,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,2DAA2D;gBACpE,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,qDAAqD,EAAE;gBACxF,UAAU,EAAE,WAAW,CAAC,UAAU;aACnC,CAAC;YACF,OAAO;SACR,CAAC;IACJ,CAAC;IAED,MAAM,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC;IAE9B,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;QACvD,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,4CAA4C;gBACrD,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,2BAA2B,EAAE;aAC/D,CAAC;YACF,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;SAChD,CAAC;IACJ,CAAC;IAED,+DAA+D;IAC/D,MAAM,eAAe,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;IACnD,MAAM,cAAc,GAAG,MAAM,6BAAe,CAAC,SAAS,CACpD,SAAS,eAAe,EAAE,EAC1B,eAAe,EACf,yBAAW,CAAC,aAAa,CAC1B,CAAC;IAEF,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,IAAI,CAAC,kEAAkE,CAAC,CAAC;QAEjF,MAAM,OAAO,GAA2B;YACtC,cAAc,EAAE,kBAAkB;SACnC,CAAC;QACF,IAAI,cAAc,CAAC,UAAU,KAAK,SAAS,EAAE,CAAC;YAC5C,OAAO,CAAC,aAAa,CAAC,GAAG,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QAC7D,CAAC;QAED,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,2DAA2D;gBACpE,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,qDAAqD,EAAE;gBACxF,UAAU,EAAE,cAAc,CAAC,UAAU;aACtC,CAAC;YACF,OAAO;SACR,CAAC;IACJ,CAAC;IAED,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;IAC7C,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,OAAO,CAAC,KAAK,CAAC,8FAA8F,CAAC,CAAC;QAC9G,OAAO;YACH,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,mDAAmD;gBAC5D,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,4BAA4B,EAAE;aAChE,CAAC;YACF,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;SAClD,CAAC;IACJ,CAAC;IAED,IAAI,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,+CAA+C,KAAK,EAAE,CAAC,CAAC,CAAC,oBAAoB;QAEzF,2DAA2D;QAC3D,2FAA2F;QAC3F,4CAA4C;QAE5C,IAAI,CAAC;YACH,6DAA6D;YAC7D,MAAM,wBAAa;iBAChB,IAAI,CAAC,UAAU,CAAC;iBAChB,MAAM,CAAC,IAAI,CAAC;iBACZ,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC;iBAClB,WAAW,EAAE,CAAC;YAEjB,2DAA2D;YAC3D,6EAA6E;YAC7E,OAAO,CAAC,GAAG,CAAC,sFAAsF,CAAC,CAAC;QACtG,CAAC;QAAC,OAAO,WAAW,EAAE,CAAC;YACrB,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,WAAW,CAAC,CAAC;YACxD,2DAA2D;QAC7D,CAAC;QAED,gDAAgD;QAChD,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,MAAM,wBAAa,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC;YACzF,IAAI,EAAE,UAAU;YAChB,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE;gBACP,UAAU,EAAE,GAAG,WAAW,iBAAiB;aAC5C;SACF,CAAC,CAAC;QAEH,IAAI,UAAU,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,UAAU,CAAC,CAAC;YAEnE,gEAAgE;YAChE,OAAO;gBACL,UAAU,EAAE,GAAG;gBACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;oBACnB,OAAO,EAAE,4EAA4E;oBACrF,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,iEAAiE,EAAE;iBACpG,CAAC;gBACF,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;aAChD,CAAC;QACJ,CAAC;QAED,sEAAsE;QACtE,IAAI,SAAS,IAAI,SAAS,CAAC,UAAU,IAAI,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;YAC1E,0CAA0C;YAC1C,MAAM,SAAS,GAAG,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC;YACnD,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;YAEtD,6CAA6C;YAC7C,MAAM,YAAY,GAAG,MAAM,IAAA,iCAAsB,EAAC,KAAK,EAAE,SAAS,CAAC,CAAC;YAEpE,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;gBAC1B,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;gBACzE,oCAAoC;gBACpC,OAAO;oBACL,UAAU,EAAE,GAAG;oBACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wBACnB,OAAO,EAAE,4EAA4E;wBACrF,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,iEAAiE,EAAE;qBACpG,CAAC;oBACF,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;iBAChD,CAAC;YACJ,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,mDAAmD,CAAC,CAAC;YAEjE,2EAA2E;YAC3E,MAAM,6BAAe,CAAC,KAAK,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;YACvD,MAAM,6BAAe,CAAC,KAAK,CAAC,SAAS,eAAe,EAAE,EAAE,eAAe,CAAC,CAAC;QAC3E,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,qEAAqE,CAAC,CAAC;YAEnF,uEAAuE;YACvE,yCAAyC;QAC3C,CAAC;QAED,uDAAuD;QACvD,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,4EAA4E;gBACrF,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,iEAAiE,EAAE;aACvG,CAAC;YACF,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;SAChD,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;QAC9E,MAAM,UAAU,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;QACpE,OAAO,CAAC,KAAK,CAAC,8CAA8C,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;QACxF,uDAAuD;QACvD,OAAO;YACL,UAAU,EAAE,GAAG,EAAE,+CAA+C;YAChE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,4EAA4E;gBACrF,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,iEAAiE,EAAE;aACpG,CAAC;YACF,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;SAChD,CAAC;IACJ,CAAC;AACH,CAAC,CAAC;AAEO,0BAAO","sourcesContent":["// src/backend/functions/forgot-password.ts\nimport { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport { supabaseAdmin, sendPasswordResetEmail } from '../services';\nimport { authRateLimiter, RATE_LIMITS } from '../services/rateLimiter';\n\ninterface ForgotPasswordRequestBody {\n  email?: string;\n}\n\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext) => {\n  console.log(\"Forgot-password function invoked. Method:\", event.httpMethod);\n\n  if (event.httpMethod !== \"POST\") {\n    console.log(\"Method not allowed for forgot-password:\", event.httpMethod);\n    return {\n      statusCode: 405,\n      body: JSON.stringify({\n        message: \"Method Not Allowed\",\n        toast: { type: \"error\", message: \"Invalid request method\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  let requestBody: ForgotPasswordRequestBody;\n  try {\n    if (!event.body) {\n      console.error(\"Forgot-password error: Request body is missing.\");\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          message: \"Request body is missing.\",\n          toast: { type: \"error\", message: \"Missing request data\" }\n        }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n    requestBody = JSON.parse(event.body) as ForgotPasswordRequestBody;\n    console.log(\"Forgot-password request body parsed:\", { email: requestBody.email }); // Log PII carefully\n  } catch (error) {\n    console.error(\"Forgot-password error: Failed to parse request body.\", error);\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        message: \"Invalid request body. Failed to parse JSON.\",\n        toast: { type: \"error\", message: \"Invalid request format\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  // Get client identifier for rate limiting\n  const clientIP = event.headers['x-forwarded-for'] ||\n                  event.headers['client-ip'] ||\n                  event.headers['x-real-ip'] ||\n                  'unknown';\n                  \n  // Apply IP-based rate limiting\n  const ipRateLimit = await authRateLimiter.isAllowed(\n    clientIP, \n    'passwordReset', \n    RATE_LIMITS.passwordReset\n  );\n  \n  if (!ipRateLimit.allowed) {\n    console.warn(`Rate limit exceeded for IP: ${clientIP} on password reset endpoint`);\n    \n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json'\n    };\n    if (ipRateLimit.retryAfter !== undefined) {\n      headers['Retry-After'] = String(ipRateLimit.retryAfter);\n    }\n    \n    return {\n      statusCode: 429,\n      body: JSON.stringify({\n        message: \"Too many password reset attempts. Please try again later.\",\n        toast: { type: \"error\", message: \"Too many attempts. Please wait before trying again.\" },\n        retryAfter: ipRateLimit.retryAfter\n      }),\n      headers,\n    };\n  }\n  \n  const { email } = requestBody;\n\n  if (!email) {\n    console.error(\"Forgot-password error: Missing email.\");\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        message: \"Missing required field: email is required.\",\n        toast: { type: \"error\", message: \"Email address is required\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n  \n  // Add email-based rate limiting to prevent account enumeration\n  const emailIdentifier = email.toLowerCase().trim();\n  const emailRateLimit = await authRateLimiter.isAllowed(\n    `email:${emailIdentifier}`, \n    'passwordReset', \n    RATE_LIMITS.passwordReset\n  );\n  \n  if (!emailRateLimit.allowed) {\n    console.warn(`Rate limit exceeded for email pattern on password reset endpoint`);\n    \n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json'\n    };\n    if (emailRateLimit.retryAfter !== undefined) {\n      headers['Retry-After'] = String(emailRateLimit.retryAfter);\n    }\n    \n    return {\n      statusCode: 429,\n      body: JSON.stringify({\n        message: \"Too many password reset attempts. Please try again later.\",\n        toast: { type: \"error\", message: \"Too many attempts. Please wait before trying again.\" },\n        retryAfter: emailRateLimit.retryAfter\n      }),\n      headers,\n    };\n  }\n\n  const frontendUrl = process.env.FRONTEND_URL;\n  if (!frontendUrl) {\n    console.error('CRITICAL: FRONTEND_URL environment variable is not set. Cannot generate password reset link.');\n    return {\n        statusCode: 500,\n        body: JSON.stringify({\n          message: 'Server configuration error: FRONTEND_URL not set.',\n          toast: { type: \"error\", message: \"Server configuration error\" }\n        }),\n        headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  try {\n    console.log(`Attempting to send password reset email to: ${email}`); // Log PII carefully\n    \n    // Check if email exists by attempting to get user by email\n    // We'll use the getUserByEmail admin method if available, otherwise use a generic approach\n    // Check user existence without revealing it\n    \n    try {\n      // Try to get user details from the email to verify existence\n      await supabaseAdmin\n        .from('profiles')\n        .select('id')\n        .eq('email', email)\n        .maybeSingle();\n\n      // User existence check - not used in response for security\n      // Security: Avoid logging whether user exists to prevent information leakage\n      console.log(`Processing password reset request for email (existence status redacted for security)`);\n    } catch (lookupError) {\n      console.error(\"Error during user lookup:\", lookupError);\n      // Continue with password reset anyway for security reasons\n    }\n    \n    // Generate a password reset link using Supabase\n    const { data: resetData, error: resetError } = await supabaseAdmin.auth.admin.generateLink({\n      type: 'recovery',\n      email: email,\n      options: {\n        redirectTo: `${frontendUrl}/reset-password`\n      }\n    });\n    \n    if (resetError) {\n      console.error(\"Error generating password reset link:\", resetError);\n      \n      // For security reasons, don't reveal if the email exists or not\n      return {\n        statusCode: 200,\n        body: JSON.stringify({\n          message: \"If an account with that email exists, a password reset link has been sent.\",\n          toast: { type: \"info\", message: \"If your account exists, check your email for reset instructions\" }\n        }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n    \n    // Only proceed with sending an email if we managed to generate a link\n    if (resetData && resetData.properties && resetData.properties.action_link) {\n      // Get the recovery link from the response\n      const resetLink = resetData.properties.action_link;\n      console.log(\"Generated password reset link for user\");\n      \n      // Send the password reset email using Resend\n      const resendResult = await sendPasswordResetEmail(email, resetLink);\n      \n      if (!resendResult.success) {\n        console.error(\"Resend password reset email failed:\", resendResult.error);\n        // Don't expose failure for security\n        return {\n          statusCode: 200,\n          body: JSON.stringify({\n            message: \"If an account with that email exists, a password reset link has been sent.\",\n            toast: { type: \"info\", message: \"If your account exists, check your email for reset instructions\" }\n          }),\n          headers: { 'Content-Type': 'application/json' },\n        };\n      }\n      \n      console.log(\"Password reset email sent successfully via Resend\");\n      \n      // Reset rate limiters on successful password reset request for valid email\n      await authRateLimiter.reset(clientIP, 'passwordReset');\n      await authRateLimiter.reset(`email:${emailIdentifier}`, 'passwordReset');\n    } else {\n      console.log(\"No reset link was generated, likely because the email doesn't exist\");\n      \n      // For security, don't record failed attempts when email doesn't exist \n      // to prevent account enumeration attacks\n    }\n    \n    // Always return a generic success message for security\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        message: \"If an account with that email exists, a password reset link has been sent.\",\n        toast: { type: \"success\", message: \"If your account exists, check your email for reset instructions\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    const errorStack = error instanceof Error ? error.stack : undefined;\n    console.error(\"Unexpected error in forgot-password handler:\", errorMessage, errorStack);\n    // Generic message to client for unexpected errors too.\n    return {\n      statusCode: 200, // Maintain generic success response for client\n      body: JSON.stringify({\n        message: \"If an account with that email exists, a password reset link has been sent.\",\n        toast: { type: \"info\", message: \"If your account exists, check your email for reset instructions\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n};\n\nexport { handler };\n"]}
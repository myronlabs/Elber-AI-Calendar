{"version":3,"file":"check-google-auth.js","sourceRoot":"","sources":["../../../src/backend/functions/check-google-auth.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport { \n  supabaseAdmin, \n  oauthTokenManager\n} from '../services';\n\n// Log initialization\nconsole.log('[check-google-auth] Initialized with OAuth configuration');\n\nconst COMMON_HEADERS = {\n  'Content-Type': 'application/json',\n  'Cache-Control': 'no-store, max-age=0'\n};\n\ninterface CheckAuthResponse {\n  authorized: boolean;\n  error?: string;\n  // Optionally, you could return scopes or other relevant info if authorized\n}\n\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext) => {\n  if (event.httpMethod !== 'GET') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ message: 'Method Not Allowed' }),\n      headers: { ...COMMON_HEADERS, 'Allow': 'GET' },\n    };\n  }\n\n  const authHeader = event.headers.authorization;\n  if (!authHeader) {\n    return {\n      statusCode: 401,\n      body: JSON.stringify({ authorized: false, error: \"Authentication required\" } as CheckAuthResponse),\n      headers: COMMON_HEADERS,\n    };\n  }\n\n  let userId: string;\n  try {\n    const token = authHeader.split(' ')[1];\n    const { data: { user }, error: supabaseError } = await supabaseAdmin.auth.getUser(token);\n    if (supabaseError || !user) {\n      console.warn('[check-google-auth] Invalid Supabase session token:', supabaseError?.message);\n      throw new Error('Invalid session');\n    }\n    userId = user.id;\n  } catch (e) {\n    return {\n      statusCode: 401,\n      body: JSON.stringify({ authorized: false, error: (e as Error).message } as CheckAuthResponse),\n      headers: COMMON_HEADERS,\n    };\n  }\n\n  try {\n    // Check if user has a valid token with contacts scopes\n    const isAuthorized = await oauthTokenManager.hasValidToken(userId, 'google');\n    \n    if (isAuthorized) {\n      console.log(`[check-google-auth] Valid access token found for user ${userId}`);\n      return {\n        statusCode: 200,\n        body: JSON.stringify({ authorized: true } as CheckAuthResponse),\n        headers: COMMON_HEADERS,\n      };\n    } else {\n      console.log(`[check-google-auth] No valid token found for user ${userId}`);\n      return {\n        statusCode: 200,\n        body: JSON.stringify({ authorized: false, error: 'No valid token available.' } as CheckAuthResponse),\n        headers: COMMON_HEADERS,\n      };\n    }\n\n  } catch (e: unknown) {\n    console.error('[check-google-auth] General error:', e instanceof Error ? e.message : String(e));\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ authorized: false, error: e instanceof Error ? e.message : 'Internal server error' } as CheckAuthResponse),\n      headers: COMMON_HEADERS,\n    };\n  }\n};\n\nexport { handler }; "]}
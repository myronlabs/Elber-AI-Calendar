{"version":3,"file":"signup.js","sourceRoot":"","sources":["../../../src/backend/functions/signup.ts"],"names":[],"mappings":"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","sourcesContent":["import { Handler, HandlerEvent, HandlerContext, HandlerResponse } from \"@netlify/functions\";\nimport { supabaseAdmin, sendVerificationEmail, generateVerificationToken } from '../services';\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\nimport { validatePassword, checkPasswordBreach } from '../utils/passwordValidator';\nimport { authRateLimiter, RATE_LIMITS } from '../services/rateLimiter';\n\n// Define a more specific type for the expected request body\ninterface SignupRequestBody {\n  email?: string;\n  password?: string;\n  firstName?: string;\n  lastName?: string;\n}\n\n// Create a dedicated client with explicitly disabled RLS just for verification codes\nconst createRlsDisabledClient = (): SupabaseClient => {\n  const supabaseUrl = process.env.SUPABASE_URL;\n  const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n  \n  if (!supabaseUrl || !supabaseServiceRoleKey) {\n    console.error('Missing Supabase configuration');\n    throw new Error('Missing Supabase configuration');\n  }\n  \n  return createClient(supabaseUrl, supabaseServiceRoleKey, {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false,\n    },\n    db: {\n      schema: 'public',\n    },\n    global: {\n      headers: {\n        Authorization: `Bearer ${supabaseServiceRoleKey}`\n      }\n    }\n  });\n};\n\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext): Promise<HandlerResponse> => {\n  console.log('--- signup.ts function invoked - Custom Email Verification Flow ---');\n\n  if (event.httpMethod !== \"POST\") {\n    console.log(\"Method not allowed for signup:\", event.httpMethod);\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ message: \"Method Not Allowed\" }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  // Get client identifier for rate limiting (IP address)\n  const clientIP = event.headers['x-forwarded-for'] ||\n                  event.headers['client-ip'] ||\n                  event.headers['x-real-ip'] ||\n                  'unknown';\n\n  // Check IP rate limit first\n  const ipRateLimit = await authRateLimiter.isAllowed(\n    clientIP,\n    'signup',\n    RATE_LIMITS.signup\n  );\n\n  if (!ipRateLimit.allowed) {\n    console.warn(`Rate limit exceeded for IP: ${clientIP} on signup endpoint`);\n    \n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json'\n    };\n    if (ipRateLimit.retryAfter !== undefined) {\n      headers['Retry-After'] = String(ipRateLimit.retryAfter);\n    }\n    \n    return {\n      statusCode: 429,\n      body: JSON.stringify({\n        message: \"Too many signup attempts. Please try again later.\",\n        toast: { type: \"error\", message: \"Too many attempts. Please wait before trying again.\" },\n        retryAfter: ipRateLimit.retryAfter\n      }),\n      headers,\n    };\n  }\n  \n  // Add progressive delay if enabled\n  if (ipRateLimit.delay && ipRateLimit.delay > 0) {\n    await new Promise(resolve => setTimeout(resolve, ipRateLimit.delay));\n  }\n\n  let requestBody: SignupRequestBody;\n  try {\n    if (!event.body) {\n      console.error(\"Signup error: Request body is missing.\");\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ \n          message: \"Request body is missing.\",\n          toast: { type: \"error\", message: \"Missing request data\" }\n        }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n    requestBody = JSON.parse(event.body) as SignupRequestBody;\n    console.log(\"Signup request body parsed:\", { email: requestBody.email, firstName: requestBody.firstName });\n  } catch (error) {\n    console.error(\"Signup error: Failed to parse request body.\", error);\n    return {\n      statusCode: 400,\n      body: JSON.stringify({ \n        message: \"Invalid request body. Failed to parse JSON.\",\n        toast: { type: \"error\", message: \"Invalid request format\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  const { email, password, firstName, lastName } = requestBody;\n  \n  // Add email-based rate limiting to prevent account enumeration\n  if (email) {\n    const emailIdentifier = email.toLowerCase().trim();\n    const emailRateLimit = await authRateLimiter.isAllowed(\n      `email:${emailIdentifier}`,\n      'signup',\n      RATE_LIMITS.signup\n    );\n    \n    if (!emailRateLimit.allowed) {\n      console.warn(`Rate limit exceeded for email pattern on signup endpoint`);\n      \n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json'\n      };\n      if (emailRateLimit.retryAfter !== undefined) {\n        headers['Retry-After'] = String(emailRateLimit.retryAfter);\n      }\n      \n      return {\n        statusCode: 429,\n        body: JSON.stringify({\n          message: \"Too many signup attempts. Please try again later.\",\n          toast: { type: \"error\", message: \"Too many attempts. Please wait before trying again.\" },\n          retryAfter: emailRateLimit.retryAfter\n        }),\n        headers,\n      };\n    }\n    \n    // Add progressive delay if enabled\n    if (emailRateLimit.delay && emailRateLimit.delay > 0) {\n      await new Promise(resolve => setTimeout(resolve, emailRateLimit.delay));\n    }\n  }\n\n  if (!email || !password || !firstName || !lastName) {\n    console.error(\"Signup error: Missing required fields.\", { email: !!email, password: !!password, firstName: !!firstName, lastName: !!lastName });\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        message: \"Missing required fields: email, password, firstName, and lastName are required.\",\n        toast: { type: \"error\", message: \"Please fill in all required fields\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  // Validate password strength\n  const passwordStrength = validatePassword(password);\n  if (!passwordStrength.isValid) {\n    console.error(\"Signup error: Password does not meet requirements\", { feedback: passwordStrength.feedback });\n    // Track failed attempt for rate limiting\n    await authRateLimiter.isAllowed(clientIP, 'signup', RATE_LIMITS.signup, true);\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        message: \"Password does not meet security requirements\",\n        errors: passwordStrength.feedback,\n        toast: { type: \"error\", message: \"Password is too weak\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  // Check if password has been breached\n  const isBreached = await checkPasswordBreach(password);\n  if (isBreached) {\n    console.error(\"Signup error: Password has been found in a data breach\");\n    // Track failed attempt for rate limiting\n    await authRateLimiter.isAllowed(clientIP, 'signup', RATE_LIMITS.signup, true);\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        message: \"This password has been found in data breaches. Please choose a different password.\",\n        toast: { type: \"error\", message: \"Password is not secure - found in data breaches\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  try {\n    console.log(`Attempting to sign up user: ${email}`);\n    \n    const { data, error: signUpError } = await supabaseAdmin.auth.signUp({\n      email: email,\n      password: password,\n      options: {\n        data: {\n          first_name: firstName,\n          last_name: lastName,\n        },\n        emailRedirectTo: \"https://elber-ai.netlify.app/verify-email\",\n      },\n    });\n\n    if (signUpError) {\n      console.error(\"Supabase signup error:\", signUpError.message, signUpError.status);\n      const errorMessage = signUpError.message || \"An unknown error occurred during signup.\";\n      const statusCode = signUpError.status || 500;\n\n      // Track failed attempt for rate limiting if it's a client error (4xx)\n      if (statusCode >= 400 && statusCode < 500) {\n        await authRateLimiter.isAllowed(clientIP, 'signup', RATE_LIMITS.signup, true);\n      }\n\n      return {\n        statusCode: statusCode,\n        body: JSON.stringify({\n          message: `Signup failed: ${errorMessage}`,\n          toast: { type: \"error\", message: errorMessage }\n        }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n\n    if (data.user) {\n      console.log(`User ${data.user.id} signed up successfully (Supabase record created). Email: ${data.user.email}`);\n      \n      const verificationToken = generateVerificationToken();\n      \n      try {\n        const now = new Date();\n        const noRlsClient = createRlsDisabledClient();\n        console.log(\"Using dedicated service role client for verification code insert\");\n\n        // Use the noRlsClient to update the profile to bypass RLS policies\n        // Using upsert with onConflict to handle cases where the profile already exists\n        const { error: profileError } = await noRlsClient\n          .from('profiles')\n          .upsert({\n            id: data.user.id,\n            first_name: firstName,\n            last_name: lastName,\n            is_custom_verified: false,\n            updated_at: now.toISOString()\n          }, {\n            onConflict: 'id',\n            ignoreDuplicates: false  // update the record if it exists\n          });\n          \n        if (profileError) {\n          console.error(`Error creating profile for user ${data.user.id}:`, profileError);\n          return {\n            statusCode: 500,\n            body: JSON.stringify({ \n              message: \"Server error creating user profile. Please try again later.\",\n              toast: { type: \"error\", message: \"Account creation error\" }\n            }),\n          };\n        }\n        \n        // Use the noRlsClient for inserting verification codes to bypass RLS policies\n        const { error: verificationError } = await noRlsClient\n          .from('verification_codes')\n          .insert({\n            user_id: data.user.id,\n            email: email, // Make sure the email is included as it's required\n            code: verificationToken,\n            created_at: now.toISOString(),\n            expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n          });\n          \n        if (verificationError) {\n          console.error(`Error storing verification code for user ${data.user.id}:`, verificationError);\n          return {\n            statusCode: 500,\n            body: JSON.stringify({ \n              message: \"Failed to store verification token.\",\n              toast: { type: \"error\", message: \"Error processing signup (code storage)\" }\n            }),\n            headers: { 'Content-Type': 'application/json' },\n          };\n        } else {\n          console.log(`Verification code stored successfully for user ${data.user.id}`);\n        }\n      } catch (dbError) {\n        console.error(`Exception storing verification code for user ${data.user.id}:`, dbError);\n        return {\n          statusCode: 500,\n          body: JSON.stringify({ \n            message: \"Server error during verification code storage.\",\n            toast: { type: \"error\", message: \"Error processing signup (db exception)\" }\n          }),\n          headers: { 'Content-Type': 'application/json' },\n        };\n      }\n      \n      const emailResult = await sendVerificationEmail(\n        email,\n        firstName,\n        data.user.id,\n        verificationToken\n      );\n      \n      if (!emailResult.success) {\n        console.warn(`Resend verification email failed for user ${data.user.id}:`, emailResult.error);\n        return {\n          statusCode: 200,\n          body: JSON.stringify({\n            message: \"Signup initiated. Account created, but verification email could not be sent. Please try requesting a new verification email.\",\n            userId: data.user.id,\n            toast: { \n              type: \"warning\", \n              message: \"Account created, but please request a new verification email.\" \n            }\n          }),\n          headers: { 'Content-Type': 'application/json' },\n        };\n      } else {\n        console.log(`Resend verification email sent successfully to ${email} for user ${data.user.id}`);\n      }\n      \n      // Reset rate limiters on successful signup\n      await authRateLimiter.reset(clientIP, 'signup');\n      if (email) {\n        const emailIdentifier = email.toLowerCase().trim();\n        await authRateLimiter.reset(`email:${emailIdentifier}`, 'signup');\n      }\n      \n      return {\n        statusCode: 200,\n        body: JSON.stringify({\n          message: \"Signup initiated. Please check your email to verify your account.\",\n          userId: data.user.id,\n          toast: { \n            type: \"success\", \n            message: \"Verification email sent! Please check your inbox to complete registration.\" \n          }\n        }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    } else {\n      console.warn(\"Supabase signup: User object was not returned from signUp, and no explicit Supabase error. This is unexpected.\");\n      return {\n        statusCode: 500, \n        body: JSON.stringify({ \n          message: \"Signup request processed, but user creation failed unexpectedly.\",\n          toast: { type: \"error\", message: \"Server error during user creation.\" }\n        }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n\n  } catch (error: unknown) {\n    let errorMessage = \"An unexpected error occurred.\";\n    if (error instanceof Error) {\n      errorMessage = error.message;\n    }\n    console.error(\"Outer catch block error in signup handler:\", errorMessage, error instanceof Error ? error.stack : undefined);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ \n        message: \"An unexpected server error occurred.\",\n        toast: { type: \"error\", message: \"Server error during signup\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n};\n\nexport { handler };\n"]}
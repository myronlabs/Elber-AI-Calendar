{"version":3,"file":"validate-token.js","sourceRoot":"","sources":["../../../src/backend/functions/validate-token.ts"],"names":[],"mappings":"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","sourcesContent":["import { HandlerContext, HandlerEvent, HandlerResponse } from '@netlify/functions';\nimport { createClient } from '@supabase/supabase-js';\n\n// Simple helper function to create consistent error responses\nfunction createErrorResponse(message: string, statusCode: number, errorType?: string): HandlerResponse {\n  return {\n    statusCode,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*', // Adjust CORS as needed\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      'Cache-Control': 'no-store, max-age=0'\n    },\n    body: JSON.stringify({\n      success: false,\n      message,\n      error: errorType || 'unknown_error'\n    })\n  };\n}\n\n// Simple helper function to create consistent success responses\nfunction createSuccessResponse(data?: Record<string, unknown>, meta?: Record<string, unknown>): HandlerResponse {\n  return {\n    statusCode: 200,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*', // Adjust CORS as needed\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      'Cache-Control': 'no-store, max-age=0'\n    },\n    body: JSON.stringify({\n      success: true,\n      ...(data && { data }),\n      ...(meta && { meta })\n    })\n  };\n}\n\n/**\n * Extract the token from the Authorization header\n */\nfunction extractTokenFromHeader(event: HandlerEvent): string | null {\n  const authHeader = event.headers.authorization || event.headers.Authorization;\n  \n  if (!authHeader) {\n    return null;\n  }\n  \n  // Extract from Bearer token format\n  const match = authHeader.match(/^Bearer\\s+([^\\s]+)$/i);\n  return match ? match[1] : null;\n}\n\n/**\n * Validate user access token\n * This is a lightweight function that just checks if the token is valid\n * without performing any complex database operations\n */\nexport async function handler(event: HandlerEvent, _context: HandlerContext): Promise<HandlerResponse> {\n  // Generate unique request ID for tracing\n  const requestId = `validate-token-${Date.now()}-${Math.floor(Math.random() * 10000)}`;\n  console.log(`\\n\\n=====================================================`);\n  console.log(`[validate-token] Request ${requestId}: NEW TOKEN VALIDATION REQUEST`);\n  console.log(`[validate-token] Request ${requestId}: Method: ${event.httpMethod}`);\n  console.log(`[validate-token] Request ${requestId}: Path: ${event.path}`);\n  console.log(`[validate-token] Request ${requestId}: Headers: ${JSON.stringify({\n    authorization: event.headers.authorization ? 'Bearer token present (redacted)' : 'MISSING',\n    origin: event.headers.origin,\n    host: event.headers.host,\n    referer: event.headers.referer,\n  })}`);\n\n  // Set a global timeout\n  const timeoutId = setTimeout(() => {\n    console.error(`[validate-token] Request ${requestId}: Request timed out after 5 seconds`);\n  }, 5000);\n  \n  // Handle CORS preflight\n  if (event.httpMethod === 'OPTIONS') {\n    clearTimeout(timeoutId);\n    return {\n      statusCode: 204,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS'\n      },\n      body: ''\n    };\n  }\n  \n  if (event.httpMethod !== 'GET') {\n    clearTimeout(timeoutId);\n    return createErrorResponse(`HTTP method ${event.httpMethod} not supported`, 405, 'method_not_allowed');\n  }\n  \n  // Extract token from header\n  const token = extractTokenFromHeader(event);\n  if (!token) {\n    clearTimeout(timeoutId);\n    return createErrorResponse('No authorization token provided', 401, 'missing_token');\n  }\n  \n  try {\n    // Initialize Supabase client\n    const supabaseUrl = process.env.SUPABASE_URL;\n    const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\n    console.log(`[validate-token] Request ${requestId}: Environment variables check: ${JSON.stringify({\n      supabaseUrl: supabaseUrl ? 'Present' : 'MISSING',\n      supabaseServiceRoleKey: supabaseServiceRoleKey ? 'Present' : 'MISSING'\n    })}`);\n\n    if (!supabaseUrl || !supabaseServiceRoleKey) {\n      console.error(`[validate-token] Request ${requestId}: CONFIGURATION ERROR - Missing Supabase env variables`);\n      clearTimeout(timeoutId);\n      return createErrorResponse('Server configuration error', 500, 'server_config_error');\n    }\n\n    console.log(`[validate-token] Request ${requestId}: Creating Supabase client with service role key`);\n\n    // Create a Supabase client for this request\n    const supabase = createClient(supabaseUrl, supabaseServiceRoleKey, {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false,\n        detectSessionInUrl: false\n      },\n      global: {\n        headers: {\n          'X-Request-ID': requestId\n        }\n      }\n    });\n    \n    // Use the getUser method to validate the token\n    console.log(`[validate-token] Request ${requestId}: Validating token via Supabase auth.getUser()`);\n    const { data, error } = await supabase.auth.getUser(token);\n\n    if (error) {\n      console.error(`[validate-token] Request ${requestId}: Token validation error:`, error);\n      clearTimeout(timeoutId);\n      return createErrorResponse('Invalid token', 401, 'invalid_token');\n    }\n\n    if (!data.user) {\n      console.error(`[validate-token] Request ${requestId}: No user found for token`);\n      clearTimeout(timeoutId);\n      return createErrorResponse('Invalid token - no user found', 401, 'token_user_not_found');\n    }\n\n    // CRITICAL SECURITY CHECK: Verify that the user's email is confirmed and they have custom verification\n    // This prevents authentication if the user hasn't completed the email verification process\n    console.log(`[validate-token] Request ${requestId}: Starting CRITICAL SECURITY CHECK for user verification`);\n    console.log(`[validate-token] Request ${requestId}: Querying profiles table for is_custom_verified status`);\n\n    const { data: profileData, error: profileError } = await supabase\n      .from('profiles')\n      .select('is_custom_verified')\n      .eq('id', data.user.id)\n      .single();\n\n    console.log(`[validate-token] Request ${requestId}: Profile check results: ${JSON.stringify({\n      userID: data.user.id,\n      profileFound: !!profileData,\n      isCustomVerified: profileData?.is_custom_verified,\n      hasError: !!profileError\n    })}`);\n\n    if (profileError || !profileData) {\n      console.error(`[validate-token] Request ${requestId}: Failed to fetch verification status for user ${data.user.id}:`,\n        profileError || 'No profile found');\n      clearTimeout(timeoutId);\n      return createErrorResponse('Account verification status could not be confirmed', 401, 'verification_check_failed');\n    }\n\n    if (!profileData.is_custom_verified) {\n      console.error(`[validate-token] Request ${requestId}: SECURITY BLOCK - User ${data.user.id} attempted to use token but is not verified`);\n      console.error(`[validate-token] Request ${requestId}: Access denied - is_custom_verified = false`);\n\n      // Add detailed logging for verification status debug\n      console.log(`[validate-token] Request ${requestId}: Querying verification_codes table for pending codes`);\n      const { data: pendingCodes, error: codesError } = await supabase\n        .from('verification_codes')\n        .select('created_at, expires_at')\n        .eq('user_id', data.user.id);\n\n      console.log(`[validate-token] Request ${requestId}: Verification codes status: ${JSON.stringify({\n        hasPendingCodes: pendingCodes && pendingCodes.length > 0,\n        pendingCodesCount: pendingCodes?.length || 0,\n        checkError: !!codesError\n      })}`);\n\n      clearTimeout(timeoutId);\n      return createErrorResponse('Email verification required', 403, 'email_verification_required');\n    }\n\n    // Check standard Supabase email confirmation too (double check)\n    console.log(`[validate-token] Request ${requestId}: Checking standard Supabase email_confirmed_at status`);\n\n    const { data: userData, error: userError } = await supabase.auth.admin.getUserById(data.user.id);\n\n    console.log(`[validate-token] Request ${requestId}: Auth user status: ${JSON.stringify({\n      userID: data.user.id,\n      emailConfirmedAt: userData?.user?.email_confirmed_at ? 'Confirmed' : 'Not confirmed',\n      hasError: !!userError\n    })}`);\n\n    if (userError) {\n      console.error(`[validate-token] Request ${requestId}: Failed to verify standard email confirmation: ${userError.message}`);\n      clearTimeout(timeoutId);\n      return createErrorResponse('Account verification status could not be confirmed', 401, 'verification_check_failed');\n    }\n\n    if (!userData.user.email_confirmed_at) {\n      console.error(`[validate-token] Request ${requestId}: SECURITY BLOCK - User ${data.user.id} has no email_confirmed_at timestamp`);\n      clearTimeout(timeoutId);\n      return createErrorResponse('Email verification required', 403, 'email_verification_required');\n    }\n\n    // If we reach here, token is valid AND user is verified by BOTH methods\n    console.log(`[validate-token] Request ${requestId}: VALIDATION SUCCESSFUL - Token validated for verified user ${data.user.id}`);\n    console.log(`=====================================================\\n\\n`);\n    clearTimeout(timeoutId);\n    return createSuccessResponse({ valid: true });\n    \n  } catch (error) {\n    console.error(`[validate-token] Request ${requestId}: Unexpected error:`, error);\n    clearTimeout(timeoutId);\n    return createErrorResponse(\n      'Error validating token', \n      500, \n      'internal_error'\n    );\n  }\n} "]}
{"version":3,"file":"google-oauth.js","sourceRoot":"","sources":["../../../src/backend/functions/google-oauth.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport { \n  supabaseAdmin, \n  oauthTokenManager, \n  oauthConfigService, \n  OAuthDatabaseError \n} from '../services';\nimport { google } from 'googleapis';\n\n// Use centralized configuration\nconst googleConfig = oauthConfigService.getGoogleConfig();\n\nconsole.log(`[google-oauth] Using redirect URI: ${googleConfig.redirectUri}`);\n\n// Frontend URL for postMessage - MUST match the actual origin of the app\nconst FRONTEND_URL = 'https://elber-ai.netlify.app';\nconsole.log(`[google-oauth] Using frontend URL for postMessage: ${FRONTEND_URL}`);\n\n// Log configuration on function initialization for debugging (not in requests)\nconsole.log('[google-oauth] Function loaded with config:', {\n  clientIdPresent: !!googleConfig.clientId,\n  clientSecretPresent: !!googleConfig.clientSecret,\n  redirectUri: googleConfig.redirectUri,\n  frontendUrl: FRONTEND_URL,\n  nodeEnv: process.env.NODE_ENV\n});\n\n// Create OAuth2 client\nconst oauth2Client = new google.auth.OAuth2(\n  googleConfig.clientId,\n  googleConfig.clientSecret,\n  googleConfig.redirectUri\n);\n\n// Common headers moved to inline usage to avoid unused variable warning\n\n// Define base CORS headers for all responses\nconst baseCorsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\", // Allow all origins\n  \"Access-Control-Allow-Headers\": \"Content-Type, Authorization, apikey, x-client-info, baggage, sentry-trace\",\n};\n\n// Define interface for the OAuth state parameter\ninterface OAuthState {\n  userId: string;\n  origin: string;\n  timestamp: number;\n}\n\n// Define enum for OAuth error types to improve type safety\nenum OAuthErrorType {\n  STATE_MISSING = 'state_missing',\n  CODE_MISSING = 'code_missing',\n  CODE_USED = 'code_used',\n  TOKEN_EXCHANGE_FAILED = 'token_exchange_failed',\n  INVALID_STATE_USERID = 'invalid_state_userid',\n  MISSING_PROVIDER_USERID = 'missing_provider_userid',\n  DATABASE_ERROR = 'database_error',\n  CALLBACK_FAILED = 'callback_failed',\n  GOOGLE_ERROR = 'google_error'\n}\n\n// Define interface for OAuth error responses\ninterface OAuthErrorResponse {\n  type: 'google-oauth-error';\n  provider: 'google';\n  error: OAuthErrorType;\n  errorMessage: string;\n}\n\n// Define interface for OAuth success response\ninterface OAuthSuccessResponse {\n  type: 'google-oauth-success';\n  provider: 'google';\n}\n\n// Define union type for all OAuth responses\ntype OAuthResponse = OAuthErrorResponse | OAuthSuccessResponse;\n\n// Define interface for Google's token set (aligns with google-auth-library Credentials)\ninterface GoogleTokenSet {\n  access_token?: string | null;\n  refresh_token?: string | null;\n  expiry_date?: number | null; \n  scope?: string;\n  id_token?: string | null;\n  token_type?: string | null;\n}\n\n// Define interface for the decoded ID token payload\ninterface GoogleDecodedIdToken {\n  sub: string; // Subject - The Google User ID\n  email?: string;\n  email_verified?: boolean;\n  name?: string;\n  given_name?: string;\n  family_name?: string;\n  picture?: string;\n  locale?: string;\n  hd?: string; // Example for G Suite hosted domain\n  [key: string]: unknown; // Allow other non-standard claims, with unknown type for safety\n}\n\n// OAuth connection interface removed - now using centralized service types\n\n// Helper function to handle OAuth errors consistently\nconst createOAuthError = (\n  errorType: OAuthErrorType,\n  errorMessage: string,\n  origin: string,\n  statusCode = 400\n): { statusCode: number; headers: Record<string, string>; body: string } => {\n  console.error(`[google-oauth /callback] Error: ${errorType} - ${errorMessage}`);\n  const errorResponse: OAuthErrorResponse = {\n    type: 'google-oauth-error',\n    provider: 'google',\n    error: errorType,\n    errorMessage: errorMessage\n  };\n  const errorHtml = generatePostMessageHtml(\n    errorResponse,\n    origin,\n    'Authorization Error',\n    `Authorization failed: ${errorMessage}. You can close this window.`\n  );\n  return { \n    statusCode: statusCode, \n    headers: { ...baseCorsHeaders, 'Content-Type': 'text/html', 'Cache-Control': 'no-store, max-age=0' }, \n    body: errorHtml \n  };\n};\n\n// Helper function to generate HTML response for postMessage with improved type safety\nconst generatePostMessageHtml = (\n  message: OAuthResponse, \n  targetOrigin: string, \n  title: string, \n  bodyText: string\n): string => {\n  const messageString = JSON.stringify(message);\n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <title>${title}</title>\n      <script>\n        (function() {\n          try {\n            console.log('Callback: Attempting to postMessage to ${targetOrigin} with message: ${messageString.replace(/'/g, \"\\\\'\")}.');\n            if (window.opener && window.opener.postMessage) {\n              window.opener.postMessage(${messageString}, '${targetOrigin}');\n              console.log('postMessage sent.');\n            } else {\n              console.warn('window.opener or window.opener.postMessage not available. Cannot send postMessage.');\n            }\n          } catch (e) {\n            console.error('Error in callback postMessage script:', e);\n          } finally {\n            setTimeout(function() { window.close(); }, 500);\n          }\n        })();\n      </script>\n    </head>\n    <body>\n      <p>${bodyText}</p>\n    </body>\n    </html>`;\n};\n\n// Keep a small cache of recently used codes to prevent duplicate exchange attempts\n// OAuth codes can only be used once, so we need to track which ones were already used\nconst usedAuthCodes = new Set<string>();\n\n// Helper function to check if a code was already used\nconst isCodeAlreadyUsed = (code: string): boolean => {\n  if (usedAuthCodes.has(code)) {\n    console.log(`[google-oauth] Auth code ${code.substring(0, 10)}... was already used`);\n    return true;\n  }\n\n  // Add to the used codes set\n  usedAuthCodes.add(code);\n\n  // Keep the set limited to last 100 codes to prevent memory leaks\n  if (usedAuthCodes.size > 100) {\n    const iterator = usedAuthCodes.values();\n    const nextValue = iterator.next().value;\n    if (nextValue) {\n      usedAuthCodes.delete(nextValue);\n    }\n  }\n\n  return false;\n};\n\n// Token storage is now handled by the oauthTokenManager service\n\n/**\n * Decodes a JWT token to extract the payload\n * @param token - The JWT token to decode\n * @returns The decoded payload or null if invalid\n */\nfunction decodeJwtPayload<T>(token: string): T | null {\n  try {\n    // JWT structure is header.payload.signature\n    const parts = token.split('.');\n    if (parts.length !== 3) {\n      console.warn('Invalid JWT token format');\n      return null;\n    }\n    \n    // Decode the payload (second part)\n    const payload = Buffer.from(parts[1], 'base64').toString();\n    return JSON.parse(payload) as T;\n  } catch (e) {\n    console.error('Error decoding JWT payload:', e);\n    return null;\n  }\n}\n\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext) => {\n  console.log(`[google-oauth] Handler called with path: ${event.path}, method: ${event.httpMethod}`);\n\n  // Normalize path by removing any duplicate Netlify function prefixes\n  let path = event.path;\n  if (path.includes('/.netlify/functions/.netlify/functions/')) {\n    path = path.replace('/.netlify/functions/.netlify/functions/', '/.netlify/functions/');\n    console.log(`[google-oauth] Normalized path: ${path}`);\n  }\n\n  const jsonResponseHeaders = { ...baseCorsHeaders, 'Content-Type': 'application/json', 'Cache-Control': 'no-store, max-age=0' };\n  const htmlResponseHeaders = { ...baseCorsHeaders, 'Content-Type': 'text/html', 'Cache-Control': 'no-store, max-age=0' };\n\n\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204,\n      headers: {\n        ...baseCorsHeaders,\n        \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n      },\n      body: \"\",\n    };\n  }\n\n  const { httpMethod } = event;\n  const authHeader = event.headers.authorization;\n\n  console.log(`[google-oauth] Processing request: ${path} (${httpMethod})`);\n  console.log(`[google-oauth] Auth header present: ${!!authHeader}`);\n  console.log(`[google-oauth] Query parameters:`, event.queryStringParameters);\n\n  // Handle potential paths consistently\n  const isAuthorize = path.endsWith('/authorize') || path.endsWith('/google-oauth/authorize');\n  const isCallback = path.endsWith('/callback') || path.endsWith('/google-oauth/callback');\n\n  // Extract token from authorization header\n  if (!authHeader && !isAuthorize && !isCallback) {\n    return {\n      statusCode: 401,\n      body: JSON.stringify({ message: \"Authentication required\" }),\n      headers: jsonResponseHeaders,\n    };\n  }\n\n  let userId: string | null = null;\n  let userEmail: string | null = null; // For logging or other purposes if needed\n  \n  if (authHeader) {\n    const token = authHeader.split(' ')[1];\n    const { data: { user: supabaseUser }, error: supabaseError } = await supabaseAdmin.auth.getUser(token);\n    \n    if (supabaseError || !supabaseUser) {\n      // This error is for an invalid Supabase session token, not for Google OAuth itself\n      console.warn('[google-oauth] Invalid Supabase session token in authHeader:', supabaseError?.message);\n      // For /authorize, if there's no valid session, we can't proceed to link to a user.\n      // For /callback, state should contain the user_id, so this might be less critical here but good for other routes.\n      // For now, if it's /authorize and this fails, we will hit the userId check below.\n    } else {\n      userId = supabaseUser.id;\n      userEmail = supabaseUser.email || null; // Capture email if available\n      console.log(`[google-oauth] Supabase user identified: ${userId}, email: ${userEmail}`);\n    }\n  }\n\n  // Determine the specific action based on the path\n  // Example: /google-oauth/initiate-auth, /google-oauth/callback\n  const pathParts = event.path.split('/').filter(p => p);\n  const action = pathParts[pathParts.length -1]; // e.g., 'initiate-auth', 'callback'\n\n  console.log(`[google-oauth] Action determined: '${action}' from path: ${event.path}`);\n\n  // Handle request to initiate OAuth flow\n  if (action === 'initiate-auth' && event.httpMethod === 'POST') { // Changed to POST\n    if (!userId) {\n      console.error('[google-oauth /initiate-auth] Failed: Valid authenticated user ID is required. No Supabase session token in Authorization header or token invalid.');\n      return {\n        statusCode: 401,\n        body: JSON.stringify({ message: \"Authentication required: Valid Supabase session needed.\" }),\n        headers: jsonResponseHeaders,\n      };\n    }\n    \n    const requestBody = event.body ? JSON.parse(event.body) : {};\n    const originParam = requestBody.origin || event.headers.origin || FRONTEND_URL;\n    console.log(`[google-oauth /initiate-auth] Origin: ${originParam}, User ID: ${userId}`);\n\n    const stateParam: OAuthState = {\n      userId: userId,\n      origin: originParam,\n      timestamp: Date.now()\n    };\n    const stateString = Buffer.from(JSON.stringify(stateParam)).toString('base64');\n\n    // Determine feature from request body, default to 'contacts'\n    let feature: 'contacts' | 'calendar' | 'calendar_readonly' = 'contacts'; \n    if (requestBody.feature && ['contacts', 'calendar', 'calendar_readonly'].includes(requestBody.feature)) {\n      feature = requestBody.feature as 'contacts' | 'calendar' | 'calendar_readonly';\n    }\n    console.log(`[google-oauth /initiate-auth] Requesting scopes for feature: ${feature}`);\n    const scopes = oauthConfigService.getRequiredScopesForFeature(feature);\n\n    const authUrl = oauth2Client.generateAuthUrl({\n      access_type: 'offline', // Important for getting a refresh token\n      scope: scopes,\n      prompt: 'consent', // Prompt for consent, good for dev, might remove 'consent' for smoother UX later if user already granted\n      state: stateString,\n    });\n\n    console.log(`[google-oauth /initiate-auth] Generated Google auth URL for user ${userId}`);\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ authUrl }),\n      headers: jsonResponseHeaders,\n    };\n  }\n\n  // Handle OAuth callback from Google\n  if (action === 'callback' && event.httpMethod === 'GET') {\n    let originUrlForPostMessage = FRONTEND_URL; // Default, will be updated from state\n\n    try {\n      const { code, state: stateFromGoogle, error: googleErrorParam } = event.queryStringParameters || {};\n\n      if (stateFromGoogle) {\n        try {\n          const decodedStateEarly = Buffer.from(stateFromGoogle, 'base64').toString('utf-8');\n          const stateObjEarly: OAuthState = JSON.parse(decodedStateEarly);\n          originUrlForPostMessage = stateObjEarly.origin || FRONTEND_URL;\n          console.log(`[google-oauth /callback] Determined origin for postMessage: ${originUrlForPostMessage}`);\n        } catch (e) {\n          console.warn('[google-oauth /callback] Could not parse state early for origin. Using default.', e);\n        }\n      } else {\n        console.error('[google-oauth /callback] State parameter is missing from Google callback.');\n        return createOAuthError(\n          OAuthErrorType.STATE_MISSING,\n          'State parameter missing from callback.',\n          originUrlForPostMessage\n        );\n      }\n\n      if (googleErrorParam) {\n        console.error(`[google-oauth /callback] Error from Google: ${googleErrorParam}`);\n        return createOAuthError(\n          OAuthErrorType.GOOGLE_ERROR,\n          `Google authentication failed: ${googleErrorParam}`,\n          originUrlForPostMessage\n        );\n      }\n\n      if (!code) {\n        console.error('[google-oauth /callback] Code parameter is missing from Google callback.');\n        return createOAuthError(\n          OAuthErrorType.CODE_MISSING,\n          'Authorization code missing from callback.',\n          originUrlForPostMessage\n        );\n      }\n\n      if (isCodeAlreadyUsed(code)) {\n        console.warn(`[google-oauth /callback] Auth code ${code.substring(0,10)}... has already been used.`);\n        return createOAuthError(\n          OAuthErrorType.CODE_USED,\n          'Authorization code already used.',\n          originUrlForPostMessage\n        );\n      }\n      \n      console.log(`[google-oauth /callback] Exchanging code for tokens. Code: ${code.substring(0,10)}...`);\n        const tokenResponse = await oauth2Client.getToken(code);\n      const tokens: GoogleTokenSet = tokenResponse.tokens;\n\n      if (!tokens || !tokens.access_token) {\n        console.error('[google-oauth /callback] Failed to retrieve tokens or access_token from Google.');\n        return createOAuthError(\n          OAuthErrorType.TOKEN_EXCHANGE_FAILED,\n          'Failed to exchange code for tokens.',\n          originUrlForPostMessage,\n          500\n        );\n      }\n      console.log('[google-oauth /callback] Tokens received from Google.');\n\n      const { access_token, refresh_token, expiry_date, scope: scopeString, id_token } = tokens;\n      console.log(`[google-oauth /callback] Scope string from Google: ${scopeString}`);\n\n      const decodedStateString = Buffer.from(stateFromGoogle, 'base64').toString('utf-8');\n      const parsedState: OAuthState = JSON.parse(decodedStateString);\n      const userIdFromState = parsedState.userId;\n      const finalPostMessageOrigin = parsedState.origin || FRONTEND_URL; // Use origin from state for postMessage\n\n      // Basic UUID validation (you might want a more robust one)\n      const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\n      if (!userIdFromState || !uuidRegex.test(userIdFromState)) {\n          console.error(`[google-oauth /callback] Invalid or missing user ID in state: ${userIdFromState}`);\n          return createOAuthError(\n            OAuthErrorType.INVALID_STATE_USERID,\n            'User ID in state is invalid.',\n            finalPostMessageOrigin\n          );\n      }\n      console.log(`[google-oauth /callback] User ID from state: ${userIdFromState}`);\n\n      let provider_user_id: string | null = null;\n      if (id_token) {\n        try {\n          const idTokenPayload = decodeJwtPayload<GoogleDecodedIdToken>(id_token);\n          if (idTokenPayload && idTokenPayload.sub) {\n            provider_user_id = idTokenPayload.sub;\n            console.log(`[google-oauth /callback] Provider User ID (sub) from id_token: ${provider_user_id}`);\n          } else {\n            console.error('[google-oauth /callback] Could not extract sub claim from id_token payload');\n          }\n        } catch (e) {\n          console.warn('[google-oauth /callback] Failed to parse id_token to get provider_user_id', e);\n        }\n      }\n\n      if (!provider_user_id) {\n        console.error('[google-oauth /callback] Provider user ID (sub) could not be extracted from id_token.');\n        return createOAuthError(\n          OAuthErrorType.MISSING_PROVIDER_USERID,\n          'Could not determine provider user ID.',\n          finalPostMessageOrigin,\n          500\n        );\n      }\n      \n      const expires_at_timestamp = expiry_date ? new Date(expiry_date).toISOString() : null;\n\n      console.log(`[google-oauth /callback] Saving tokens for user ${userIdFromState}`);\n      try {\n        await oauthTokenManager.saveToken(\n          userIdFromState,\n          'google', \n          { \n            access_token, \n            refresh_token, \n            expires_at: expires_at_timestamp,\n            scope: scopeString,\n            id_token\n          }, \n          provider_user_id\n        );\n      } catch (error) {\n        // Handle known OAuth errors\n        if (error instanceof OAuthDatabaseError) {\n          console.error('[google-oauth /callback] Error saving tokens:', error.message);\n          return createOAuthError(\n            OAuthErrorType.DATABASE_ERROR,\n            `Failed to store tokens: ${error.message}`,\n            finalPostMessageOrigin,\n            500\n          );\n        }\n        \n        // Handle other errors\n        console.error('[google-oauth /callback] Unexpected error saving tokens:', error);\n        return createOAuthError(\n          OAuthErrorType.DATABASE_ERROR,\n          `Failed to store tokens: ${error instanceof Error ? error.message : String(error)}`,\n          finalPostMessageOrigin,\n          500\n        );\n      }\n\n      console.log(`[google-oauth /callback] Successfully stored tokens for user ${userIdFromState}.`);\n      const successHtml = generatePostMessageHtml(\n        { type: 'google-oauth-success', provider: 'google' },\n        finalPostMessageOrigin,\n        'Authorization Success',\n        'Authorization successful. You can close this window.'\n      );\n      return { statusCode: 200, headers: htmlResponseHeaders, body: successHtml };\n\n    } catch (err) {\n      const error = err as Error;\n      console.error('[google-oauth /callback] General error in callback handler:', error.message, error.stack);\n      return createOAuthError(\n        OAuthErrorType.CALLBACK_FAILED,\n        error.message || 'Unknown error during callback processing.',\n        originUrlForPostMessage,\n        500\n      );\n    }\n  }\n\n  console.warn(`[google-oauth] Unhandled action or method. Action: ${action}, Method: ${event.httpMethod}, Path: ${event.path}`);\n  return {\n    statusCode: 404,\n    body: JSON.stringify({ message: 'Not Found or Method Not Allowed for action' }),\n    headers: jsonResponseHeaders,\n  };\n};\n\nexport { handler };"]}
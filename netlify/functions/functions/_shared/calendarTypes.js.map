{"version":3,"file":"calendarTypes.js","sourceRoot":"","sources":["../../../../src/backend/functions/_shared/calendarTypes.ts"],"names":[],"mappings":"","sourcesContent":["import { HandlerEvent as BaseHandlerEvent } from \"@netlify/functions\";\nimport { JwtPayload } from 'jwt-decode';\nimport { RecurringCalendarEvent, RecurrencePatternType } from '../../types/recurrence'; // Assuming this is the correct path\n\n// Extended HandlerEvent to include pathParameters property\nexport interface HandlerEvent extends BaseHandlerEvent {\n  pathParameters?: { \n    id?: string;\n    [key: string]: string | undefined;\n  };\n}\n\n/**\n * Interface for the decoded JWT payload, extending JwtPayload\n */\nexport interface DecodedAppJwt extends JwtPayload {\n  sub?: string; // Subject (user ID) is standard in JwtPayload\n}\n\n/**\n * Base interface for calendar events, can be extended for specific uses.\n * This references the more detailed RecurringCalendarEvent from the main types.\n */\nexport type BaseCalendarEvent = Omit<RecurringCalendarEvent, 'event_id' | 'user_id' | 'created_at' | 'updated_at'>;\n\n// Interface for the payload when updating an event (raw from client)\nexport interface RawEventUpdatePayload extends Partial<Omit<RecurringCalendarEvent, 'event_id' | 'created_at' | 'user_id'>> {\n  update_scope?: string; // 'single', 'future', 'all' - will be removed before DB op\n}\n\n// Interface for creating a new calendar event (payload from client)\nexport interface NewCalendarEvent {\n  title: string;\n  start_time: string; // ISO string\n  end_time: string; // ISO string\n  description?: string;\n  location?: string;\n  is_all_day?: boolean;\n  google_event_id?: string | null;\n  zoom_meeting_id?: string | null;\n  is_recurring?: boolean;\n  recurrence_pattern?: RecurrencePatternType | null;\n  recurrence_interval?: number | null;\n  recurrence_day_of_week?: Record<string, boolean> | null; // jsonb in database\n  recurrence_day_of_month?: number | null;\n  recurrence_month?: number | null;\n  recurrence_end_date?: string | null; // ISO string\n  recurrence_count?: number | null;\n  parent_event_id?: string | null; // UUID\n  is_exception?: boolean;\n  recurrence_rule?: string | null;\n  exception_date?: string | null; // ISO string\n  series_id?: string | null; // UUID\n  recurrence_timezone?: string | null;\n}\n\n// Re-exporting RecurringCalendarEvent for convenience if it's directly used by functions\nexport type { RecurringCalendarEvent }; "]}
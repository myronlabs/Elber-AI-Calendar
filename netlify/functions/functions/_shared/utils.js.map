{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/backend/functions/_shared/utils.ts"],"names":[],"mappings":";;;AAsEA,gDAcC;AAnFD,2CAAuC;AAGvC;;;;GAIG;AACI,MAAM,WAAW,GAAG,CAAC,IAAY,EAAW,EAAE;IACnD,IAAI,CAAC,IAAI;QAAE,OAAO,KAAK,CAAC;IACxB,MAAM,SAAS,GAAG,+EAA+E,CAAC;IAClG,OAAO,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9B,CAAC,CAAC;AAJW,QAAA,WAAW,eAItB;AAEF;;;;;GAKG;AACI,MAAM,kBAAkB,GAAG,CAAC,KAAmB,EAAE,eAAuB,cAAc,EAAiB,EAAE;IAC9G,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,EAAE,aAAa,CAAC;IAChD,MAAM,SAAS,GAAG,IAAI,YAAY,GAAG,CAAC;IAEtC,IAAI,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;QACnD,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,0BAA0B;QACjE,IAAI,CAAC;YACH,MAAM,YAAY,GAAG,IAAA,sBAAS,EAAa,KAAK,CAAC,CAAC;YAClD,IAAI,YAAY,IAAI,YAAY,CAAC,GAAG,EAAE,CAAC;gBACrC,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,6BAA6B,YAAY,CAAC,GAAG,YAAY,CAAC,CAAC;gBACnF,OAAO,YAAY,CAAC,GAAG,CAAC;YAC1B,CAAC;iBAAM,CAAC;gBACN,OAAO,CAAC,IAAI,CAAC,GAAG,SAAS,wEAAwE,EAAE,YAAY,CAAC,CAAC;gBACjH,OAAO,IAAI,CAAC;YACd,CAAC;QACH,CAAC;QAAC,OAAO,KAAc,EAAE,CAAC;YACxB,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,oCAAoC,CAAC;YACnG,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,wBAAwB,YAAY,EAAE,EAAE,KAAK,CAAC,CAAC;YACzE,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IACD,yFAAyF;IACzF,IAAI,CAAC,UAAU,EAAE,CAAC;QACd,OAAO,CAAC,IAAI,CAAC,GAAG,SAAS,iCAAiC,CAAC,CAAC;IAChE,CAAC;SAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;QAC3C,OAAO,CAAC,IAAI,CAAC,GAAG,SAAS,wDAAwD,CAAC,CAAC;IACvF,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AA5BW,QAAA,kBAAkB,sBA4B7B;AAEF;;;;;GAKG;AACI,MAAM,qBAAqB,GAAG,GAAW,EAAE;IAChD,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,uBAAuB,CAAC;IAC3F,mDAAmD;IACnD,MAAM,cAAc,GAAG,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;IAC9E,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AALW,QAAA,qBAAqB,yBAKhC;AAEF;;;;;GAKG;AACH,SAAgB,kBAAkB,CAAC,eAAwC,EAAE;IAC3E,MAAM,OAAO,GAA2B;QACtC,cAAc,EAAE,kBAAkB;KACnC,CAAC;IACF,4FAA4F;IAC5F,IAAI,YAAY,EAAE,aAAa,EAAE,CAAC;QAChC,OAAO,CAAC,eAAe,CAAC,GAAG,YAAY,CAAC,aAAa,CAAC;IACxD,CAAC;IACD,6FAA6F;IAC7F,YAAY;IACZ,wCAAwC;IACxC,4DAA4D;IAC5D,IAAI;IACJ,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import type { HandlerEvent } from \"@netlify/functions\";\nimport { jwtDecode } from 'jwt-decode';\nimport type { DecodedJwt } from './types';\n\n/**\n * Validates if the given string is a valid UUID.\n * @param uuid The string to validate.\n * @returns True if the string is a valid UUID, false otherwise.\n */\nexport const isValidUUID = (uuid: string): boolean => {\n  if (!uuid) return false;\n  const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\n  return uuidRegex.test(uuid);\n};\n\n/**\n * Extracts the user ID (subject) from a JWT in the Authorization header.\n * @param event The Netlify handler event object.\n * @param functionName Optional name of the calling function for logging purposes.\n * @returns The user ID (sub claim) if found and valid, otherwise null.\n */\nexport const getUserIdFromEvent = (event: HandlerEvent, functionName: string = 'shared-utils'): string | null => {\n  const authHeader = event.headers?.authorization;\n  const logPrefix = `[${functionName}]`;\n\n  if (authHeader && authHeader.startsWith('Bearer ')) {\n    const token = authHeader.substring(7); // Remove \"Bearer \" prefix\n    try {\n      const decodedToken = jwtDecode<DecodedJwt>(token);\n      if (decodedToken && decodedToken.sub) {\n        console.log(`${logPrefix} Extracted user ID (sub): ${decodedToken.sub} from JWT.`);\n        return decodedToken.sub;\n      } else {\n        console.warn(`${logPrefix} JWT decoded but did not contain a sub (user ID) claim. Decoded token:`, decodedToken);\n        return null;\n      }\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error during JWT decoding.';\n      console.error(`${logPrefix} Error decoding JWT: ${errorMessage}`, error);\n      return null;\n    }\n  }\n  // Warn if no auth header to help with debugging, but don't log all headers for security.\n  if (!authHeader) {\n      console.warn(`${logPrefix} No Authorization header found.`);\n  } else if (!authHeader.startsWith('Bearer ')) {\n      console.warn(`${logPrefix} Authorization header found but is not a Bearer token.`);\n  }\n  return null;\n};\n\n/**\n * Constructs the base URL for internal API calls.\n * Uses Netlify environment variables (URL, DEPLOY_PRIME_URL) or defaults to localhost for Netlify Dev.\n * This URL can then be used as a base to construct full paths to other Netlify functions or API endpoints.\n * @returns The base URL string (e.g., \"https://your-site.netlify.app\" or \"http://localhost:8888\").\n */\nexport const getInternalApiBaseUrl = (): string => {\n  const baseUrl = process.env.URL || process.env.DEPLOY_PRIME_URL || 'http://localhost:8888';\n  // Ensure no trailing slash on the original baseUrl\n  const cleanedBaseUrl = baseUrl.endsWith('/') ? baseUrl.slice(0, -1) : baseUrl;\n  return cleanedBaseUrl;\n};\n\n/**\n * Generates a standard set of headers for internal API calls.\n * Includes 'Content-Type: application/json' and forwards the Authorization header from the original event.\n * @param eventHeaders The headers from the original HandlerEvent.\n * @returns A record of HTTP headers.\n */\nexport function getInternalHeaders(eventHeaders: HandlerEvent['headers'] = {}): Record<string, string> {\n  const headers: Record<string, string> = {\n    'Content-Type': 'application/json',\n  };\n  // Forward the original Authorization header if present, as internal services might need it.\n  if (eventHeaders?.authorization) {\n    headers['Authorization'] = eventHeaders.authorization;\n  }\n  // Add other headers if they need to be consistently forwarded, e.g., for tracing or context.\n  // Example: \n  // if (eventHeaders?.['x-request-id']) {\n  //   headers['x-request-id'] = eventHeaders['x-request-id'];\n  // }\n  return headers;\n} "]}
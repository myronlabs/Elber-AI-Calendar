{"version":3,"file":"feedback.js","sourceRoot":"","sources":["../../../../src/backend/functions/_shared/feedback.ts"],"names":[],"mappings":";AAAA;;GAEG;;AAeH,0CAuBC;AA1BD;;GAEG;AACI,KAAK,UAAU,eAAe,CACnC,QAAsB,EACtB,SAAiB,SAAS;IAE1B,IAAI,CAAC;QACH,6BAA6B;QAC7B,MAAM,kBAAkB,GAAG;YACzB,GAAG,QAAQ;YACX,MAAM,EAAE,QAAQ,CAAC,MAAM,IAAI,MAAM;YACjC,SAAS,EAAE,QAAQ,CAAC,SAAS,IAAI,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SAC1D,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,kBAAkB,CAAC,CAAC;QAExD,+DAA+D;QAC/D,0BAA0B;QAC1B,mCAAmC;QAEnC,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;QACnD,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC","sourcesContent":["/**\n * Feedback processing utilities\n */\n\ninterface FeedbackData {\n  feedbackType: string;\n  rating?: number;\n  text?: string;\n  userId?: string;\n  sessionId?: string;\n  timestamp?: string;\n  source?: string;\n}\n\n/**\n * Process and store user feedback about the assistant\n */\nexport async function processFeedback(\n  feedback: FeedbackData,\n  source: string = 'unknown'\n): Promise<boolean> {\n  try {\n    // Add source if not provided\n    const feedbackWithSource = {\n      ...feedback,\n      source: feedback.source || source,\n      timestamp: feedback.timestamp || new Date().toISOString()\n    };\n    \n    console.log('Processing feedback:', feedbackWithSource);\n    \n    // In a real implementation, you would store this in a database\n    // For now, we just log it\n    // TODO: Implement feedback storage\n    \n    return true;\n  } catch (error) {\n    console.error('Error processing feedback:', error);\n    return false;\n  }\n} "]}
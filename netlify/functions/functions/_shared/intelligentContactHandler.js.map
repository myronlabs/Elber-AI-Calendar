{"version":3,"file":"intelligentContactHandler.js","sourceRoot":"","sources":["../../../../src/backend/functions/_shared/intelligentContactHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Intelligent Contact Handler - Implements smart contact management following OpenAI best practices\n * Handles complete workflows in single operations, understands user intent naturally\n * \n * Returns structured objects (not JSON strings) for OpenAI to format into natural language\n */\n\nimport { supabaseAdmin } from '@services/supabaseAdmin';\nimport { contactService } from '@services/contactService';\nimport type { Contact } from '../../types/domain';\nimport { clearUserCache } from '../contacts-search';\n\nexport interface IntelligentContactArgs {\n  user_request: string;\n  intended_action: 'search' | 'create' | 'update' | 'delete' | 'merge';\n  search_term: string | null;\n  contact_updates: {\n    // Personal Information\n    first_name: string | null;\n    middle_name: string | null;\n    last_name: string | null;\n    nickname: string | null;\n    \n    // Contact Information\n    email: string | null;\n    phone: string | null;\n    mobile_phone: string | null;\n    work_phone: string | null;\n    website: string | null;\n    \n    // Professional Information\n    company: string | null;\n    job_title: string | null;\n    department: string | null;\n    \n    // Address Information\n    street_address: string | null;\n    street_address_2: string | null;\n    city: string | null;\n    state_province: string | null;\n    postal_code: string | null;\n    country: string | null;\n    formatted_address: string | null;\n    \n    // Social Media\n    social_linkedin: string | null;\n    social_twitter: string | null;\n    \n    // Preferences and Metadata\n    tags: string[] | null;\n    preferred_contact_method: string | null;\n    timezone: string | null;\n    language: string | null;\n    \n    // Other Information\n    birthday: string | null;\n    notes: string | null;\n    \n    // Import tracking (for updates only, not creation)\n    import_source: string | null;\n    google_contact_id: string | null;\n  } | null;\n  confirmation_provided: boolean;\n}\n\nexport interface ContactHandlerContext {\n  supabaseAdmin: typeof supabaseAdmin;\n  internalApiBaseUrl: string;\n  internalHeaders: Record<string, string>;\n  config: {\n    contactSummaryThreshold: number;\n    maxContactResults: number;\n    upcomingBirthdayDays: number;\n  };\n  currentUserEmail?: string | null;\n  logPrefix: string;\n  contactSummaryThreshold: number;\n}\n\n// Define structured response types for OpenAI to process\nexport interface ContactOperationResult {\n  success: boolean;\n  operation: string;\n  user_request: string;\n  message: string;\n  error?: string;\n  contacts?: Contact[];\n  total_found?: number;\n  contact?: Contact | {\n    contact_id: string;\n    name: string;\n    email?: string;\n    phone?: string;\n    company?: string;\n  };\n  results?: Array<{\n    contact_id: string;\n    name: string;\n    updated: boolean;\n    changes?: string[];\n    message?: string;\n    error?: string;\n    contact_data?: Contact;\n  }>;\n  total_contacts?: number;\n  updated_contacts?: number;\n  triggerRefresh?: boolean;\n  contact_id?: string;\n  matches?: Array<{\n    contact_id: string;\n    name: string;\n    email?: string;\n    phone?: string;\n    company?: string;\n  }>;\n  primary_contact?: string;\n  merged_contacts?: number;\n}\n\n/**\n * Detects if a search query is too vague and needs clarification\n */\nfunction isVagueSearchQuery(userRequest: string, searchTerm: string): boolean {\n  const request = userRequest.toLowerCase().trim();\n  const term = searchTerm.toLowerCase().trim();\n  \n  // Very short search terms (1-2 characters) are usually too vague\n  if (term.length <= 2) {\n    return true;\n  }\n  \n  // Common vague search patterns\n  const vaguePatterns = [\n    // Generic requests without specific identifiers\n    /^(find|search|show|get|list)?\\s*(a\\s+)?contact/i,\n    /^(find|search|show|get|list)?\\s*(my\\s+)?contacts?$/i,\n    /^(find|search|show|get|list)?\\s*contact\\s+(by\\s+)?(name|email|phone)/i,\n    /^(find|search|show|get|list)?\\s*someone/i,\n    /^(find|search|show|get|list)?\\s*person/i,\n    /^(find|search|show|get|list)?\\s*client/i,\n    /^(find|search|show|get|list)?\\s*customer/i,\n    \n    // Generic terms that don't identify specific contacts\n    /^(all|any|some)\\s+contacts?/i,\n    /^contacts?\\s+(with|having|that\\s+have)/i,\n    /^who\\s+is/i,\n    /^what\\s+contact/i,\n    /^which\\s+contact/i,\n  ];\n  \n  // Check if the request matches any vague pattern\n  for (const pattern of vaguePatterns) {\n    if (pattern.test(request)) {\n      return true;\n    }\n  }\n  \n  // Generic single words that are too broad\n  const vagueTerms = [\n    'contact', 'contacts', 'person', 'people', 'someone', 'anyone', 'client', \n    'customer', 'user', 'employee', 'colleague', 'friend', 'family'\n  ];\n  \n  if (vagueTerms.includes(term)) {\n    return true;\n  }\n  \n  // Common generic phrases in search terms\n  const vagueSearchTerms = [\n    'find contact', 'search contact', 'show contact', 'get contact',\n    'find person', 'search person', 'show person', 'get person',\n    'by name', 'by email', 'by phone', 'contact info'\n  ];\n  \n  for (const vagueTerm of vagueSearchTerms) {\n    if (term.includes(vagueTerm)) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n/**\n * Validates CRUD operation arguments for completeness and correctness\n */\nfunction validateCRUDOperation(args: IntelligentContactArgs): { isValid: boolean; error?: string } {\n  // Validate intended_action\n  const validActions = ['search', 'create', 'update', 'delete', 'merge'];\n  if (!validActions.includes(args.intended_action)) {\n    return { isValid: false, error: `Invalid action: ${args.intended_action}. Must be one of: ${validActions.join(', ')}` };\n  }\n\n  // Validate action-specific requirements\n  switch (args.intended_action) {\n    case 'search':\n      if (!args.search_term || args.search_term.trim() === '') {\n        return { isValid: false, error: 'Search operations require a non-empty search_term' };\n      }\n      break;\n\n    case 'create':\n      if (!args.contact_updates) {\n        return { isValid: false, error: 'Create operations require contact_updates' };\n      }\n      if (!args.contact_updates.first_name || !args.contact_updates.last_name) {\n        return { isValid: false, error: 'Create operations require first_name and last_name' };\n      }\n      break;\n\n    case 'update':\n      if (!args.search_term || args.search_term.trim() === '') {\n        return { isValid: false, error: 'Update operations require a non-empty search_term to identify contacts' };\n      }\n      if (!args.contact_updates) {\n        // Special case: phone-to-mobile conversion doesn't require explicit contact_updates\n        const isPhoneToMobileOperation = args.user_request.toLowerCase().includes('move') && \n                                         args.user_request.toLowerCase().includes('phone') && \n                                         args.user_request.toLowerCase().includes('mobile');\n        if (!isPhoneToMobileOperation) {\n          return { isValid: false, error: 'Update operations require contact_updates (unless moving phone to mobile)' };\n        }\n      }\n      break;\n\n    case 'delete':\n      if (!args.search_term || args.search_term.trim() === '') {\n        return { isValid: false, error: 'Delete operations require a non-empty search_term to identify contacts' };\n      }\n      break;\n\n    case 'merge':\n      if (!args.search_term || args.search_term.trim() === '') {\n        return { isValid: false, error: 'Merge operations require a non-empty search_term to identify duplicate contacts' };\n      }\n      break;\n  }\n\n  return { isValid: true };\n}\n\n/**\n * Intelligent Contact Handler - One function that handles all contact operations intelligently\n * Following OpenAI best practices: handles complete workflows, understands intent, no sequential calls\n * \n * Returns structured objects for OpenAI to format into natural language responses\n * \n * CRUD OPERATIONS SUPPORTED:\n * - CREATE: Add new contacts with full field support\n * - READ: Search and retrieve contacts by any criteria\n * - UPDATE: Modify existing contacts, handles duplicates intelligently\n * - DELETE: Remove contacts with appropriate confirmation\n */\nexport async function handleIntelligentContactOperation(\n  args: IntelligentContactArgs,\n  userId: string,\n  context: ContactHandlerContext\n): Promise<ContactOperationResult> {\n  const { logPrefix } = context;\n  console.log(`${logPrefix} Intelligent contact operation: ${args.intended_action} - \"${args.user_request}\"`);\n\n  // Validate CRUD operation\n  const validation = validateCRUDOperation(args);\n  if (!validation.isValid) {\n    console.error(`${logPrefix} CRUD validation failed:`, validation.error);\n    return {\n      success: false,\n      operation: args.intended_action,\n      user_request: args.user_request,\n      error: \"ValidationError\",\n      message: validation.error || \"Validation failed\"\n    };\n  }\n\n  try {\n    switch (args.intended_action) {\n      case 'search':\n        return await handleIntelligentSearch(args, userId, context);\n      case 'create':\n        return await handleIntelligentCreate(args, userId, context);\n      case 'update':\n        return await handleIntelligentUpdate(args, userId, context);\n      case 'delete':\n        return await handleIntelligentDelete(args, userId, context);\n      case 'merge':\n        return await handleIntelligentMerge(args, userId, context);\n      default:\n        return {\n          success: false,\n          operation: args.intended_action,\n          user_request: args.user_request,\n          error: \"InvalidAction\",\n          message: `Unknown action: ${args.intended_action}`\n        };\n    }\n  } catch (error) {\n    console.error(`${logPrefix} Intelligent contact operation error:`, error);\n    return {\n      success: false,\n      operation: args.intended_action,\n      user_request: args.user_request,\n      error: \"UnexpectedError\",\n      message: `Operation failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n    };\n  }\n}\n\n/**\n * Intelligent search using optimized contact search API\n */\nasync function handleIntelligentSearch(\n  args: IntelligentContactArgs,\n  userId: string,\n  context: ContactHandlerContext\n): Promise<ContactOperationResult> {\n  const { logPrefix } = context;\n  \n  if (!args.search_term) {\n    return {\n      success: false,\n      operation: \"search\",\n      user_request: args.user_request,\n      error: \"InvalidSearch\",\n      message: \"No search criteria provided in the request.\"\n    };\n  }\n\n  // Check if the query is too vague and needs clarification\n  if (isVagueSearchQuery(args.user_request, args.search_term)) {\n    return {\n      success: false,\n      operation: \"search\",\n      user_request: args.user_request,\n      error: \"VagueQuery\",\n      message: \"I need more specific information to find the right contact. Could you please provide:\\n\\n• A person's name (e.g., \\\"John Smith\\\" or \\\"Jane Smith\\\")\\n• An email address (e.g., \\\"john@company.com\\\")\\n• A phone number\\n• A company name and role (e.g., \\\"CEO at Acme Corp\\\")\\n• Or any other specific identifier\\n\\nFor example: \\\"Find John Smith\\\", \\\"Search for jane@email.com\\\", or \\\"Show contacts at Google\\\"\"\n    };\n  }\n\n  console.log(`${logPrefix} Searching contacts: \"${args.search_term}\"`);\n\n  const searchResponse = await fetch(`${context.internalApiBaseUrl}/.netlify/functions/contacts-search`, {\n    method: 'POST',\n    headers: context.internalHeaders,\n    body: JSON.stringify({\n      query: args.search_term,\n      max_results: 20\n    })\n  });\n\n  if (!searchResponse.ok) {\n    console.error(`${logPrefix} Search API error:`, searchResponse.status);\n    return {\n      success: false,\n      operation: \"search\",\n      user_request: args.user_request,\n      error: \"SearchError\",\n      message: \"Failed to search contacts.\"\n    };\n  }\n\n  const searchData = await searchResponse.json();\n  const contacts = searchData.contacts || [];\n\n  return {\n    success: true,\n    operation: \"search\",\n    user_request: args.user_request,\n    contacts: contacts,\n    total_found: contacts.length,\n    message: contacts.length > 0 \n      ? `Found ${contacts.length} contact${contacts.length > 1 ? 's' : ''} matching \"${args.search_term}\"`\n      : `No contacts found matching \"${args.search_term}\"`\n  };\n}\n\n/**\n * Intelligent contact creation\n */\nasync function handleIntelligentCreate(\n  args: IntelligentContactArgs,\n  userId: string,\n  context: ContactHandlerContext\n): Promise<ContactOperationResult> {\n  const { logPrefix } = context;\n\n  if (!args.contact_updates?.first_name || !args.contact_updates?.last_name) {\n    return {\n      success: false,\n      operation: \"create\",\n      user_request: args.user_request,\n      error: \"InvalidData\",\n      message: \"First name and last name are required to create a contact.\"\n    };\n  }\n\n  console.log(`${logPrefix} Creating contact: ${args.contact_updates.first_name} ${args.contact_updates.last_name}`);\n\n  // Build contact data from non-null fields\n  const createData: Record<string, unknown> = { user_id: userId };\n  for (const [key, value] of Object.entries(args.contact_updates)) {\n    if (value !== null && value !== undefined) {\n      // Handle array fields (like tags) differently from string fields\n      if (Array.isArray(value)) {\n        if (value.length > 0) {\n          createData[key] = value;\n        }\n      } else if (typeof value === 'string' && value.trim() !== '') {\n      createData[key] = value;\n      }\n    }\n  }\n\n  const { data: newContact, error } = await supabaseAdmin\n    .from('contacts')\n    .insert(createData)\n    .select()\n    .single();\n\n  if (error) {\n    console.error(`${logPrefix} Create error:`, error);\n    return {\n      success: false,\n      operation: \"create\",\n      user_request: args.user_request,\n      error: \"CreateError\",\n      message: `Failed to create contact: ${error.message}`\n    };\n  }\n\n  // Clear the search cache after creating a contact\n  clearUserCache(userId);\n  console.log(`${logPrefix} Cleared search cache after creating contact`);\n\n  return {\n    success: true,\n    operation: \"create\",\n    user_request: args.user_request,\n    contact: newContact,\n    message: `Successfully created contact: ${newContact.first_name} ${newContact.last_name}`\n  };\n}\n\n/**\n * Intelligent update - handles duplicates automatically based on user intent\n */\nasync function handleIntelligentUpdate(\n  args: IntelligentContactArgs,\n  userId: string,\n  context: ContactHandlerContext\n): Promise<ContactOperationResult> {\n  const { logPrefix } = context;\n  console.log(`${logPrefix} handleIntelligentUpdate RAW ARGS: user_request: \"${args.user_request}\", search_term: \"${args.search_term}\", intended_action: \"${args.intended_action}\"`);\n  console.log(`${logPrefix} handleIntelligentUpdate CONTACT_UPDATES FROM AI:`, JSON.stringify(args.contact_updates, null, 2));\n\n  // Intelligent phone field detection based on user request\n  const userRequest = args.user_request.toLowerCase();\n  const phoneFieldMapping = detectPhoneFieldIntent(userRequest, args.contact_updates);\n  console.log(`${logPrefix} handleIntelligentUpdate DETECTED PHONE FIELD MAPPING:`, JSON.stringify(phoneFieldMapping, null, 2));\n\n  if (!args.search_term) {\n    return {\n      success: false,\n      operation: \"update_contact\",\n      user_request: args.user_request,\n      error: \"InvalidRequest\",\n      message: \"Search term is required for update operations.\"\n    };\n  }\n\n  // Find contacts using optimized search\n  console.log(`${logPrefix} Finding contacts to update: \"${args.search_term}\"`);\n  \n  const searchResponse = await fetch(`${context.internalApiBaseUrl}/.netlify/functions/contacts-search`, {\n    method: 'POST',\n    headers: context.internalHeaders,\n    body: JSON.stringify({\n      query: args.search_term,\n      max_results: 10\n    })\n  });\n\n  if (!searchResponse.ok) {\n    console.error(`${logPrefix} Search API error:`, searchResponse.status);\n    return {\n      success: false,\n      operation: \"update_contact\",\n      user_request: args.user_request,\n      error: \"SearchError\",\n      message: \"Failed to search for contacts to update.\"\n    };\n  }\n\n  const searchData = await searchResponse.json();\n  const contacts = searchData.contacts || [];\n\n  if (!contacts || contacts.length === 0) {\n    return {\n      success: false,\n      operation: \"update_contact\",\n      user_request: args.user_request,\n      error: \"NotFound\",\n      message: `No contacts found matching \"${args.search_term}\" to update.`\n    };\n  }\n\n  // Intelligent duplicate handling based on user intent\n  // For \"update John Smith phone\" → update all John Smith contacts\n  // This follows OpenAI best practices: understand intent, complete workflow in one call\n  \n  console.log(`${logPrefix} Found ${contacts.length} contacts - updating all matches intelligently`);\n\n  // Apply phone field corrections if detected\n  const updateData: Record<string, unknown> = {};\n  let hasChanges = false;\n\n  if (args.contact_updates) {\n    for (const [field, newValue] of Object.entries(args.contact_updates)) {\n      // Skip null and undefined values, but allow empty strings for clearing fields\n      if (newValue === null || newValue === undefined) {\n        continue;\n      }\n      \n      // Apply phone field corrections if this is a phone field\n      const correctedField = phoneFieldMapping[field] || field;\n      \n      // Handle array fields (like tags) differently from string fields\n      if (Array.isArray(newValue)) {\n        if (newValue.length > 0) {\n          updateData[correctedField] = newValue;\n          hasChanges = true;\n        }\n      } else if (typeof newValue === 'string') {\n        // Allow empty strings for clearing fields, but require non-empty strings for updates\n        if (newValue.trim() !== '') {\n          updateData[correctedField] = newValue;\n          hasChanges = true;\n        }\n      } else {\n        // Handle other data types (boolean, number, etc.)\n        updateData[correctedField] = newValue;\n        hasChanges = true;\n      }\n    }\n  }\n\n  // Special handling for phone → mobile conversion based on user request intent\n  const shouldMovePhoneToMobile = userRequest.includes('move') &&\n                                   userRequest.includes('phone') && \n                                   (userRequest.includes('mobile') || userRequest.includes('cell'));\n\n  if (shouldMovePhoneToMobile) {\n    console.log(`${logPrefix} User wants to move phone to mobile for all contacts`);\n  }\n\n  // Check if user wants to move phone to mobile even without explicit field updates\n  if (!hasChanges && !shouldMovePhoneToMobile) {\n    return {\n      success: true,\n      operation: \"update_contact\",\n      user_request: args.user_request,\n      message: `No changes specified for the ${contacts.length} matching contact${contacts.length > 1 ? 's' : ''}.`,\n      total_found: contacts.length\n    };\n  }\n\n  // Update all matching contacts - this is the intelligent behavior the user expects\n  const updateResults = [];\n  \n  for (const contact of contacts) {\n    // Check if this contact actually needs changes\n    let contactNeedsUpdate = false;\n    const contactUpdateData: Record<string, unknown> = {};\n\n    // Handle regular field updates\n    for (const [field, newValue] of Object.entries(updateData)) {\n      if (newValue !== contact[field]) {\n        contactUpdateData[field] = newValue;\n        contactNeedsUpdate = true;\n      }\n    }\n\n    // Handle phone → mobile conversion if requested\n    if (shouldMovePhoneToMobile && contact.phone && contact.phone.trim() !== '') {\n      console.log(`${logPrefix} Moving phone \"${contact.phone}\" to mobile_phone for contact ${contact.contact_id}`);\n      contactUpdateData['mobile_phone'] = contact.phone;\n      contactUpdateData['phone'] = null; // Clear the phone field after moving to mobile\n      contactNeedsUpdate = true;\n    }\n\n    if (!contactNeedsUpdate) {\n      updateResults.push({\n        contact_id: contact.contact_id,\n        name: `${contact.first_name || ''} ${contact.last_name || ''}`.trim(),\n        updated: false,\n        message: shouldMovePhoneToMobile && (!contact.phone || contact.phone.trim() === '') \n          ? \"No phone number to move to mobile\" \n          : \"No changes needed\"\n      });\n      console.log(`${logPrefix} Contact ${contact.contact_id} (${contact.first_name} ${contact.last_name}) - No actual DB update needed. UpdateData was:`, JSON.stringify(updateData), `Existing contact values: mobile_phone=${contact.mobile_phone}, work_phone=${contact.work_phone}, phone=${contact.phone}`);\n      continue;\n    }\n\n    console.log(`${logPrefix} Attempting DB update for contact ${contact.contact_id} (${contact.first_name} ${contact.last_name}). contactUpdateData:`, JSON.stringify(contactUpdateData));\n    \n    // Log the exact values being sent to Supabase\n    console.log(`${logPrefix} Raw contactUpdateData keys:`, Object.keys(contactUpdateData));\n    console.log(`${logPrefix} Raw contactUpdateData values:`, Object.values(contactUpdateData));\n    console.log(`${logPrefix} Mobile phone value specifically:`, contactUpdateData.mobile_phone);\n    \n    // Perform update\n    const { data: supabaseResponseData, error: updateError } = await supabaseAdmin\n      .from('contacts')\n      .update(contactUpdateData)\n      .eq('contact_id', contact.contact_id)\n      .eq('user_id', userId);\n\n    console.log(`${logPrefix} Supabase update response - data:`, supabaseResponseData);\n    console.log(`${logPrefix} Supabase update response - error:`, updateError);\n\n    if (updateError) {\n      console.error(`${logPrefix} Update error for ${contact.contact_id}:`, updateError);\n      updateResults.push({\n        contact_id: contact.contact_id,\n        name: `${contact.first_name || ''} ${contact.last_name || ''}`.trim(),\n        updated: false,\n        error: updateError.message\n      });\n    } else {\n      updateResults.push({\n        contact_id: contact.contact_id,\n        name: `${contact.first_name || ''} ${contact.last_name || ''}`.trim(),\n        updated: true,\n        changes: Object.keys(contactUpdateData),\n        message: `Updated: ${Object.keys(contactUpdateData).join(', ')}`,\n        contact_data: contact // Include full contact data for frontend\n      });\n    }\n  }\n\n  const successCount = updateResults.filter(r => r.updated).length;\n  const totalCount = updateResults.length;\n\n  // Clear the search cache if any contacts were updated\n  if (successCount > 0) {\n    clearUserCache(userId);\n    console.log(`${logPrefix} Cleared search cache after updating ${successCount} contacts`);\n  }\n\n  return {\n    success: true,\n    operation: \"update_contact\",\n    user_request: args.user_request,\n    message: successCount > 0 \n      ? `Successfully updated ${successCount} of ${totalCount} contacts matching \"${args.search_term}\".`\n      : `Found ${totalCount} contacts but no updates were needed.`,\n    results: updateResults,\n    total_contacts: totalCount,\n    updated_contacts: successCount\n  };\n}\n\n/**\n * Intelligent phone field detection based on user intent\n * Maps provided phone field to the correct target field based on user language\n */\nfunction detectPhoneFieldIntent(userRequest: string, contactUpdates: IntelligentContactArgs['contact_updates']): Record<string, string> {\n  const mapping: Record<string, string> = {};\n  \n  if (!contactUpdates) return mapping;\n  \n  // Check if user mentioned specific phone types\n  const request = userRequest.toLowerCase();\n  \n  // Mobile/Cell phone patterns\n  const isMobileRequest = request.includes('mobile') || \n                         request.includes('cell') || \n                         request.includes('cellular');\n  \n  // Work phone patterns  \n  const isWorkRequest = request.includes('work') || \n                       request.includes('office') || \n                       request.includes('business');\n  \n  console.log('[Phone Field Detection] Request analysis:', {\n    userRequest: request,\n    isMobileRequest,\n    isWorkRequest,\n    contactUpdates: Object.keys(contactUpdates).filter(k => k.includes('phone'))\n  });\n  \n  // If user provided a phone value, determine the correct field\n  if (contactUpdates.phone !== null && contactUpdates.phone !== undefined) {\n    if (isMobileRequest) {\n      console.log('[Phone Field Detection] User mentioned mobile/cell, routing phone to mobile_phone field');\n      mapping['phone'] = 'mobile_phone';\n    } else if (isWorkRequest) {\n      console.log('[Phone Field Detection] User mentioned work, routing phone to work_phone field');\n      mapping['phone'] = 'work_phone';\n    }\n    // Otherwise keep as 'phone' field (default)\n  }\n  \n  // Handle direct mobile_phone requests\n  if (contactUpdates.mobile_phone !== null && contactUpdates.mobile_phone !== undefined) {\n    // If user said \"phone\" but meant mobile, and they provided mobile_phone value\n    if (request.includes('phone') && isMobileRequest) {\n      console.log('[Phone Field Detection] User said mobile phone, confirmed mobile_phone field');\n    }\n  }\n  \n  // Handle direct work_phone requests  \n  if (contactUpdates.work_phone !== null && contactUpdates.work_phone !== undefined) {\n    if (request.includes('phone') && isWorkRequest) {\n      console.log('[Phone Field Detection] User said work phone, confirmed work_phone field');\n    }\n  }\n  \n  console.log('[Phone Field Detection] Final mapping:', mapping);\n  \n  return mapping;\n}\n\n/**\n * Intelligent delete with appropriate confirmation workflow\n */\nasync function handleIntelligentDelete(\n  args: IntelligentContactArgs,\n  userId: string,\n  context: ContactHandlerContext\n): Promise<ContactOperationResult> {\n  const { logPrefix } = context;\n  \n  if (!args.search_term) {\n    return {\n      success: false,\n      operation: \"delete\",\n      user_request: args.user_request,\n      error: \"InvalidRequest\",\n      message: \"Search term is required for delete operations.\"\n    };\n  }\n\n  if (!args.confirmation_provided) {\n    // First phase: find contact and request confirmation\n    const searchResponse = await fetch(`${context.internalApiBaseUrl}/.netlify/functions/contacts-search`, {\n      method: 'POST',\n      headers: context.internalHeaders,\n      body: JSON.stringify({\n        query: args.search_term,\n        max_results: 5\n      })\n    });\n\n    if (!searchResponse.ok) {\n      return {\n        success: false,\n        operation: \"delete\",\n        user_request: args.user_request,\n        error: \"SearchError\",\n        message: \"Failed to search for contacts to delete.\"\n      };\n    }\n\n    const searchData = await searchResponse.json();\n    const contacts = searchData.contacts || [];\n\n    if (!contacts || contacts.length === 0) {\n      return {\n        success: false,\n        operation: \"delete\",\n        user_request: args.user_request,\n        error: \"NotFound\",\n        message: `No contacts found matching \"${args.search_term}\" to delete.`\n      };\n    }\n\n    if (contacts.length > 1) {\n      return {\n        success: false,\n        operation: \"delete\",\n        user_request: args.user_request,\n        error: \"MultipleMatches\",\n        message: `Found ${contacts.length} contacts matching \"${args.search_term}\". Please be more specific about which contact to delete.`,\n        matches: contacts.map((c: Contact) => ({\n          contact_id: c.contact_id,\n          name: `${c.first_name || ''} ${c.last_name || ''}`.trim(),\n          email: c.email,\n          phone: c.phone,\n          company: c.company\n        }))\n      };\n    }\n\n    const contact = contacts[0];\n    const contactName = `${contact.first_name || ''} ${contact.last_name || ''}`.trim();\n\n    return {\n      success: false,\n      operation: \"delete\",\n      user_request: args.user_request,\n      error: \"ConfirmationRequired\",\n      message: `Found contact \"${contactName}\". Are you sure you want to delete this contact? Please confirm to proceed.`,\n      contact: {\n        contact_id: contact.contact_id,\n        name: contactName,\n        email: contact.email,\n        phone: contact.phone,\n        company: contact.company\n      }\n    };\n  }\n\n  // Second phase: confirmed deletion\n  const deleteResult = await contactService.deleteContact(userId, { \n    type: 'name', \n    name: args.search_term \n  });\n\n  if (!deleteResult.success) {\n    return {\n      success: false,\n      operation: \"delete\",\n      user_request: args.user_request,\n      error: deleteResult.error?.code || \"DeletionFailed\",\n      message: deleteResult.error?.message || \"Failed to delete contact.\"\n    };\n  }\n\n  // Clear the search cache after deleting a contact\n  clearUserCache(userId);\n  console.log(`${logPrefix} Cleared search cache after deleting contact`);\n\n  return {\n    success: true,\n    operation: \"delete\",\n    user_request: args.user_request,\n    message: `Contact \"${deleteResult.data?.name || args.search_term}\" has been deleted successfully.`,\n    contact_id: deleteResult.data?.contact_id,\n    triggerRefresh: true // Trigger frontend refresh after deletion\n  };\n}\n\n/**\n * Intelligent merge - finds and combines duplicate contacts\n */\nasync function handleIntelligentMerge(\n  args: IntelligentContactArgs,\n  userId: string,\n  context: ContactHandlerContext\n): Promise<ContactOperationResult> {\n  const { logPrefix } = context;\n  \n  if (!args.search_term) {\n    return {\n      success: false,\n      operation: \"merge\",\n      user_request: args.user_request,\n      error: \"InvalidRequest\",\n      message: \"Search term is required for merge operations.\"\n    };\n  }\n\n  console.log(`${logPrefix} Finding duplicate contacts to merge: \"${args.search_term}\"`);\n  \n  // First, find contacts matching the search term\n  const searchResponse = await fetch(`${context.internalApiBaseUrl}/.netlify/functions/contacts-search`, {\n    method: 'POST',\n    headers: context.internalHeaders,\n    body: JSON.stringify({\n      query: args.search_term,\n      max_results: 10\n    })\n  });\n\n  if (!searchResponse.ok) {\n    console.error(`${logPrefix} Search API error:`, searchResponse.status);\n    return {\n      success: false,\n      operation: \"merge\",\n      user_request: args.user_request,\n      error: \"SearchError\",\n      message: \"Failed to search for contacts to merge.\"\n    };\n  }\n\n  const searchData = await searchResponse.json();\n  const contacts = searchData.contacts || [];\n\n  if (!contacts || contacts.length < 2) {\n    return {\n      success: false,\n      operation: \"merge\",\n      user_request: args.user_request,\n      error: \"InsufficientContacts\",\n      message: contacts.length === 0 \n        ? `No contacts found matching \"${args.search_term}\" to merge.`\n        : `Only found 1 contact matching \"${args.search_term}\". Need at least 2 contacts to merge.`\n    };\n  }\n\n  console.log(`${logPrefix} Found ${contacts.length} contacts to merge - combining data intelligently`);\n\n  // Intelligent merge logic: \n  // 1. Keep the contact with the most complete information as the primary\n  // 2. Merge data from other contacts, preferring non-empty values\n  // 3. Delete the duplicate contacts after merging\n  \n  // Find the \"best\" contact (most complete data) to keep as primary\n  const primaryContact = contacts.reduce((best: Contact, current: Contact) => {\n    const bestScore = calculateCompletenessScore(best);\n    const currentScore = calculateCompletenessScore(current);\n    return currentScore > bestScore ? current : best;\n  });\n\n  // Merge data from all other contacts into the primary\n  const mergedData: Record<string, unknown> = {};\n  let hasChanges = false;\n\n  for (const contact of contacts) {\n    if (contact.contact_id === primaryContact.contact_id) continue;\n\n    // Merge non-empty fields, preserving existing data in primary contact\n    const contactRecord = contact as Record<string, unknown>;\n    const primaryRecord = primaryContact as Record<string, unknown>;\n    \n    for (const [field, value] of Object.entries(contactRecord)) {\n      if (field === 'contact_id' || field === 'user_id' || field === 'created_at' || field === 'updated_at') {\n        continue; // Skip system fields\n      }\n      \n      const primaryValue = primaryRecord[field];\n      \n      if (value && value !== '' && (!primaryValue || primaryValue === '')) {\n        mergedData[field] = value;\n        hasChanges = true;\n      }\n    }\n  }\n\n  // Update the primary contact with merged data if there are changes\n  if (hasChanges) {\n    const { error: updateError } = await supabaseAdmin\n      .from('contacts')\n      .update(mergedData)\n      .eq('contact_id', primaryContact.contact_id)\n      .eq('user_id', userId);\n\n    if (updateError) {\n      console.error(`${logPrefix} Error updating primary contact:`, updateError);\n      return {\n        success: false,\n        operation: \"merge\",\n        user_request: args.user_request,\n        error: \"MergeUpdateError\",\n        message: `Failed to update primary contact during merge: ${updateError.message}`\n      };\n    }\n  }\n\n  // Delete the duplicate contacts\n  const duplicateIds = contacts\n    .filter((c: Contact) => c.contact_id !== primaryContact.contact_id)\n    .map((c: Contact) => c.contact_id);\n\n  if (duplicateIds.length > 0) {\n    const { error: deleteError } = await supabaseAdmin\n      .from('contacts')\n      .delete()\n      .eq('user_id', userId)\n      .in('contact_id', duplicateIds);\n\n    if (deleteError) {\n      console.error(`${logPrefix} Error deleting duplicate contacts:`, deleteError);\n      return {\n        success: false,\n        operation: \"merge\",\n        user_request: args.user_request,\n        error: \"MergeDeleteError\",\n        message: `Failed to delete duplicate contacts during merge: ${deleteError.message}`\n      };\n    }\n  }\n\n  // Clear the search cache after merging contacts\n  clearUserCache(userId);\n  console.log(`${logPrefix} Cleared search cache after merging ${contacts.length} contacts`);\n\n  const primaryName = `${primaryContact.first_name || ''} ${primaryContact.last_name || ''}`.trim();\n  \n  return {\n    success: true,\n    operation: \"merge\",\n    user_request: args.user_request,\n    message: `Successfully merged ${contacts.length} duplicate contacts for \"${primaryName}\". Kept the most complete contact and combined data from ${duplicateIds.length} others.`,\n    primary_contact: primaryContact.contact_id,\n    merged_contacts: duplicateIds.length,\n    total_contacts: contacts.length,\n    triggerRefresh: true // Trigger frontend refresh after merge\n  };\n}\n\n/**\n * Calculate a completeness score for a contact (higher = more complete)\n */\nfunction calculateCompletenessScore(contact: Contact): number {\n  let score = 0;\n  const importantFields: (keyof Contact)[] = ['first_name', 'last_name', 'email', 'phone', 'mobile_phone', 'company', 'job_title'];\n  \n  for (const field of importantFields) {\n    const value = contact[field];\n    if (value && typeof value === 'string' && value.trim() !== '') {\n      score += 1;\n    }\n  }\n  \n  return score;\n}"]}
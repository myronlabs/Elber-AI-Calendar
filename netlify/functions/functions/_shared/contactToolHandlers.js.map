{"version":3,"file":"contactToolHandlers.js","sourceRoot":"","sources":["../../../../src/backend/functions/_shared/contactToolHandlers.ts"],"names":[],"mappings":"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","sourcesContent":["import fetch from 'node-fetch';\nimport type { Response as FetchResponse, RequestInit, HeadersInit, RequestInfo } from 'node-fetch';\nimport type { CreateContactToolArgs, UpdateContactToolArgs, ContactData, BaseContactDetails, FindContactsToolArgs, ContactSearchApiResponse } from './types';\nimport type { Contact } from '../../types/domain';\n// Assuming AssistantConfig is a known type, if not, it might need to be defined or imported from its actual location\n// For now, let's use a placeholder if its exact definition isn't critical for the structure.\n// import type { AssistantConfig } from '@services/assistantConfig'; // Path might vary\n// For the purpose of this edit, we'll assume AssistantConfig is available or use `any` if strictly needed for structure.\n// Let's assume AssistantConfig is correctly typed and imported where `executeSingleToolCall` can access it.\n\nimport { generateDisplayName } from '../contacts'; // Adjusted path\n\n// Type for generic API error objects parsed from response bodies\ninterface ApiErrorResponseBody {\n  message?: string;\n  // Add other potential error properties if known\n}\n\n// Interface for contacts that have had upcoming birthday info calculated (used within find_contacts)\ninterface ContactWithCalculatedBirthdayInfo extends Contact {\n  birthDate: Date; // Parsed birthday\n  diffDays: number; // Days until next birthday\n  nextBirthday: Date; // Date of the next birthday\n}\n\n// Context for contact tool handlers\nexport interface ContactToolContext {\n  supabaseAdmin: typeof import('../services/supabaseAdmin').supabaseAdmin;\n  internalApiBaseUrl: string;\n  internalHeaders: Record<string, string>;\n  config: {\n    contactSummaryThreshold: number;\n    maxContactResults: number;\n    upcomingBirthdayDays: number;\n  };\n  currentUserEmail?: string | null;\n  logPrefix: string;\n}\n\n/**\n * Handles the 'create_contact' tool call.\n * @param args - The parsed arguments for the create_contact tool.\n * @param userId - The ID of the user performing the action.\n * @param internalApiBaseUrl - The base URL for internal API calls.\n * @param internalHeaders - Headers for internal API calls.\n * @param reqId - Request ID for logging.\n * @returns A promise that resolves to a JSON string representing the tool result.\n */\nexport async function handleCreateContact(\n  args: CreateContactToolArgs,\n  userId: string | null,\n  internalApiBaseUrl: string,\n  internalHeaders: HeadersInit | Record<string, string>,\n  reqId?: string,\n): Promise<string> {\n  const currentReqId = reqId || `handleCreateContact_${Date.now()}`;\n  console.log(`[${currentReqId}][handleCreateContact] Executing with args:`, args);\n\n  if (!userId) {\n    console.error(`[${currentReqId}][handleCreateContact] User ID is required.`);\n    return JSON.stringify({\n      success: false,\n      error: \"AuthenticationError\",\n      message: \"User ID is required to create a contact.\",\n    });\n  }\n\n  if (!args.first_name) {\n    console.error(`[${currentReqId}][handleCreateContact] Create contact failed: first_name is required.`);\n    return JSON.stringify({\n      success: false,\n      error: \"MissingParameter\",\n      message: \"Cannot create contact: First name is a required field.\",\n    });\n  }\n\n  const apiUrl = `${internalApiBaseUrl}/.netlify/functions/contacts-api`;\n  console.log(`[${currentReqId}][handleCreateContact] Calling internal contacts-api (POST) at: ${apiUrl}`);\n\n  try {\n    const response: FetchResponse = await fetch(apiUrl as RequestInfo, {\n      method: 'POST',\n      headers: internalHeaders,\n      body: JSON.stringify({ ...args, user_id: userId }),\n    } as RequestInit);\n\n    const responseBody = await response.text();\n\n    if (!response.ok) {\n      console.error(`[${currentReqId}][handleCreateContact] Error from internal API call: ${response.status} ${response.statusText}`, responseBody);\n      let errorDetail: ApiErrorResponseBody = { message: `API error: ${response.statusText}` };\n      try {\n        const parsedError = JSON.parse(responseBody);\n        if (parsedError && typeof parsedError.message === 'string') {\n          errorDetail = parsedError as ApiErrorResponseBody;\n        }\n      } catch (parseError) {\n        console.error(`[${currentReqId}][handleCreateContact] Failed to parse error response:`, parseError);\n      }\n      return JSON.stringify({\n        success: false,\n        error: `APIError_${response.status}`,\n        message: errorDetail.message || `Failed to create contact. API responded with ${response.status}.`,\n        details: responseBody\n      });\n    } else {\n      const createdContact = JSON.parse(responseBody) as CreateContactToolArgs & { id: string };\n      console.log(`[${currentReqId}][handleCreateContact] Successfully created contact:`, createdContact);\n      return JSON.stringify({\n        success: true,\n        message: `Contact \"${createdContact.first_name} ${createdContact.last_name || ''}\" created successfully.`,\n        contact: createdContact\n      });\n    }\n  } catch (error) {\n    const errorMsg = error instanceof Error ? error.message : String(error);\n    console.error(`[${currentReqId}][handleCreateContact] Unexpected error:`, error);\n    return JSON.stringify({\n      success: false,\n      error: \"UnexpectedError\",\n      message: `An unexpected error occurred while creating the contact: ${errorMsg}`\n    });\n  }\n}\n\n/**\n * Handles the 'update_contact' tool call.\n * @param args - The parsed arguments for the update_contact tool.\n * @param userId - The ID of the user performing the action. // Though not directly used if API handles user context\n * @param internalApiBaseUrl - The base URL for internal API calls.\n * @param internalHeaders - Headers for internal API calls.\n * @param reqId - Request ID for logging.\n * @returns A promise that resolves to a JSON string representing the tool result.\n */\nexport async function handleUpdateContact(\n  args: UpdateContactToolArgs,\n  userId: string | null, // Keep for consistency, even if API infers user from JWT\n  internalApiBaseUrl: string,\n  internalHeaders: HeadersInit | Record<string, string>,\n  reqId?: string,\n): Promise<string> {\n  const currentReqId = reqId || `handleUpdateContact_${Date.now()}`;\n  console.log(`[${currentReqId}][handleUpdateContact] Executing with args:`, args);\n\n  // The UUID check is part of UpdateContactToolArgs type guard, so args.contact_id is a valid UUID here.\n  const apiUrl = `${internalApiBaseUrl}/.netlify/functions/contacts-api/${args.contact_id}`;\n  console.log(`[${currentReqId}][handleUpdateContact] Calling internal contacts-api (PUT) at: ${apiUrl}`);\n\n  // Construct payload. The user_id will be injected by the contacts-api based on the JWT token.\n  // The API should handle not attempting to update contact_id itself from the payload.\n  const payload = { ...args };\n\n  try {\n    const response: FetchResponse = await fetch(apiUrl as RequestInfo, {\n      method: 'PUT',\n      headers: internalHeaders,\n      body: JSON.stringify(payload),\n    } as RequestInit);\n\n    const responseBody = await response.text();\n\n    if (!response.ok) {\n      console.error(`[${currentReqId}][handleUpdateContact] Error from internal API call: ${response.status} ${response.statusText}`, responseBody);\n      let errorDetail: ApiErrorResponseBody = { message: `API error: ${response.statusText}` };\n      try {\n        const parsedError = JSON.parse(responseBody);\n        if (parsedError && typeof parsedError.message === 'string') {\n          errorDetail = parsedError as ApiErrorResponseBody;\n        }\n      } catch (parseError) {\n        console.error(`[${currentReqId}][handleUpdateContact] Failed to parse error response:`, parseError);\n      }\n      \n      // Special handling for 404 Not Found errors\n      if (response.status === 404) {\n        console.error(`[${currentReqId}][handleUpdateContact] Contact not found with ID: ${args.contact_id}`);\n        return JSON.stringify({\n          success: false,\n          error: `APIError_404`,\n          message: `Contact not found. The contact may have been deleted or the ID (${args.contact_id}) is incorrect.`\n        });\n      }\n      \n      return JSON.stringify({\n        success: false,\n        error: `APIError_${response.status}`,\n        message: errorDetail.message || `Failed to update contact. API responded with ${response.status}.`,\n        details: responseBody\n      });\n    } else {\n      const updatedContact = JSON.parse(responseBody) as UpdateContactToolArgs & { id: string };\n      console.log(`[${currentReqId}][handleUpdateContact] Successfully updated contact:`, updatedContact);\n      return JSON.stringify({\n        success: true,\n        message: `Contact \"${updatedContact.first_name} ${updatedContact.last_name || ''}\" updated successfully.`,\n        contact: updatedContact\n      });\n    }\n  } catch (error) {\n    const errorMsg = error instanceof Error ? error.message : String(error);\n    console.error(`[${currentReqId}][handleUpdateContact] Unexpected error:`, error);\n    return JSON.stringify({\n      success: false,\n      error: \"UnexpectedError\",\n      message: `An unexpected error occurred while updating the contact: ${errorMsg}`\n    });\n  }\n}\n\nexport function createUpdateContactArgs(\n  contactId: string,\n  currentContact: ContactData,\n  fieldsToUpdate: Record<string, string | null>\n): UpdateContactToolArgs {\n  const updatedArgs: UpdateContactToolArgs = { contact_id: contactId };\n\n  const updatableKeys: (keyof BaseContactDetails)[] = [\n    'first_name', 'middle_name', 'last_name', 'nickname', 'email', 'phone',\n    'company', 'job_title', 'address', 'website', 'birthday', 'notes'\n  ];\n\n  for (const key of updatableKeys) {\n    let valueToSet: string | null | undefined = undefined;\n\n    if (Object.prototype.hasOwnProperty.call(fieldsToUpdate, key)) {\n      valueToSet = fieldsToUpdate[key]; // string | null\n    } else if (Object.prototype.hasOwnProperty.call(currentContact, key)) {\n      const currentValue = currentContact[key];\n      valueToSet = currentValue; // string | null | undefined (from ContactData which uses BaseContactDetails)\n    }\n\n    // Assign to updatedArgs, ensuring type compatibility\n    if (key === 'first_name') {\n      // first_name in UpdateContactToolArgs is string | undefined.\n      // If valueToSet is null, it must become undefined.\n      updatedArgs[key] = (valueToSet === null) ? undefined : valueToSet;\n    } else {\n      // Other keys in UpdateContactToolArgs are string | null | undefined.\n      // valueToSet (string | null | undefined) can be assigned directly.\n      updatedArgs[key] = valueToSet;\n    }\n  }\n  return updatedArgs;\n}\n\n/**\n * Handles the 'find_contacts' tool call.\n * @param args - The parsed arguments for the find_contacts tool.\n * @param userId - The ID of the user performing the action.\n * @param context - Context object containing necessary dependencies and configurations.\n * @param reqId - Request ID for logging (optional, as logPrefix is in context).\n * @returns A promise that resolves to a JSON string representing the tool result.\n */\nexport async function handleFindContacts(\n  args: FindContactsToolArgs,\n  userId: string | null,\n  context: ContactToolContext,\n): Promise<string> {\n  const { supabaseAdmin, internalApiBaseUrl, internalHeaders, config, currentUserEmail, logPrefix } = context;\n  const { contactSummaryThreshold } = config;\n\n  if (args.birthday_query_type) {\n    console.log(`${logPrefix} Processing birthday query: ${args.birthday_query_type}`);\n    if (!userId) {\n      return JSON.stringify({ success: false, error: \"AuthenticationError\", message: \"User ID is required for birthday queries.\" });\n    }\n\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      let query = supabaseAdmin.from('contacts')\n        .select('contact_id, user_id, created_at, updated_at, first_name, middle_name, last_name, nickname, email, phone, company, job_title, address, website, birthday, notes, google_contact_id, import_source, import_batch_id, imported_at, normalized_phone, street_address, street_address_2, city, state_province, postal_code, country, department, mobile_phone, work_phone, social_linkedin, social_twitter, tags, preferred_contact_method, timezone, language, formatted_address')\n        .eq('user_id', userId)\n        .not('birthday', 'is', null);\n\n      switch (args.birthday_query_type) {\n        case 'upcoming': {\n          const upcomingDays = (args.date_range_start && args.date_range_end && \n                                args.date_range_start !== args.date_range_end) ? \n                                (new Date(args.date_range_end).getTime() - new Date(args.date_range_start).getTime()) / (1000 * 3600 * 24) : \n                                config.upcomingBirthdayDays;\n          console.log(`${logPrefix} Using upcoming birthday window of ${upcomingDays} days (default from config: ${config.upcomingBirthdayDays})`);\n          // Filtering logic for 'upcoming' will be applied after fetching\n          break;\n        }\n        case 'on_date':\n          if (args.date_range_start) {\n            const targetDate = new Date(args.date_range_start + 'T00:00:00');\n            const month = targetDate.getMonth() + 1;\n            const day = targetDate.getDate();\n            query = query.filter('birthday', 'like', `%-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`);\n          } else {\n            throw new Error(\"date_range_start is required for 'on_date' birthday query.\");\n          }\n          break;\n        case 'in_month':\n          if (args.month) {\n            query = query.filter('birthday', 'like', `%-${String(args.month).padStart(2, '0')}-%`);\n          } else {\n            throw new Error(\"month is required for 'in_month' birthday query.\");\n          }\n          break;\n        case 'in_range':\n          if (args.date_range_start && args.date_range_end) {\n            query = query.gte('birthday', args.date_range_start).lte('birthday', args.date_range_end);\n          } else {\n            throw new Error(\"date_range_start and date_range_end are required for 'in_range' birthday query.\");\n          }\n          break;\n        default:\n          throw new Error(`Unsupported birthday_query_type: ${args.birthday_query_type}`);\n      }\n\n      const { data: contacts, error } = await query.returns<Contact[]>();\n\n      if (error) {\n        console.error(`${logPrefix} Supabase error fetching birthdays:`, error);\n        throw error;\n      }\n      \n      let processedContacts: Array<Contact | ContactWithCalculatedBirthdayInfo> = contacts || [];\n\n      if (args.birthday_query_type === 'upcoming') {\n        const upcomingDays = (args.date_range_start && args.date_range_end && \n                            args.date_range_start !== args.date_range_end) ? \n                            (new Date(args.date_range_end).getTime() - new Date(args.date_range_start).getTime()) / (1000 * 3600 * 24) : \n                            config.upcomingBirthdayDays;\n        \n        processedContacts = (contacts || [])\n          .map((c: Contact) => {\n            if (!c.birthday) return null;\n            const birthDate = new Date(c.birthday + 'T00:00:00');\n            return { ...c, birthDate };\n          })\n          .filter((c): c is Contact & { birthDate: Date } => c !== null)\n          .map((c: Contact & { birthDate: Date }): ContactWithCalculatedBirthdayInfo => {\n            const birthDate = c.birthDate;\n            const nextBirthday = new Date(today.getFullYear(), birthDate.getMonth(), birthDate.getDate());\n            if (nextBirthday < today) {\n              nextBirthday.setFullYear(today.getFullYear() + 1);\n            }\n            const diffTime = nextBirthday.getTime() - today.getTime();\n            const diffDays = diffTime / (1000 * 3600 * 24);\n            return { ...c, diffDays, nextBirthday };\n          })\n          .filter((c: ContactWithCalculatedBirthdayInfo) => c.diffDays >= 0 && c.diffDays <= upcomingDays)\n          .sort((a: ContactWithCalculatedBirthdayInfo, b: ContactWithCalculatedBirthdayInfo) => a.diffDays - b.diffDays);\n      } else if (contacts && contacts.length > 0) {\n         processedContacts = [...contacts].sort((a: Contact, b: Contact) => {\n            if (!a.birthday || !b.birthday) return 0;\n            const dateA = new Date(a.birthday + 'T00:00:00');\n            const dateB = new Date(b.birthday + 'T00:00:00');\n            if (dateA.getMonth() === dateB.getMonth()) {\n                return dateA.getDate() - dateB.getDate();\n            }\n            return dateA.getMonth() - dateB.getMonth();\n        });\n      }\n\n      if (processedContacts.length === 0) {\n        return JSON.stringify({ success: true, message: \"No contacts found with matching birthdays for your criteria.\", contacts: [] });\n      } else {\n        const displayContacts = processedContacts.map((c: Contact | ContactWithCalculatedBirthdayInfo) => {\n          return {\n            ...c,\n            name: generateDisplayName(c),\n            days_until_birthday: args.birthday_query_type === 'upcoming' && (c as ContactWithCalculatedBirthdayInfo).diffDays !== undefined ? Math.round((c as ContactWithCalculatedBirthdayInfo).diffDays) : undefined\n          };\n        });\n        return JSON.stringify({\n          success: true,\n          message: `Found ${displayContacts.length} contact(s) with birthdays matching your criteria.`,\n          contacts: displayContacts\n        });\n      }\n\n    } catch (e) {\n      const errorMsg = e instanceof Error ? e.message : String(e);\n      console.error(`${logPrefix} Error processing birthday query: ${errorMsg}`);\n      return JSON.stringify({ success: false, error: \"BirthdayQueryError\", message: `Failed to process birthday query: ${errorMsg}` });\n    }\n  }\n\n  // Logic for search_term or contact_id\n  const displayLimit = args.max_results ? Math.min(args.max_results, config.maxContactResults) : contactSummaryThreshold;\n  console.log(`${logPrefix} Using display limit: ${displayLimit} (max_results: ${args.max_results || 'not provided'}, configured threshold: ${contactSummaryThreshold})`);\n  \n  let response: FetchResponse;\n  let responseBody: string;\n\n  if ((args.search_term || (args.job_title_keywords && args.job_title_keywords.length > 0)) && !args.contact_id) {\n    const apiUrl = `${internalApiBaseUrl}/.netlify/functions/contacts-search`;\n    const requestBody: { \n      query: string | null; \n      limit: number; \n      offset: number; \n      currentUserEmail?: string | null;\n      job_title_keywords?: string[] | null;\n      contact_id?: string | null; // Include contact_id if needed by contacts-search\n    } = {\n      query: args.search_term,\n      limit: 50, // Fetch more initially, then slice to displayLimit\n      offset: 0,\n      currentUserEmail: currentUserEmail,\n      job_title_keywords: args.job_title_keywords,\n    };\n    \n    const jobTitleKeywordsLog = args.job_title_keywords && args.job_title_keywords.length > 0 \n        ? args.job_title_keywords.join(', ') \n        : 'none';\n    console.log(`${logPrefix} Using optimized search. Term: \"${args.search_term || 'N/A'}\", Job Title Keywords: \"${jobTitleKeywordsLog}\", User: ${currentUserEmail || 'N/A'}`);\n    console.log(`${logPrefix} Making API call to: ${apiUrl} with method: POST`);\n    \n    response = await fetch(apiUrl as RequestInfo, {\n      method: 'POST',\n      headers: {\n        ...internalHeaders,\n        'Content-Type': 'application/json'\n      } as HeadersInit,\n      body: JSON.stringify(requestBody)\n    } as RequestInit);\n    responseBody = await response.text();\n    \n    if (response.ok) {\n      const searchResponse = JSON.parse(responseBody) as ContactSearchApiResponse;\n      const { contacts: searchResults, total } = searchResponse;\n      \n      let messagePrefix = \"\";\n      if (args.search_term && args.job_title_keywords && args.job_title_keywords.length > 0) {\n          messagePrefix = `Searching for \"${args.search_term}\" and job titles like \"${args.job_title_keywords.join('\", \"')}\"`;\n      } else if (args.search_term) {\n          messagePrefix = `Searching for \"${args.search_term}\"`;\n      } else if (args.job_title_keywords && args.job_title_keywords.length > 0) {\n          messagePrefix = `Searching for job titles like \"${args.job_title_keywords.join('\", \"')}\"`;\n      }\n\n      if (searchResults.length === 0) {\n        const noResultsMessage = `${messagePrefix}${messagePrefix ? \": N\" : \"N\"}o exact contacts found.`;\n        return JSON.stringify({ \n          success: true, \n          message: noResultsMessage, \n          contacts: [],\n          summary: { totalFound: 0, displaying: 0, searchPerformed: args.search_term || (args.job_title_keywords ? args.job_title_keywords.join(',') : null) || \"criteria_search\", jobTitleKeywordsUsed: args.job_title_keywords }\n        });\n      } else if (searchResults.length > displayLimit) { // Changed from contactSummaryThreshold to displayLimit\n        const summaryMessage = `${messagePrefix}${messagePrefix ? \": F\" : \"F\"}ound ${searchResults.length} exact contact(s). Displaying the first ${displayLimit}. (Total related: ${total})`;\n        return JSON.stringify({\n          success: true,\n          message: summaryMessage,\n          contacts: searchResults.slice(0, displayLimit),\n          summary: { totalExactFound: searchResults.length, totalRelatedFound: total, displaying: displayLimit, searchPerformed: args.search_term || (args.job_title_keywords ? args.job_title_keywords.join(',') : null) || \"criteria_search\", jobTitleKeywordsUsed: args.job_title_keywords }\n        });\n      } else { \n        let message: string;\n        if (searchResults.length === 1) {\n            message = `${messagePrefix}${messagePrefix ? \": H\" : \"H\"}ere is the contact found:`;\n        } else { \n            message = `${messagePrefix}${messagePrefix ? \": F\" : \"F\"}ound ${searchResults.length} exact contacts.`;\n        }\n        return JSON.stringify({\n          success: true,\n          message: message,\n          contacts: searchResults,\n          summary: { totalExactFound: searchResults.length, totalRelatedFound: total, displaying: searchResults.length, searchPerformed: args.search_term || (args.job_title_keywords ? args.job_title_keywords.join(',') : null) || \"criteria_search\", jobTitleKeywordsUsed: args.job_title_keywords }\n        });\n      }\n    } else { \n        console.error(`${logPrefix} Error from internal contacts-search call: ${response.status} ${response.statusText}`, responseBody);\n        let errorDetail: ApiErrorResponseBody = { message: `API error: ${response.statusText}` };\n        try {\n          const parsedError = JSON.parse(responseBody);\n          if (parsedError && typeof parsedError.message === 'string') {\n            errorDetail = parsedError as ApiErrorResponseBody;\n          }\n        } catch { /* Do nothing */ }\n        return JSON.stringify({\n          success: false,\n          error: `APIError_contacts-search_${response.status}`,\n          message: errorDetail.message || `Failed to find contacts via contacts-search. API responded with ${response.status}.`,\n          details: responseBody.substring(0, 500)\n        });\n    }\n  } else {\n    // Regular contacts-api for specific ID or listing all\n    let apiUrlRegular = `${internalApiBaseUrl}/.netlify/functions/contacts-api`;\n    const queryParamsRegular = new URLSearchParams();\n\n    if (args.contact_id) { // isValidUUID is assumed to be checked by type guard on args\n      apiUrlRegular += `/${args.contact_id}`;\n      console.log(`${logPrefix} Finding contact by specific ID: ${args.contact_id}`);\n    } else {\n      console.log(`${logPrefix} No specific ID, search term, or job title keywords. Listing all contacts (or up to limit).`);\n      // Potentially add limit for listing all, e.g., queryParamsRegular.set('limit', String(displayLimit));\n    }\n    \n    const queryStringRegular = queryParamsRegular.toString();\n    if (queryStringRegular) {\n      apiUrlRegular += `?${queryStringRegular}`;\n    }\n\n    response = await fetch(apiUrlRegular as RequestInfo, { method: 'GET', headers: internalHeaders as HeadersInit } as RequestInit);\n    responseBody = await response.text();\n\n    if (!response.ok) {\n      console.error(`${logPrefix} Error from internal contacts-api call: ${response.status} ${response.statusText}`, responseBody);\n      // ... (error handling as before) ...\n      return JSON.stringify({ success: false, error: `APIError_${response.status}`, message: `Failed to find contacts. API responded with ${response.status}.`, details: responseBody });\n    } else {\n      const parsedData = JSON.parse(responseBody);\n      const contacts: Contact[] = Array.isArray(parsedData) ? parsedData : (parsedData ? [parsedData] : []);\n      \n      if (contacts.length === 0) {\n        return JSON.stringify({ success: true, message: \"No contacts found.\", contacts: [] });\n      } else if (contacts.length > displayLimit && !args.contact_id) { // Only summarize if not fetching specific ID\n        return JSON.stringify({\n          success: true,\n          message: `Found ${contacts.length} contacts. Displaying the first ${displayLimit} as a summary.`,\n          contacts: contacts.slice(0, displayLimit),\n          summary: { totalFound: contacts.length, displaying: displayLimit }\n        });\n      } else {\n        return JSON.stringify({ success: true, contacts });\n      }\n    }\n  }\n}\n\n// Add other handlers here (handleFindContacts, etc.) // This comment will be outdated "]}
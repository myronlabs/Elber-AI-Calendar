{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/backend/functions/_shared/types.ts"],"names":[],"mappings":"","sourcesContent":["import OpenAI from 'openai';\nimport type { Contact, ContactIdentifier, ContactUpdateData, CreateContactData, MinimalContactUpdateData, Paginated, GroupedContact, ContactWithFormatIssue } from '../../types/domain';\n\nexport interface DecodedJwt {\n  sub: string; // User ID\n  email?: string;\n  // other JWT claims...\n}\n\nexport type ConfirmationStatus = 'confirmed' | 'denied' | 'pending' | 'ambiguous';\n\n// A more generic ChatMessage type that can accommodate variations\n// across different assistant functions and align with OpenAI's expectations.\nexport type GenericChatMessage = {\n  role: 'user' | 'assistant' | 'system' | 'tool';\n  content: string | null; // Content can be null for assistant messages with tool_calls\n  name?: string; // Optional: Used by OpenAI for tool names or can be used to identify the source of a message.\n  tool_calls?: OpenAI.Chat.Completions.ChatCompletionMessageToolCall[];\n  tool_call_id?: string; // For messages with role 'tool'\n};\n\n// Represents the structure for making a direct tool call,\n// often when the client has executed a tool and is sending the result back,\n// or when a function itself decides to execute a tool call.\nexport interface DirectToolCall {\n  id: string;\n  type: 'function';\n  function: {\n    name: string;\n    arguments: string; // Arguments are stringified JSON\n  };\n}\n\n// Type definition for tool execution results\nexport interface ToolExecutionResult {\n  success?: boolean;\n  data?: Record<string, unknown>;\n  error?: string;\n  details?: string;\n  message?: string;\n  conflictingEvents?: string[];\n  events?: Array<Record<string, unknown>>;\n}\n\n// Type definition for confirmation context\nexport interface ConfirmationContext {\n  entityId: string;     // ID of the entity being confirmed (e.g., contact_id)\n  entityName: string;   // Name of the entity for display purposes\n  type: 'calendar' | 'contact'; // Type of entity\n  actionType: string;   // Action being confirmed (e.g., 'delete')\n}\n\n// A common structure for request bodies to assistant functions.\n// It can accommodate conversation messages or direct tool calls/responses.\nexport interface AssistantRequestBody {\n  messages: GenericChatMessage[];\n  tool_call?: DirectToolCall; // For initiating a direct tool call from the client or another function\n  tool_response?: { // For sending back the result of a tool execution\n    tool_call_id: string;\n    output: ToolExecutionResult; // The actual result from the tool\n  };\n  confirmationContext?: ConfirmationContext; // For scenarios where an assistant seeks confirmation\n  stream?: boolean; // To indicate if a streaming response is expected\n  currentUserEmail?: string | null; // Added to pass the current user's email\n  localTimeZone?: string | null; // Add localTimeZone\n}\n\n// Type for a single contact record as typically returned by the contacts-api or used in search results\nexport type ContactData = CreateContactToolArgs & { \n  contact_id: string;\n  user_id: string; // Assuming user_id is always present on a contact record from the DB\n  created_at?: string; // Optional, depending on what the API returns\n  updated_at?: string; // Optional, depending on what the API returns\n  // Add any other universally present fields not in CreateContactToolArgs if necessary\n};\n\n// Type for the response from the /contacts-api endpoint (GET single or POST/PUT)\n// For GET all, it would be ContactData[]\nexport type SingleContactApiResponse = ContactData;\nexport type MultipleContactsApiResponse = ContactData[];\n\n// Type for the response from the /contacts-search endpoint\nexport interface ContactSearchApiResponse {\n  contacts: ContactData[];\n  total: number;\n  pagination?: {\n    hasMore: boolean;\n    page: number;\n    limit: number;\n    totalPages?: number; // Often useful to have total pages\n    totalResults?: number; // total can also be here, sometimes separate from root total\n  };\n  cached?: boolean;\n  message?: string; // Sometimes search might return a message, e.g., \"No results found\"\n}\n\n// Base properties for creating a contact - to be used by ContactData\n// This is effectively what CreateContactToolArgs from assistant-contacts.ts represents.\n// If we define it here, assistant-contacts.ts can import it.\nexport interface BaseContactDetails {\n  first_name: string;\n  middle_name?: string | null;\n  last_name: string | null;\n  nickname?: string | null;\n  email: string | null;\n  phone: string | null;\n  company: string | null;\n  job_title?: string | null;\n  address?: string | null;\n  website?: string | null;\n  birthday?: string | null;\n  notes: string | null;\n}\n\n// Update ContactData to use BaseContactDetails if CreateContactToolArgs is not globally available\n// This assumes CreateContactToolArgs is similar to BaseContactDetails.\n// If CreateContactToolArgs is imported in assistant-contacts.ts from elsewhere, this redefinition might be redundant\n// or need to replace that import.\n// For now, I will *not* redefine CreateContactToolArgs here to avoid conflicts until I refactor assistant-contacts.ts itself.\n// The current ContactData relies on CreateContactToolArgs being in scope where it's used (i.e. in assistant-contacts.ts)\n\n// --- Tool Argument Types (moved from assistant-contacts.ts for centralization) ---\n\n// Use a type alias instead of an empty interface to avoid linting error\nexport type CreateContactToolArgs = BaseContactDetails;\n// Note: BaseContactDetails already covers all fields of CreateContactToolArgs.\n// If there were additional fields specific to CreateContactToolArgs not in BaseContactDetails,\n// they would be added here.\n\nexport interface UpdateContactToolArgs extends Partial<BaseContactDetails> {\n  contact_id: string;\n}\n\nexport interface FindContactsToolArgs {\n  search_term: string | null; // Allow null for listing all contacts\n  contact_id?: string | null;\n  job_title_keywords?: string[] | null; // Array of keywords for job title search\n  max_results?: number | null; // Maximum number of results to return\n  birthday_query_type?: 'upcoming' | 'on_date' | 'in_month' | 'in_range' | null;\n  date_range_start?: string | null; // YYYY-MM-DD\n  date_range_end?: string | null; // YYYY-MM-DD\n  month?: number | null; // 1-12\n}\n\nexport interface ConfirmDeleteContactToolArgs {\n  contact_id: string; \n  confirm: boolean;\n  contact_name: string; // Name used for confirmation prompt, crucial for context\n}\n\nexport interface FindDuplicateContactsToolArgs {\n  threshold?: number | null;\n  include_archived?: boolean | null;\n  page?: number | null;\n  limit?: number | null;\n  sort_by?: 'confidence' | 'name' | 'email' | null;\n}\n\nexport interface FindContactsWithImproperPhoneFormatsToolArgs {\n  include_empty?: boolean | null;\n  page?: number | null;\n  limit?: number | null;\n}\n\n// Export all to ensure they are available for import elsewhere\nexport type { Contact, ContactIdentifier, ContactUpdateData, CreateContactData, MinimalContactUpdateData, Paginated, GroupedContact, ContactWithFormatIssue };"]}
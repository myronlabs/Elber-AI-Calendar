{"version":3,"file":"settings.js","sourceRoot":"","sources":["../../../src/backend/functions/settings.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Handler, HandlerEvent, HandlerContext, HandlerResponse } from \"@netlify/functions\";\n\n// Import from supabase-js using ES import syntax\nimport { createClient } from '@supabase/supabase-js';\n\n// Initialize supabaseAdmin directly in this file to avoid relative imports\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!supabaseUrl) {\n  console.error('CRITICAL: SUPABASE_URL is not defined in environment variables.');\n  throw new Error('SUPABASE_URL is not defined in environment variables.');\n}\n\nif (!supabaseServiceRoleKey) {\n  console.error('CRITICAL: SUPABASE_SERVICE_ROLE_KEY is not defined in environment variables.');\n  throw new Error('SUPABASE_SERVICE_ROLE_KEY is not defined in environment variables.');\n}\n\n// Create a supabase admin client for this function\nconst supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {\n  auth: {\n    autoRefreshToken: false,\n    persistSession: false,\n  }\n});\n\n// Define a more specific payload type for profile updates\n// This should align with the fields in your public.profiles table that can be updated\n// and the data sent from SettingsPage.tsx\ninterface UpdateProfileDataPayload {\n  first_name?: string;\n  last_name?: string;\n  avatar_url?: string;\n  job_title?: string;\n  company?: string;\n  location?: string;\n  timezone?: string;\n  language?: string;\n  bio?: string;\n  // Address fields from contacts table\n  street_address?: string;\n  street_address_2?: string;\n  city?: string;\n  state_province?: string;\n  postal_code?: string;\n  country?: string;\n  formatted_address?: string;\n}\n\n// Define the structure for notification settings\ninterface NotificationSettings {\n  notifications_general?: boolean;\n  notifications_marketing_emails?: boolean;\n  notifications_in_app?: boolean;\n  notifications_reminders?: boolean;\n  // Add other notification settings keys as needed if they exist\n}\n\n// Define the structure for privacy settings, matching logged user_metadata\ninterface UserPrivacySettings {\n  privacy_profile_visibility?: 'Everyone' | 'MyContactsOnly' | 'Private';\n  privacy_share_activity?: boolean;\n  privacy_allow_contact_requests?: boolean;\n}\n\n// Define an interface for the actual payload sent by the client for privacy settings\ninterface ClientPrivacySettingsPayload {\n  profile_visibility?: 'Everyone' | 'MyContactsOnly' | 'Private';\n  share_activity_with_contacts?: boolean;\n  allow_contact_requests?: boolean;\n}\n\n// Security Settings (Client and Stored)\ninterface ClientSecuritySettingsPayload {\n  activity_log_retention_preference?: '30d' | '90d' | '1y';\n  share_login_status_preference?: boolean;\n}\ninterface UserSecuritySettings {\n  security_activity_log_retention_preference?: '30d' | '90d' | '1y';\n  security_share_login_status_preference?: boolean;\n}\n\n// Contact Organization Settings (Client and Stored)\ninterface ClientContactOrganizationSettingsPayload {\n  default_sort_order?: 'first_name_asc' | 'last_name_asc' | 'created_at_desc';\n  view_density?: 'compact' | 'comfortable';\n}\ninterface UserContactOrganizationSettings {\n  contacts_default_sort_order?: 'first_name_asc' | 'last_name_asc' | 'created_at_desc';\n  contacts_view_density?: 'compact' | 'comfortable';\n}\n\n// Integration Preferences (Client and Stored) - for user_metadata part only\ninterface ClientIntegrationSettingsPayload {\n  google_calendar_sync_enabled?: boolean;\n  zoom_default_meeting_type?: 'scheduled' | 'instant';\n}\ninterface UserIntegrationSettings {\n  integrations_google_calendar_sync_enabled?: boolean;\n  integrations_zoom_default_meeting_type?: 'scheduled' | 'instant';\n}\n\n// Comprehensive type for the user_metadata object in Supabase\ninterface UserSupabaseMetadata \n  extends NotificationSettings, \n          UserPrivacySettings,\n          UserSecuritySettings,\n          UserContactOrganizationSettings,\n          UserIntegrationSettings {\n  email?: string;\n  email_verified?: boolean;\n  first_name?: string;\n  last_name?: string;\n  avatar_url?: string;\n  job_title?: string;      // Added explicitly from Profile usage\n  company?: string;        // Added explicitly\n  location?: string;       // Added explicitly\n  timezone?: string;       // Added explicitly\n  language?: string;       // Added explicitly\n  bio?: string;            // Added explicitly\n  // Address fields from contacts table\n  street_address?: string;\n  street_address_2?: string;\n  city?: string;\n  state_province?: string;\n  postal_code?: string;\n  country?: string;\n  formatted_address?: string;\n  phone_verified?: boolean;\n  sub?: string;\n  debug_last_notification_update_timestamp?: string; // Added debug key\n  debug_update_status?: string; // Added another potential debug key from a previous thought, good to have for flexibility\n  \n  // Legacy unprefixed privacy fields (to match what's in the database)\n  profile_visibility?: 'Everyone' | 'MyContactsOnly' | 'Private';\n  share_activity_with_contacts?: boolean;\n  allow_contact_requests?: boolean;\n}\n\n// Locally defined Supabase User type (simplified for admin operations)\ninterface SupabaseUserForAdmin {\n  id: string;\n  email?: string;\n  raw_user_meta_data?: UserSupabaseMetadata; // Renamed from user_metadata to match actual Supabase column name\n  user_metadata?: UserSupabaseMetadata; // Added to handle cases where Supabase returns this field\n  app_metadata?: Record<string, unknown>; // Using Record<string, unknown> for app_metadata as its structure is not focus here\n  created_at?: string;\n  // Add other relevant fields from Supabase User object if needed\n}\n\n// Locally defined Supabase UserResponse type for admin user updates (simplified)\ninterface SupabaseAdminUserResponse {\n  data: { user: SupabaseUserForAdmin | null } | null;\n  error: Error | null;\n}\n\n// Use a discriminated union for the request body to handle different action payloads safely\ntype SettingsRequestBody =\n  | { action: 'get_settings'; payload?: Record<string, unknown> }\n  | { action: 'update_profile_data'; payload: UpdateProfileDataPayload }\n  | { action: 'UpdateNotificationPreferences'; settings: NotificationSettings; userId?: string }\n  | { action: 'update_privacy_settings'; settings: ClientPrivacySettingsPayload; }\n  | { action: 'update_security_settings'; settings: ClientSecuritySettingsPayload; } \n  | { action: 'update_contact_organization_settings'; settings: ClientContactOrganizationSettingsPayload; }\n  | { action: 'update_integration_settings'; settings: ClientIntegrationSettingsPayload; };\n\n// Corrected and type-safe function to update user metadata in Supabase\n// with fallback mechanism for different Supabase versions\nasync function updateUserMetadataInSupabase(\n  userId: string,\n  metadataToUpdate: Partial<UserSupabaseMetadata>\n): Promise<SupabaseAdminUserResponse> {\n  console.log(`[settings.ts] Attempting to update user_metadata for userId: ${userId}`);\n  console.log('[settings.ts] Metadata to apply:', JSON.stringify(metadataToUpdate, null, 2));\n\n  // In this Supabase configuration, we use raw_user_meta_data directly\n  const result = await tryUpdateUserMetadata(userId, { raw_user_meta_data: metadataToUpdate });\n\n  if (result.error) {\n    console.error(`[settings.ts] Update attempt failed for userId ${userId}:`, result.error.message, result.error);\n    return { data: null, error: result.error };\n  }\n\n  // Ensure 'data' and 'data.user' are not null before accessing user_metadata\n  if (!result.data || !result.data.user) {\n    console.error(`[settings.ts] User data not returned or user is null after update for userId ${userId}. This is unexpected.`);\n    return { data: null, error: new Error('User data not returned or user is null after update.') };\n  }\n\n  console.log(`[settings.ts] user_metadata updated successfully for userId: ${userId}`);\n  // Log the actual user_metadata returned by Supabase\n  console.log('[settings.ts] User object after update (from Supabase):', JSON.stringify(result.data.user, null, 2));\n  return { data: { user: result.data.user as SupabaseUserForAdmin }, error: null };\n}\n\n// Helper function to try updating user metadata with different parameter formats\nasync function tryUpdateUserMetadata(\n  userId: string,\n  updateParamsInput: Record<string, unknown> // This is expected to be an object like { raw_user_meta_data: actual_metadata } or { user_metadata: actual_metadata } etc.\n): Promise<SupabaseAdminUserResponse> {\n  try {\n    let actualMetadataPayload: Partial<UserSupabaseMetadata>;\n\n    if (updateParamsInput.raw_user_meta_data) {\n      actualMetadataPayload = updateParamsInput.raw_user_meta_data;\n      console.log('[settings.ts] tryUpdateUserMetadata: Extracted metadata from raw_user_meta_data key.');\n    } else if (updateParamsInput.user_metadata) {\n      actualMetadataPayload = updateParamsInput.user_metadata;\n      console.log('[settings.ts] tryUpdateUserMetadata: Extracted metadata from user_metadata key.');\n    } else if (updateParamsInput.meta) { // legacy support\n      actualMetadataPayload = updateParamsInput.meta;\n      console.log('[settings.ts] tryUpdateUserMetadata: Extracted metadata from meta key (legacy).');\n    } else if (updateParamsInput.data && typeof updateParamsInput.data === 'object') { // common pattern for data wrapper\n      actualMetadataPayload = updateParamsInput.data;\n      console.log('[settings.ts] tryUpdateUserMetadata: Extracted metadata from data key.');\n    } else if (typeof updateParamsInput === 'object' && updateParamsInput !== null && \n               !Object.prototype.hasOwnProperty.call(updateParamsInput, 'raw_user_meta_data') && \n               !Object.prototype.hasOwnProperty.call(updateParamsInput, 'user_metadata') && \n               !Object.prototype.hasOwnProperty.call(updateParamsInput, 'meta') && \n               !Object.prototype.hasOwnProperty.call(updateParamsInput, 'data')) {\n      // If updateParamsInput is the metadata object itself (no wrapper key)\n      actualMetadataPayload = updateParamsInput;\n      console.log('[settings.ts] tryUpdateUserMetadata: Used input directly as metadata payload.');\n    } else {\n      console.error('[settings.ts] tryUpdateUserMetadata: Could not determine actual metadata payload from input:', JSON.stringify(updateParamsInput, null, 2));\n      return { data: null, error: new Error('Invalid parameters structure for metadata update in tryUpdateUserMetadata.') };\n    }\n    \n    const paramsForSupabaseCall = { user_metadata: actualMetadataPayload };\n    \n    console.log(`[settings.ts] tryUpdateUserMetadata: Calling supabaseAdmin.auth.admin.updateUserById with userId: ${userId}.`);\n    console.log('[settings.ts] tryUpdateUserMetadata: Parameters for Supabase call:', JSON.stringify(paramsForSupabaseCall, null, 2));\n\n    const { data, error } = await supabaseAdmin.auth.admin.updateUserById(\n      userId,\n      paramsForSupabaseCall // Now consistently { user_metadata: { ... } }\n    );\n\n    if (error) {\n      console.error(`[settings.ts] tryUpdateUserMetadata: Error from supabaseAdmin.auth.admin.updateUserById for userId ${userId}:`, error.message, error);\n    } else if (!data || !data.user) {\n      console.warn(`[settings.ts] tryUpdateUserMetadata: supabaseAdmin.auth.admin.updateUserById returned no user data or null user for userId ${userId}. Response data:`, JSON.stringify(data, null, 2));\n    } else {\n      console.log(`[settings.ts] tryUpdateUserMetadata: Successfully called supabaseAdmin.auth.admin.updateUserById for userId ${userId}.`);\n      // console.log('[settings.ts] tryUpdateUserMetadata: Returned user data:', JSON.stringify(data.user, null, 2)); // This might be too verbose for every call, covered by updateUserMetadataInSupabase\n    }\n\n    return { data, error };\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unexpected error occurred during metadata update attempt in tryUpdateUserMetadata';\n    const stack = error instanceof Error ? error.stack : undefined;\n    console.error(`[settings.ts] tryUpdateUserMetadata: Exception for userId ${userId}:`, message, stack);\n    return { \n      data: null, \n      error: error instanceof Error ? error : new Error(message) \n    };\n  }\n}\n\n// Helper function to handle the UpdateNotificationPreferences action\nasync function handleUpdateNotificationPreferences(\n  parsedBody: { settings: NotificationSettings; userId?: string }, \n  authenticatedUserId: string, // This is the ID from the validated JWT\n  _eventHeaders: HandlerEvent[\"headers\"]\n): Promise<HandlerResponse> {\n  const effectiveUserId = parsedBody.userId || authenticatedUserId; // Allow admin override for testing if needed\n  console.log(`[settings.ts] handleUpdateNotificationPreferences for user ID: ${effectiveUserId}`);\n  console.log('[settings.ts] Received notification settings payload:', JSON.stringify(parsedBody.settings, null, 2));\n\n  // Construct metadata object with correct prefixes\n  const metadataToUpdate: Partial<UserSupabaseMetadata> = {};\n  if (parsedBody.settings.notifications_general !== undefined) {\n    metadataToUpdate.notifications_general = parsedBody.settings.notifications_general;\n  }\n  if (parsedBody.settings.notifications_marketing_emails !== undefined) {\n    metadataToUpdate.notifications_marketing_emails = parsedBody.settings.notifications_marketing_emails;\n  }\n  if (parsedBody.settings.notifications_in_app !== undefined) {\n    metadataToUpdate.notifications_in_app = parsedBody.settings.notifications_in_app;\n  }\n  if (parsedBody.settings.notifications_reminders !== undefined) {\n    metadataToUpdate.notifications_reminders = parsedBody.settings.notifications_reminders;\n  }\n  \n  // Add a debug timestamp\n  metadataToUpdate.debug_last_notification_update_timestamp = new Date().toISOString();\n  metadataToUpdate.debug_update_status = 'Attempting notification update';\n\n\n  if (Object.keys(metadataToUpdate).length === 0) {\n    console.log('[settings.ts] No notification settings provided in payload to update.');\n    return {\n      statusCode: 400,\n      body: JSON.stringify({ message: \"No notification settings provided to update.\" }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  try {\n    console.log('[settings.ts] Calling updateUserMetadataInSupabase with prepared notification settings for user ID:', effectiveUserId);\n    const { data: updatedUserResponse, error: updateError } = await updateUserMetadataInSupabase(effectiveUserId, metadataToUpdate);\n\n    if (updateError) {\n      console.error('[settings.ts] Error updating notification preferences via updateUserMetadataInSupabase:', updateError.message, updateError);\n       // Ensure a user-friendly message is sent, but log the detailed error\n      return {\n        statusCode: 500,\n        body: JSON.stringify({ message: `Failed to update notification preferences: ${updateError.message}` }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n    \n    if (!updatedUserResponse || !updatedUserResponse.user) {\n      console.error('[settings.ts] User data not returned or user is null after notification preferences update.');\n      return {\n        statusCode: 500,\n        body: JSON.stringify({ message: \"Failed to update notification preferences: Server error, user data not returned.\" }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n    \n    // Extract the relevant part of the metadata that was updated for the response\n    const returnedMetadata = updatedUserResponse.user.raw_user_meta_data || updatedUserResponse.user.user_metadata || {};\n    const relevantNotificationSettings: Partial<NotificationSettings> = {\n        notifications_general: returnedMetadata.notifications_general,\n        notifications_marketing_emails: returnedMetadata.notifications_marketing_emails,\n        notifications_in_app: returnedMetadata.notifications_in_app,\n        notifications_reminders: returnedMetadata.notifications_reminders,\n    };\n\n    console.log('[settings.ts] Notification preferences updated successfully. Returning updated settings.');\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ \n        message: \"Notification preferences updated successfully.\",\n        updatedSettings: relevantNotificationSettings,\n        // Optionally include the full user_metadata if needed for debugging or client-side state update\n        // fullUserMetadata: returnedMetadata \n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n\n  } catch (fetchErr: unknown) {\n    const message = fetchErr instanceof Error ? fetchErr.message : 'An unexpected error occurred while updating notification preferences.';\n    const stack = fetchErr instanceof Error ? fetchErr.stack : undefined;\n    console.error('[settings.ts] Unexpected error in handleUpdateNotificationPreferences:', message, stack);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ message }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n}\n\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext): Promise<HandlerResponse> => {\n  // ########### DEBUG LOGGING START ###########\n  console.log(\"[[[SETTINGS.TS]]] EXECUTION STARTED - TOP OF HANDLER\");\n  console.log(\"[[[SETTINGS.TS]]] Received Event Headers:\", JSON.stringify(event.headers, null, 2));\n  console.log(\"[[[SETTINGS.TS]]] Received Event HTTP Method:\", event.httpMethod);\n  console.log(\"[[[SETTINGS.TS]]] Received Event Body (first 500 chars):\", event.body ? event.body.substring(0, 500) : 'null or undefined');\n  // ########### DEBUG LOGGING END ###########\n\n  console.log(\"--- settings.ts function invoked --- A (Post-Debug Logging) ---\");\n\n  // 1. Check HTTP Method\n  if (event.httpMethod !== \"POST\") {\n    console.warn(`Invalid HTTP method: ${event.httpMethod}. Expected POST.`);\n    return {\n      statusCode: 405,\n      headers: { \n        \"Content-Type\": \"application/json\", \n        \"Allow\": \"POST\"\n      },\n      body: JSON.stringify({ error: \"Method Not Allowed\", message: \"Only POST requests are accepted.\" }),\n    };\n  }\n\n  // 2. Authentication Check (using Supabase JWT from Authorization header)\n  const authHeader = event.headers.authorization;\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    console.error(\"[settings.ts] Authentication error: Authorization header missing or not Bearer token.\");\n    return {\n      statusCode: 401,\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ error: \"Unauthorized\", message: \"Authentication required: Missing or invalid Bearer token.\" }),\n    };\n  }\n\n  const token = authHeader.split(' ')[1];\n  let supabaseUser: SupabaseUserForAdmin; // Use our defined type\n  let userId: string;\n\n  try {\n    // supabaseAdmin.auth.getUser() returns { data: { user: User | null }, error: AuthError | null }\n    const { data: { user }, error: userError } = await supabaseAdmin.auth.getUser(token);\n\n    if (userError || !user) {\n      console.error(\"[settings.ts] Supabase auth error: Invalid token or user not found.\", userError?.message);\n      return {\n        statusCode: 401,\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ error: \"Unauthorized\", message: userError?.message || \"Authentication failed: Invalid token.\" }),\n      };\n    }\n    supabaseUser = user as SupabaseUserForAdmin; // Cast to our local type\n    userId = supabaseUser.id;\n    console.log(`[settings.ts] Authenticated user via Supabase JWT: ${supabaseUser.email} (ID: ${userId})`);\n  } catch (e: unknown) {\n    const errorMessage = e instanceof Error ? e.message : String(e);\n    console.error(\"[settings.ts] Critical error during Supabase token validation:\", errorMessage);\n    return {\n      statusCode: 500,\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ error: \"Internal Server Error\", message: \"An unexpected error occurred during authentication.\" }),\n    };\n  }\n\n  // 3. Parse Request Body with Error Handling\n  let parsedBody: SettingsRequestBody;\n  try {\n    if (!event.body) {\n      throw new Error(\"Request body is missing or empty.\");\n    }\n    parsedBody = JSON.parse(event.body) as SettingsRequestBody; // Type assertion to our new discriminated union\n    console.log(\"Successfully parsed request body:\", parsedBody);\n  } catch (e: unknown) { \n    let errorMessage = \"An unknown error occurred during JSON parsing.\";\n    if (e instanceof Error) {\n      errorMessage = e.message;\n    }\n    console.error(\"Failed to parse request body as JSON:\", errorMessage);\n    console.error(\"Raw request body that failed parsing:\", event.body);\n    return {\n      statusCode: 400,\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ error: \"Bad Request\", message: \"Invalid JSON format in request body.\", details: errorMessage }),\n    };\n  }\n\n  // 4. Basic Input Validation\n  if (typeof parsedBody !== 'object' || parsedBody === null) {\n    console.warn(\"Parsed request body is not an object.\", parsedBody);\n    return {\n      statusCode: 400,\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ error: \"Bad Request\", message: \"Request body must be a JSON object.\" }),\n    };\n  }\n  \n  const action = parsedBody.action;\n\n  console.log(`[settings.ts] Action: ${action}`);\n\n  let responseMessage = \"Request processed.\";\n  let responseData: Record<string, unknown> = {}; // Using Record<string, unknown> for generic response data\n\n  try {\n    switch (action) {\n      case 'get_settings': {\n        console.log(`[settings.ts] User ${userId} requested 'get_settings'.`);\n        // Be flexible in reading metadata for the response\n        const currentSettingsUserMetadata = supabaseUser.user_metadata || supabaseUser.raw_user_meta_data || {};\n        responseData = { \n          message: \"Current user settings.\",\n          user_metadata: currentSettingsUserMetadata,\n          profile: { \n            first_name: currentSettingsUserMetadata.first_name, // Assumes first_name is part of UserSupabaseMetadata\n            last_name: currentSettingsUserMetadata.last_name,   // Assumes last_name is part of UserSupabaseMetadata\n            email: supabaseUser.email\n          }\n        };\n        responseMessage = \"User settings retrieved.\";\n        break;\n      }\n\n      case 'UpdateNotificationPreferences':\n        if (!parsedBody.settings) {\n          console.error(\"[settings.ts] 'settings' field missing in payload for UpdateNotificationPreferences.\");\n          return { statusCode: 400, body: JSON.stringify({ error: \"Bad Request\", message: \"'settings' field is required.\" }) };\n        }\n        return handleUpdateNotificationPreferences(parsedBody as { settings: NotificationSettings; userId?: string }, supabaseUser.id, event.headers);\n\n      case 'update_profile_data': {\n        if (parsedBody.action !== 'update_profile_data') {\n          throw new Error(\"Mismatched action type in update_profile_data handler.\");\n        }\n        const { payload: clientProfileData } = parsedBody;\n\n        if (!clientProfileData || typeof clientProfileData !== 'object') {\n          console.warn('[settings.ts] Invalid or missing payload for update_profile_data');\n          return {\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ error: \"Bad Request\", message: \"Missing or invalid 'payload' object for profile data.\" }),\n          };\n        }\n        \n        // BEGIN FIX: Fetch fresh user data\n        let freshExistingUserMetadataProfile: UserSupabaseMetadata = {};\n        try {\n          console.log(`[settings.ts] Attempting to fetch fresh user data for ${userId} in update_profile_data.`);\n          const { data: freshUserDataContainer, error: freshUserError } = await supabaseAdmin.auth.admin.getUserById(userId);\n          if (freshUserError) {\n            console.error(`[settings.ts] Error fetching fresh user data for ${userId} in update_profile_data:`, freshUserError.message);\n            freshExistingUserMetadataProfile = supabaseUser.user_metadata || {};\n             console.warn(`[settings.ts] Using potentially stale metadata for ${userId} in profile_data after fresh fetch failed.`);\n          } else if (freshUserDataContainer && freshUserDataContainer.user) {\n            freshExistingUserMetadataProfile = freshUserDataContainer.user.user_metadata || {};\n            console.log('[settings.ts] Successfully fetched fresh user_metadata for profile_data update:', JSON.stringify(freshExistingUserMetadataProfile, null, 2));\n          } else {\n            console.warn(`[settings.ts] No user data returned from fresh fetch for ${userId} in update_profile_data. Falling back.`);\n            freshExistingUserMetadataProfile = supabaseUser.user_metadata || {};\n          }\n        } catch (fetchErr) {\n          const errorMessage = fetchErr instanceof Error ? fetchErr.message : 'Unknown error';\n          console.error(`[settings.ts] Exception fetching fresh user data for ${userId} in update_profile_data:`, errorMessage);\n          freshExistingUserMetadataProfile = supabaseUser.raw_user_meta_data || supabaseUser.user_metadata || {};\n          console.warn(`[settings.ts] Using potentially stale metadata for ${userId} in profile_data after exception during fresh fetch.`);\n        }\n        // END FIX\n\n        // Directly use clientProfileData for mapping as it's not nested under 'settings'\n        // And it maps to UserSupabaseMetadata directly for profile fields\n        const combinedProfileMetadata: Partial<UserSupabaseMetadata> = {\n          ...freshExistingUserMetadataProfile, // Use fresh data\n          ...clientProfileData, // Spread the client payload which contains fields like first_name, etc.\n        };\n        console.log('[settings.ts] Current user_metadata for profile before update (using fresh/fallback):', JSON.stringify(freshExistingUserMetadataProfile, null, 2));\n        console.log('[settings.ts] Client profile data to apply:', JSON.stringify(clientProfileData, null, 2));\n        console.log('[settings.ts] Combined metadata for profile update (to be saved):', JSON.stringify(combinedProfileMetadata, null, 2));\n\n        const { data: updateOpResult, error: updateError } = await updateUserMetadataInSupabase(userId, combinedProfileMetadata);\n\n        if (updateError || !updateOpResult || !updateOpResult.user) {\n          console.error(`[settings.ts] Failed to update profile data for user ${userId}:`, updateError?.message);\n          return {\n            statusCode: 500,\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ error: \"Server Error\", message: `Failed to update profile data: ${updateError?.message || 'Unknown error'}` }),\n          };\n        }\n        const actualUpdatedProfileMetadata = updateOpResult.user.user_metadata || updateOpResult.user.raw_user_meta_data || {};\n        console.log('[settings.ts] User metadata from Supabase (read flexibly) after profile update:', JSON.stringify(actualUpdatedProfileMetadata, null, 2));\n        \n        responseData = {\n          message: \"User profile data updated successfully.\",\n          user_metadata: actualUpdatedProfileMetadata,\n        };\n        break;\n      }\n      \n      case 'update_privacy_settings': {\n        if (parsedBody.action !== 'update_privacy_settings') {\n            throw new Error(\"Mismatched action type in update_privacy_settings handler.\");\n        }\n        // newPrivacySettingsFromClient will have keys like 'profile_visibility'\n        const { settings: newPrivacySettingsFromClient } = parsedBody;\n\n        if (!newPrivacySettingsFromClient || typeof newPrivacySettingsFromClient !== 'object') {\n          console.warn('[settings.ts] Invalid or missing settings object for update_privacy_settings');\n          return {\n            statusCode: 400,\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ error: \"Bad Request\", message: \"Missing or invalid 'settings' object for privacy settings.\" }),\n          };\n        }\n\n        // BEGIN FIX: Fetch fresh user data to get current metadata\n        let freshExistingUserMetadata: UserSupabaseMetadata = {};\n        try {\n          const { data: freshUserDataContainer, error: freshUserError } = await supabaseAdmin.auth.admin.getUserById(userId);\n          if (freshUserError) {\n            console.error(`[settings.ts] Error fetching fresh user data for ${userId} in privacy settings:`, freshUserError.message);\n            // Proceed with potentially stale metadata from JWT, or handle error more strictly\n          } else if (freshUserDataContainer && freshUserDataContainer.user) {\n            freshExistingUserMetadata = freshUserDataContainer.user.user_metadata || {};\n            console.log('[settings.ts] Successfully fetched fresh user_metadata for privacy update:', JSON.stringify(freshExistingUserMetadata, null, 2));\n          } else {\n            console.warn(`[settings.ts] No user data returned from fresh fetch for ${userId} in privacy settings.`);\n          }\n        } catch (fetchErr) {\n          const errorMessage = fetchErr instanceof Error ? fetchErr.message : 'Unknown error';\n          console.error(`[settings.ts] Exception fetching fresh user data for ${userId} in privacy settings:`, errorMessage);\n          // Proceed with potentially stale metadata from JWT\n        }\n        // END FIX\n\n        // Map client payload to BOTH the prefixed and non-prefixed versions to ensure compatibility\n        const mappedPrivacySettings: Partial<UserSupabaseMetadata> = {};\n        \n        // Update prefixed fields (new format with privacy_ prefix)\n        if (newPrivacySettingsFromClient.profile_visibility !== undefined) {\n          mappedPrivacySettings.privacy_profile_visibility = newPrivacySettingsFromClient.profile_visibility;\n        }\n        if (newPrivacySettingsFromClient.share_activity_with_contacts !== undefined) {\n          mappedPrivacySettings.privacy_share_activity = newPrivacySettingsFromClient.share_activity_with_contacts;\n        }\n        if (newPrivacySettingsFromClient.allow_contact_requests !== undefined) {\n          mappedPrivacySettings.privacy_allow_contact_requests = newPrivacySettingsFromClient.allow_contact_requests;\n        }\n        \n        // ALSO update the unprefixed fields (legacy format) to ensure both versions stay in sync\n        if (newPrivacySettingsFromClient.profile_visibility !== undefined) {\n          mappedPrivacySettings.profile_visibility = newPrivacySettingsFromClient.profile_visibility;\n        }\n        if (newPrivacySettingsFromClient.share_activity_with_contacts !== undefined) {\n          mappedPrivacySettings.share_activity_with_contacts = newPrivacySettingsFromClient.share_activity_with_contacts;\n        }\n        if (newPrivacySettingsFromClient.allow_contact_requests !== undefined) {\n          mappedPrivacySettings.allow_contact_requests = newPrivacySettingsFromClient.allow_contact_requests;\n        }\n\n        // Use the freshly fetched metadata\n        const existingUserMetadata: UserSupabaseMetadata = freshExistingUserMetadata;\n        console.log('[settings.ts] Current user_metadata for privacy before update (using fresh/fallback):', JSON.stringify(existingUserMetadata, null, 2));\n        console.log('[settings.ts] Mapped privacy settings (with both prefixed and unprefixed fields) to apply:', JSON.stringify(mappedPrivacySettings, null, 2));\n\n        const metadataPayloadToUpdate: Partial<UserSupabaseMetadata> = {\n            ...existingUserMetadata,\n            ...mappedPrivacySettings, // Use the mapped settings with both prefixed and unprefixed fields\n        };\n        console.log('[settings.ts] Combined metadata for privacy update (to be saved):', JSON.stringify(metadataPayloadToUpdate, null, 2));\n        \n        const { data: updateOpResult, error: updateError } = await updateUserMetadataInSupabase(userId, metadataPayloadToUpdate);\n\n        if (updateError || !updateOpResult || !updateOpResult.user) {\n          console.error(`[settings.ts] Failed to update privacy settings for user ${userId}:`, updateError?.message);\n          return {\n            statusCode: 500,\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ error: \"Server Error\", message: `Failed to update privacy settings: ${updateError?.message || 'Unknown error'}` }),\n          };\n        }\n\n        // Be flexible in reading metadata after privacy update\n        const actualUpdatedPrivacyMetadata = updateOpResult.user.user_metadata || updateOpResult.user.raw_user_meta_data || {};\n        console.log('[settings.ts] User metadata from Supabase (read flexibly) after privacy update:', JSON.stringify(actualUpdatedPrivacyMetadata, null, 2));\n        \n        responseData = {\n          message: \"User privacy settings updated successfully.\",\n          updatedSettings: mappedPrivacySettings, \n          user_metadata: actualUpdatedPrivacyMetadata,\n        };\n        break;\n      }\n\n      case 'update_security_settings': {\n        if (parsedBody.action !== 'update_security_settings') {\n            throw new Error(\"Mismatched action type in update_security_settings handler.\");\n        }\n        const { settings: clientSettings } = parsedBody;\n\n        if (!clientSettings || typeof clientSettings !== 'object') {\n          return { statusCode: 400, body: JSON.stringify({ error: \"Bad Request\", message: \"Missing or invalid 'settings' object for security settings.\" }), headers: { \"Content-Type\": \"application/json\" } };\n        }\n\n        // BEGIN FIX: Fetch fresh user data to get current metadata\n        let freshExistingUserMetadataSec: UserSupabaseMetadata = {};\n        try {\n          console.log(`[settings.ts] Attempting to fetch fresh user data for ${userId} in security settings.`);\n          const { data: freshUserDataContainer, error: freshUserError } = await supabaseAdmin.auth.admin.getUserById(userId);\n          if (freshUserError) {\n            console.error(`[settings.ts] Error fetching fresh user data for ${userId} in security settings:`, freshUserError.message);\n            // Fallback to metadata from JWT user object if fresh fetch fails\n            freshExistingUserMetadataSec = supabaseUser.user_metadata || {};\n             console.warn(`[settings.ts] Using potentially stale metadata for ${userId} in security after fresh fetch failed.`);\n          } else if (freshUserDataContainer && freshUserDataContainer.user) {\n            freshExistingUserMetadataSec = freshUserDataContainer.user.user_metadata || {};\n            console.log('[settings.ts] Successfully fetched fresh user_metadata for security update:', JSON.stringify(freshExistingUserMetadataSec, null, 2));\n          } else {\n            console.warn(`[settings.ts] No user data returned from fresh fetch for ${userId} in security settings. Falling back.`);\n            freshExistingUserMetadataSec = supabaseUser.user_metadata || {};\n          }\n        } catch (fetchErr) {\n          const errorMessage = fetchErr instanceof Error ? fetchErr.message : 'Unknown error';\n          console.error(`[settings.ts] Exception fetching fresh user data for ${userId} in security settings:`, errorMessage);\n          freshExistingUserMetadataSec = supabaseUser.raw_user_meta_data || supabaseUser.user_metadata || {};\n          console.warn(`[settings.ts] Using potentially stale metadata for ${userId} in security after exception during fresh fetch.`);\n        }\n        // END FIX\n        \n        const mappedSettings: UserSecuritySettings = {};\n        if (clientSettings.activity_log_retention_preference !== undefined) {\n            mappedSettings.security_activity_log_retention_preference = clientSettings.activity_log_retention_preference;\n        }\n        if (clientSettings.share_login_status_preference !== undefined) {\n            mappedSettings.security_share_login_status_preference = clientSettings.share_login_status_preference;\n        }\n\n        const existingUserMetadata: UserSupabaseMetadata = freshExistingUserMetadataSec;\n        const metadataPayloadToUpdate: Partial<UserSupabaseMetadata> = { ...existingUserMetadata, ...mappedSettings };\n        \n        const { data: updateOpResult, error: updateError } = await updateUserMetadataInSupabase(userId, metadataPayloadToUpdate);\n\n        if (updateError || !updateOpResult || !updateOpResult.user) {\n          return { statusCode: 500, body: JSON.stringify({ error: \"Server Error\", message: `Failed to update security settings: ${updateError?.message || 'Unknown error'}` }), headers: { \"Content-Type\": \"application/json\" } };\n        }\n        const actualUpdatedUserMetadata = updateOpResult.user.user_metadata || updateOpResult.user.raw_user_meta_data || {};\n        responseData = {\n          message: \"User security settings updated successfully.\",\n          updatedSettings: mappedSettings, \n          user_metadata: actualUpdatedUserMetadata,\n        };\n        break;\n      }\n\n      case 'update_contact_organization_settings': {\n        if (parsedBody.action !== 'update_contact_organization_settings') {\n            throw new Error(\"Mismatched action type in update_contact_organization_settings handler.\");\n        }\n        const { settings: clientSettings } = parsedBody;\n\n        if (!clientSettings || typeof clientSettings !== 'object') {\n          return { statusCode: 400, body: JSON.stringify({ error: \"Bad Request\", message: \"Missing or invalid 'settings' object for contact organization settings.\" }), headers: { \"Content-Type\": \"application/json\" } };\n        }\n\n        // BEGIN FIX: Fetch fresh user data\n        let freshExistingUserMetadataContact: UserSupabaseMetadata = {};\n        try {\n          console.log(`[settings.ts] Attempting to fetch fresh user data for ${userId} in contact_organization settings.`);\n          const { data: freshUserDataContainer, error: freshUserError } = await supabaseAdmin.auth.admin.getUserById(userId);\n          if (freshUserError) {\n            console.error(`[settings.ts] Error fetching fresh user data for ${userId} in contact_organization settings:`, freshUserError.message);\n            freshExistingUserMetadataContact = supabaseUser.user_metadata || {};\n            console.warn(`[settings.ts] Using potentially stale metadata for ${userId} in contact_organization after fresh fetch failed.`);\n          } else if (freshUserDataContainer && freshUserDataContainer.user) {\n            freshExistingUserMetadataContact = freshUserDataContainer.user.user_metadata || {};\n            console.log('[settings.ts] Successfully fetched fresh user_metadata for contact_organization update:', JSON.stringify(freshExistingUserMetadataContact, null, 2));\n          } else {\n            console.warn(`[settings.ts] No user data returned from fresh fetch for ${userId} in contact_organization settings. Falling back.`);\n            freshExistingUserMetadataContact = supabaseUser.user_metadata || {};\n          }\n        } catch (fetchErr) {\n          const errorMessage = fetchErr instanceof Error ? fetchErr.message : 'Unknown error';\n          console.error(`[settings.ts] Exception fetching fresh user data for ${userId} in contact_organization settings:`, errorMessage);\n          freshExistingUserMetadataContact = supabaseUser.raw_user_meta_data || supabaseUser.user_metadata || {};\n          console.warn(`[settings.ts] Using potentially stale metadata for ${userId} in contact_organization after exception during fresh fetch.`);\n        }\n        // END FIX\n\n        const mappedSettings: UserContactOrganizationSettings = {};\n        if (clientSettings.default_sort_order !== undefined) {\n            mappedSettings.contacts_default_sort_order = clientSettings.default_sort_order;\n        }\n        if (clientSettings.view_density !== undefined) {\n            mappedSettings.contacts_view_density = clientSettings.view_density;\n        }\n\n        const existingUserMetadata: UserSupabaseMetadata = freshExistingUserMetadataContact; // Use fresh data\n        const metadataPayloadToUpdate: Partial<UserSupabaseMetadata> = { ...existingUserMetadata, ...mappedSettings };\n\n        const { data: updateOpResult, error: updateError } = await updateUserMetadataInSupabase(userId, metadataPayloadToUpdate);\n\n        if (updateError || !updateOpResult || !updateOpResult.user) {\n          return { statusCode: 500, body: JSON.stringify({ error: \"Server Error\", message: `Failed to update contact organization settings: ${updateError?.message || 'Unknown error'}` }), headers: { \"Content-Type\": \"application/json\" } };\n        }\n        const actualUpdatedUserMetadata = updateOpResult.user.user_metadata || updateOpResult.user.raw_user_meta_data || {};\n        responseData = {\n          message: \"User contact organization settings updated successfully.\",\n          updatedSettings: mappedSettings, \n          user_metadata: actualUpdatedUserMetadata,\n        };\n        break;\n      }\n\n      case 'update_integration_settings': {\n        if (parsedBody.action !== 'update_integration_settings') {\n            throw new Error(\"Mismatched action type in update_integration_settings handler.\");\n        }\n        const { settings: clientSettings } = parsedBody;\n\n        if (!clientSettings || typeof clientSettings !== 'object') {\n          return { statusCode: 400, body: JSON.stringify({ error: \"Bad Request\", message: \"Missing or invalid 'settings' object for integration settings.\" }), headers: { \"Content-Type\": \"application/json\" } };\n        }\n\n        // BEGIN FIX: Fetch fresh user data\n        let freshExistingUserMetadataIntegration: UserSupabaseMetadata = {};\n        try {\n          console.log(`[settings.ts] Attempting to fetch fresh user data for ${userId} in integration settings.`);\n          const { data: freshUserDataContainer, error: freshUserError } = await supabaseAdmin.auth.admin.getUserById(userId);\n          if (freshUserError) {\n            console.error(`[settings.ts] Error fetching fresh user data for ${userId} in integration settings:`, freshUserError.message);\n            freshExistingUserMetadataIntegration = supabaseUser.user_metadata || {};\n            console.warn(`[settings.ts] Using potentially stale metadata for ${userId} in integration after fresh fetch failed.`);\n          } else if (freshUserDataContainer && freshUserDataContainer.user) {\n            freshExistingUserMetadataIntegration = freshUserDataContainer.user.user_metadata || {};\n            console.log('[settings.ts] Successfully fetched fresh user_metadata for integration update:', JSON.stringify(freshExistingUserMetadataIntegration, null, 2));\n          } else {\n            console.warn(`[settings.ts] No user data returned from fresh fetch for ${userId} in integration settings. Falling back.`);\n            freshExistingUserMetadataIntegration = supabaseUser.user_metadata || {};\n          }\n        } catch (fetchErr) {\n          const errorMessage = fetchErr instanceof Error ? fetchErr.message : 'Unknown error';\n          console.error(`[settings.ts] Exception fetching fresh user data for ${userId} in integration settings:`, errorMessage);\n          freshExistingUserMetadataIntegration = supabaseUser.user_metadata || {};\n          console.warn(`[settings.ts] Using potentially stale metadata for ${userId} in integration after exception during fresh fetch.`);\n        }\n        // END FIX\n\n        const mappedSettings: UserIntegrationSettings = {};\n        if (clientSettings.google_calendar_sync_enabled !== undefined) {\n            mappedSettings.integrations_google_calendar_sync_enabled = clientSettings.google_calendar_sync_enabled;\n        }\n        if (clientSettings.zoom_default_meeting_type !== undefined) {\n            mappedSettings.integrations_zoom_default_meeting_type = clientSettings.zoom_default_meeting_type;\n        }\n\n        const existingUserMetadata: UserSupabaseMetadata = freshExistingUserMetadataIntegration; // Use fresh data\n        const metadataPayloadToUpdate: Partial<UserSupabaseMetadata> = { ...existingUserMetadata, ...mappedSettings };\n\n        const { data: updateOpResult, error: updateError } = await updateUserMetadataInSupabase(userId, metadataPayloadToUpdate);\n\n        if (updateError || !updateOpResult || !updateOpResult.user) {\n          return { statusCode: 500, body: JSON.stringify({ error: \"Server Error\", message: `Failed to update integration settings: ${updateError?.message || 'Unknown error'}` }), headers: { \"Content-Type\": \"application/json\" } };\n        }\n        const actualUpdatedUserMetadata = updateOpResult.user.user_metadata || updateOpResult.user.raw_user_meta_data || {};\n        responseData = {\n          message: \"User integration settings updated successfully.\",\n          updatedSettings: mappedSettings, \n          user_metadata: actualUpdatedUserMetadata,\n        };\n        break;\n      }\n\n      default: {\n        // Type safety: This block should ideally be unreachable if all actions are handled\n        // However, as a fallback for undefined actions:\n        const unhandledAction: never = action; // This will cause a type error if 'action' is not exhausted\n        console.warn(`[settings.ts] Unhandled action: ${unhandledAction}`);\n        return {\n          statusCode: 400,\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ error: \"Bad Request\", message: `Unknown action: ${unhandledAction}` }),\n        };\n      }\n    }\n\n    return {\n      statusCode: 200,\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(responseData.message ? responseData : { message: responseMessage, data: responseData }),\n    };\n\n  } catch (error: unknown) {\n    const message = error instanceof Error ? error.message : 'An unexpected error occurred while processing your request.';\n    const stack = error instanceof Error ? error.stack : undefined;\n    console.error(`[settings.ts] Error processing action '${action}':`, message, stack);\n    return {\n      statusCode: 500,\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ error: \"Internal Server Error\", message: `An error occurred while processing your request: ${message}` }),\n    };\n  }\n};\n\nexport { handler };"]}
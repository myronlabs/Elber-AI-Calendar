{"version":3,"file":"contacts-import.js","sourceRoot":"","sources":["../../../src/backend/functions/contacts-import.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Handler, HandlerEvent } from '@netlify/functions';\nimport { supabaseAdmin } from '@services/index';\nimport { google } from 'googleapis';\nimport type { OAuth2Client } from 'google-auth-library';\n\nconst COMMON_HEADERS = {\n  'Content-Type': 'application/json',\n  'Access-Control-Allow-Origin': '*'\n};\n\ninterface ImportHistoryRequest {\n  action: 'history';\n  method: 'GET' | 'DELETE';\n  deleteId?: string;\n  page?: number;\n  limit?: number;\n}\n\ninterface ImportProcessorRequest {\n  action: 'import';\n  source: 'google';\n  authCode?: string;\n  accessToken?: string;\n  refreshToken?: string;\n}\n\ntype UnifiedImportRequest = ImportHistoryRequest | ImportProcessorRequest;\n\ninterface GoogleContact {\n  resourceName?: string;\n  names?: Array<{\n    displayName?: string;\n    givenName?: string;\n    familyName?: string;\n  }>;\n  phoneNumbers?: Array<{\n    value?: string;\n    type?: string;\n  }>;\n  emailAddresses?: Array<{\n    value?: string;\n    type?: string;\n  }>;\n  organizations?: Array<{\n    name?: string;\n    title?: string;\n  }>;\n  addresses?: Array<{\n    formattedValue?: string;\n    type?: string;\n  }>;\n  birthdays?: Array<{\n    date?: {\n      year?: number;\n      month?: number;\n      day?: number;\n    };\n  }>;\n  urls?: Array<{\n    value?: string;\n    type?: string;\n  }>;\n  biographies?: Array<{\n    value?: string;\n  }>;\n}\n\ninterface ContactCreatePayload {\n  first_name: string;\n  last_name: string;\n  full_name: string;\n  email?: string;\n  phone?: string;\n  company?: string;\n  job_title?: string;\n  address?: string;\n  birthday?: string;\n  website?: string;\n  notes?: string;\n}\n\ninterface ImportResult {\n  success: boolean;\n  message: string;\n  totalContacts?: number;\n  importedContacts?: number;\n  skippedContacts?: number;\n  errors?: string[];\n}\n\nconst validateAuthToken = async (token: string): Promise<{ userId: string; email: string }> => {\n  const { data: { user }, error } = await supabaseAdmin.auth.getUser(token);\n  \n  if (error || !user) {\n    throw new Error('Invalid authentication token');\n  }\n\n  const { data: profile, error: profileError } = await supabaseAdmin\n    .from('profiles')\n    .select('is_custom_verified')\n    .eq('id', user.id)\n    .single();\n\n  if (profileError || !profile?.is_custom_verified) {\n    throw new Error('User not verified');\n  }\n\n  return { userId: user.id, email: user.email || '' };\n};\n\nconst handleImportHistory = async (\n  request: ImportHistoryRequest,\n  userId: string\n): Promise<unknown> => {\n  if (request.method === 'GET') {\n    const page = request.page || 1;\n    const limit = request.limit || 10;\n    const offset = (page - 1) * limit;\n\n    const { data, error, count } = await supabaseAdmin\n      .from('import_history')\n      .select('*', { count: 'exact' })\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1);\n\n    if (error) {\n      throw new Error(`Failed to fetch import history: ${error.message}`);\n    }\n\n    return {\n      imports: data || [],\n      pagination: {\n        page,\n        limit,\n        total: count || 0,\n        totalPages: Math.ceil((count || 0) / limit)\n      }\n    };\n  }\n\n  if (request.method === 'DELETE' && request.deleteId) {\n    const { error } = await supabaseAdmin\n      .from('import_history')\n      .delete()\n      .eq('id', request.deleteId)\n      .eq('user_id', userId);\n\n    if (error) {\n      throw new Error(`Failed to delete import record: ${error.message}`);\n    }\n\n    return { success: true, message: 'Import record deleted successfully' };\n  }\n\n  throw new Error('Invalid import history request');\n};\n\nconst googleContactToElberContact = (googleContact: GoogleContact): ContactCreatePayload & { google_contact_id?: string } => {\n  const displayName = googleContact.names?.[0]?.displayName || '';\n  const givenName = googleContact.names?.[0]?.givenName || '';\n  const familyName = googleContact.names?.[0]?.familyName || '';\n  \n  const first_name = givenName || displayName.split(' ')[0] || '';\n  const last_name = familyName || (displayName.includes(' ') ? displayName.split(' ').slice(1).join(' ') : '');\n  const full_name = displayName || `${first_name} ${last_name}`.trim();\n\n  const primaryEmail = googleContact.emailAddresses?.find((email: { type?: string; value?: string }) => \n    email.type === 'home' || email.type === 'work'\n  )?.value || googleContact.emailAddresses?.[0]?.value;\n\n  const primaryPhone = googleContact.phoneNumbers?.find((phone: { type?: string; value?: string }) => \n    phone.type === 'mobile' || phone.type === 'home' || phone.type === 'work'\n  )?.value || googleContact.phoneNumbers?.[0]?.value;\n\n  const organization = googleContact.organizations?.[0];\n  const company = organization?.name || '';\n  const job_title = organization?.title || '';\n\n  const address = googleContact.addresses?.[0]?.formattedValue || '';\n\n  let birthday = '';\n  if (googleContact.birthdays?.[0]?.date) {\n    const { year, month, day } = googleContact.birthdays[0].date;\n    if (year && month && day) {\n      birthday = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    }\n  }\n\n  const website = googleContact.urls?.[0]?.value || '';\n  const notes = googleContact.biographies?.[0]?.value || '';\n\n  return {\n    first_name,\n    last_name,\n    full_name,\n    email: primaryEmail,\n    phone: primaryPhone,\n    company,\n    job_title,\n    address,\n    birthday: birthday || undefined,\n    website,\n    notes,\n    google_contact_id: googleContact.resourceName?.replace('people/', '')\n  };\n};\n\nconst getGoogleAccessToken = async (userId: string): Promise<string | null> => {\n  try {\n    const { data, error } = await supabaseAdmin\n      .from('oauth_connections')\n      .select('*')\n      .eq('user_id', userId)\n      .eq('provider', 'google')\n      .single();\n\n    if (error || !data) {\n      console.log(`No OAuth connection found for user ${userId}`);\n      return null;\n    }\n\n    const now = new Date();\n    const expiresAt = data.expires_at ? new Date(data.expires_at) : null;\n\n    if (expiresAt && now >= expiresAt) {\n      console.log(`Access token expired for user ${userId}, attempting refresh`);\n      \n      if (!data.refresh_token) {\n        console.log(`No refresh token available for user ${userId}`);\n        return null;\n      }\n\n      try {\n        const oauth2Client = new google.auth.OAuth2();\n        oauth2Client.setCredentials({\n          access_token: data.access_token,\n          refresh_token: data.refresh_token\n        });\n\n        const { credentials } = await oauth2Client.refreshAccessToken();\n        console.log(`Successfully refreshed token for user ${userId}`);\n\n        await supabaseAdmin\n          .from('oauth_connections')\n          .update({\n            access_token: credentials.access_token,\n            expires_at: credentials.expiry_date ? new Date(credentials.expiry_date).toISOString() : null,\n            updated_at: new Date().toISOString()\n          })\n          .eq('id', data.id);\n\n        return credentials.access_token || null;\n      } catch (error) {\n        console.error(`Error refreshing token for user ${userId}:`, error);\n        return null;\n      }\n    }\n\n    return data.access_token;\n  } catch (error) {\n    console.error(`Error getting OAuth token for user ${userId}:`, error);\n    return null;\n  }\n};\n\nconst fetchAllGoogleContacts = async (auth: OAuth2Client): Promise<GoogleContact[]> => {\n  const peopleService = google.people({ version: 'v1', auth });\n  let allContacts: GoogleContact[] = [];\n  let nextPageToken: string | undefined;\n\n  do {\n    const response = await peopleService.people.connections.list({\n      resourceName: 'people/me',\n      pageToken: nextPageToken,\n      pageSize: 1000,\n      personFields: 'names,emailAddresses,phoneNumbers,organizations,addresses,birthdays,urls,biographies'\n    });\n\n    if (response.data.connections) {\n      allContacts = allContacts.concat(response.data.connections as GoogleContact[]);\n    }\n\n    nextPageToken = response.data.nextPageToken || undefined;\n  } while (nextPageToken);\n\n  return allContacts;\n};\n\nconst handleImportProcessing = async (\n  request: ImportProcessorRequest,\n  userId: string,\n  _userEmail: string\n): Promise<ImportResult> => {\n  if (request.source !== 'google') {\n    throw new Error('Only Google Contacts import is currently supported');\n  }\n\n  try {\n    let accessToken = request.accessToken;\n\n    if (!accessToken) {\n      accessToken = await getGoogleAccessToken(userId) || undefined;\n    }\n\n    if (!accessToken) {\n      throw new Error('No access token available for Google Contacts import');\n    }\n\n    const oauth2Client = new google.auth.OAuth2();\n    oauth2Client.setCredentials({\n      access_token: accessToken\n    });\n\n    const startTime = Date.now();\n    const importId = `import_${userId}_${startTime}`;\n\n    await supabaseAdmin.from('import_history').insert({\n      id: importId,\n      user_id: userId,\n      source: 'google',\n      status: 'in_progress',\n      started_at: new Date().toISOString()\n    });\n\n    const googleContacts = await fetchAllGoogleContacts(oauth2Client);\n    \n    if (!googleContacts || googleContacts.length === 0) {\n      await supabaseAdmin.from('import_history').update({\n        status: 'completed',\n        completed_at: new Date().toISOString(),\n        total_contacts: 0,\n        imported_contacts: 0,\n        skipped_contacts: 0\n      }).eq('id', importId);\n\n      return {\n        success: true,\n        message: 'No contacts found to import',\n        totalContacts: 0,\n        importedContacts: 0,\n        skippedContacts: 0\n      };\n    }\n\n    const convertedContacts = googleContacts.map(googleContactToElberContact);\n    const validContacts = convertedContacts.filter((contact: ContactCreatePayload) => \n      contact.full_name.trim() !== '' || \n      contact.email || \n      contact.phone\n    );\n\n    const BATCH_SIZE = 50;\n    let importedCount = 0;\n    let skippedCount = 0;\n    const errors: string[] = [];\n\n    for (let i = 0; i < validContacts.length; i += BATCH_SIZE) {\n      const batch = validContacts.slice(i, i + BATCH_SIZE);\n      \n      const contactsToInsert = batch.map((contact: ContactCreatePayload & { google_contact_id?: string }) => ({\n        user_id: userId,\n        first_name: contact.first_name,\n        last_name: contact.last_name,\n        full_name: contact.full_name,\n        email: contact.email || null,\n        phone: contact.phone || null,\n        company: contact.company || null,\n        job_title: contact.job_title || null,\n        address: contact.address || null,\n        birthday: contact.birthday || null,\n        website: contact.website || null,\n        notes: contact.notes || null,\n        google_contact_id: contact.google_contact_id || null,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }));\n\n      try {\n        const { data, error } = await supabaseAdmin\n          .from('contacts')\n          .upsert(contactsToInsert, {\n            onConflict: 'user_id,google_contact_id',\n            ignoreDuplicates: false\n          })\n          .select('id');\n\n        if (error) {\n          errors.push(`Batch ${Math.floor(i / BATCH_SIZE) + 1}: ${error.message}`);\n          skippedCount += batch.length;\n        } else {\n          importedCount += data?.length || batch.length;\n        }\n      } catch (batchError) {\n        errors.push(`Batch ${Math.floor(i / BATCH_SIZE) + 1}: ${batchError}`);\n        skippedCount += batch.length;\n      }\n\n      if (i % (BATCH_SIZE * 5) === 0) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n    }\n\n    await supabaseAdmin.from('import_history').update({\n      status: errors.length > 0 ? 'completed_with_errors' : 'completed',\n      completed_at: new Date().toISOString(),\n      total_contacts: googleContacts.length,\n      imported_contacts: importedCount,\n      skipped_contacts: skippedCount,\n      error_details: errors.length > 0 ? errors.join('; ') : null\n    }).eq('id', importId);\n\n    return {\n      success: true,\n      message: `Import completed. ${importedCount} contacts imported, ${skippedCount} skipped.`,\n      totalContacts: googleContacts.length,\n      importedContacts: importedCount,\n      skippedContacts: skippedCount,\n      errors: errors.length > 0 ? errors : undefined\n    };\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n    \n    return {\n      success: false,\n      message: `Import failed: ${errorMessage}`,\n      errors: [errorMessage]\n    };\n  }\n};\n\nexport const handler: Handler = async (event: HandlerEvent) => {\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers: {\n        ...COMMON_HEADERS,\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS'\n      },\n      body: ''\n    };\n  }\n\n  try {\n    const authHeader = event.headers.authorization || event.headers.Authorization;\n    if (!authHeader?.startsWith('Bearer ')) {\n      return {\n        statusCode: 401,\n        headers: COMMON_HEADERS,\n        body: JSON.stringify({ error: 'Missing or invalid authorization header' })\n      };\n    }\n\n    const token = authHeader.substring(7);\n    const { userId, email } = await validateAuthToken(token);\n\n    if (event.httpMethod === 'GET') {\n      const page = parseInt(event.queryStringParameters?.page || '1');\n      const limit = parseInt(event.queryStringParameters?.limit || '10');\n      \n      const request: ImportHistoryRequest = {\n        action: 'history',\n        method: 'GET',\n        page,\n        limit\n      };\n\n      const result = await handleImportHistory(request, userId);\n      \n      return {\n        statusCode: 200,\n        headers: COMMON_HEADERS,\n        body: JSON.stringify(result)\n      };\n    }\n\n    if (event.httpMethod === 'DELETE') {\n      const deleteId = event.queryStringParameters?.id;\n      if (!deleteId) {\n        return {\n          statusCode: 400,\n          headers: COMMON_HEADERS,\n          body: JSON.stringify({ error: 'Missing import ID for deletion' })\n        };\n      }\n\n      const request: ImportHistoryRequest = {\n        action: 'history',\n        method: 'DELETE',\n        deleteId\n      };\n\n      const result = await handleImportHistory(request, userId);\n      \n      return {\n        statusCode: 200,\n        headers: COMMON_HEADERS,\n        body: JSON.stringify(result)\n      };\n    }\n\n    if (event.httpMethod === 'POST') {\n      if (!event.body) {\n        return {\n          statusCode: 400,\n          headers: COMMON_HEADERS,\n          body: JSON.stringify({ error: 'Missing request body' })\n        };\n      }\n\n      const requestBody = JSON.parse(event.body) as UnifiedImportRequest;\n\n      if (requestBody.action === 'import') {\n        const result = await handleImportProcessing(requestBody, userId, email);\n        \n        return {\n          statusCode: 200,\n          headers: COMMON_HEADERS,\n          body: JSON.stringify(result)\n        };\n      }\n\n      return {\n        statusCode: 400,\n        headers: COMMON_HEADERS,\n        body: JSON.stringify({ error: 'Invalid request action' })\n      };\n    }\n\n    return {\n      statusCode: 405,\n      headers: COMMON_HEADERS,\n      body: JSON.stringify({ error: 'Method not allowed' })\n    };\n\n  } catch (error) {\n    console.error('Unified import function error:', error);\n    \n    const statusCode = error instanceof Error && error.message.includes('authentication') ? 401 : 500;\n    const errorMessage = error instanceof Error ? error.message : 'Internal server error';\n    \n    return {\n      statusCode,\n      headers: COMMON_HEADERS,\n      body: JSON.stringify({ error: errorMessage })\n    };\n  }\n};"]}
{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/backend/functions/services/types.ts"],"names":[],"mappings":";AAAA,oBAAoB;AACpB,oDAAoD","sourcesContent":["// services/types.ts\n// Copy of the necessary types from backend/types.ts\n\n/**\n * Re-export the Contact interface from domain.ts\n * \n * @deprecated Direct import from types/domain.ts is preferred\n */\nexport type { Contact } from '../../types/domain';\n\n// ContactCreatePayload is what the contacts.ts Netlify function *expects as input* for creation.\n// It should now receive first_name and last_name, and will parse them internally.\nexport interface ContactCreatePayload {\n  // Personal information\n  first_name: string;\n  middle_name?: string | null;\n  last_name: string | null;\n  nickname?: string | null;\n  birthday?: string | null;\n  \n  // Contact information\n  email?: string | null;\n  phone?: string | null;\n  mobile_phone?: string | null;\n  work_phone?: string | null;\n  website?: string | null;\n  \n  // Address fields\n  street_address?: string | null;\n  street_address_2?: string | null;\n  city?: string | null;\n  state_province?: string | null;\n  postal_code?: string | null;\n  country?: string | null;\n  \n  // Professional information\n  company?: string | null;\n  job_title?: string | null;\n  department?: string | null;\n  \n  // Social media fields\n  social_linkedin?: string | null;\n  social_twitter?: string | null;\n  \n  // Tags and preferences\n  tags?: string[] | null;\n  preferred_contact_method?: string | null;\n  timezone?: string | null;\n  language?: string | null;\n  \n  // Additional information\n  notes?: string | null;\n  \n  // System fields\n  formatted_address?: string | null; // Auto-generated from address components\n}\n\n/**\n * Special payload type for DELETE operations that are emulated through POST\n */\nexport interface ContactDeletePayload {\n  contact_id: string;\n  _method: 'DELETE';\n}\n\n/**\n * Represents the payload for updating an existing contact.\n * All fields are optional, as an update might only modify a subset of contact details.\n * The contact to be updated will be identified by 'contact_id' or another unique 'identifier' separately.\n */\nexport interface ContactUpdatePayload {\n  // Personal information\n  first_name?: string;\n  middle_name?: string | null;\n  last_name?: string;\n  nickname?: string | null;\n  birthday?: string | null;\n  \n  // Contact information\n  email?: string | null;\n  phone?: string | null;\n  mobile_phone?: string | null;\n  work_phone?: string | null;\n  website?: string | null;\n  \n  // Address fields\n  street_address?: string | null;\n  street_address_2?: string | null;\n  city?: string | null;\n  state_province?: string | null;\n  postal_code?: string | null;\n  country?: string | null;\n  \n  // Professional information\n  company?: string | null;\n  job_title?: string | null;\n  department?: string | null;\n  \n  // Social media fields\n  social_linkedin?: string | null;\n  social_twitter?: string | null;\n  \n  // Tags and preferences\n  tags?: string[] | null;\n  preferred_contact_method?: string | null;\n  timezone?: string | null;\n  language?: string | null;\n  \n  // Additional information\n  notes?: string | null;\n  \n  // System fields\n  formatted_address?: string | null; // Auto-generated from address components\n}\n\n/**\n * Represents a Calendar Event.\n */\nexport interface CalendarEvent {\n  event_id: string; // Was id, changed to match schema, non-optional for retrieved events\n  user_id: string;\n  title: string;\n  description?: string | null; // Changed to allow null\n  start_time: string; // Non-optional\n  end_time: string;   // Non-optional\n  is_all_day: boolean; // Indicates if this is an all-day event\n  location?: string | null;  // Changed to allow null\n  google_event_id?: string | null; // Added from schema\n  zoom_meeting_id?: string | null; // Added from schema\n  created_at: string; // Non-optional for retrieved events\n  updated_at: string; // Non-optional for retrieved events\n  // Attendees field removed as it's not in the schema table\n}\n\n// Type alias for CalendarEventCreatePayload\nexport type CalendarEventCreatePayload = Omit<CalendarEvent, 'event_id' | 'user_id' | 'created_at' | 'updated_at'>;\n// user_id will be inferred by the backend function.\n// created_at and updated_at are set by the database.\n// event_id is generated by the database.\n// title, start_time, end_time are required from client for creation.\n// description, location, google_event_id, zoom_meeting_id are optional.\n\n// --- Integration Types ---\n\n/**\n * Defines the supported integration providers.\n */\nexport type IntegrationProvider = 'google' | 'zoom';\n\n/**\n * Represents the structure of an integration record, storing OAuth tokens\n * and related information for services like Google or Zoom.\n * Timestamps are represented as ISO 8601 strings, consistent with Supabase responses.\n */\nexport interface Integration {\n  integration_id: string;          // UUID\n  user_id: string;                 // UUID, foreign key to profiles.id\n  provider: IntegrationProvider;\n  access_token: string;\n  refresh_token?: string | null;\n  expires_at?: string | null;       // ISO 8601 date string\n  scopes?: string[] | null;         // Array of granted OAuth scopes\n  created_at: string;              // ISO 8601 date string\n  updated_at: string;              // ISO 8601 date string\n}\n\n// --- Profile Type ---\n\n/**\n * Represents the structure of a user's profile data as stored in the\n * public.profiles table, linked to auth.users.\n */\nexport interface Profile {\n  id: string;                    // UUID, matches auth.users.id\n  updated_at: string;            // ISO 8601 timestamp, non-nullable from DB\n  first_name?: string | null;\n  last_name?: string | null;\n  avatar_url?: string | null;\n  is_custom_verified: boolean;   // Indicates if the user has verified their email via our custom flow\n}\n\n// --- Chat History Types ---\n\n/**\n * Represents a message displayed in the chat UI.\n */\nexport interface ChatMessage {\n  id: string; // Client-generated unique ID for React keys and optimistic updates\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: string; // ISO 8601 timestamp\n  // Add any other relevant fields for display messages, e.g., status: 'sending' | 'sent' | 'failed'\n}\n\n/**\n * Represents a message logged for API context.\n */\nexport interface ApiLogMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n  // Add any other relevant fields for API log messages\n}\n\n/**\n * Represents the structure of the object stored in the 'message_object' JSONB column\n * in the 'conversation_history' table.\n */\nexport type StoredChatMessage = \n  | { type: 'display'; data: ChatMessage }\n  | { type: 'api_log'; data: ApiLogMessage };"]}
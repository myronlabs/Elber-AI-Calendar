{"version":3,"file":"supabaseAdmin.js","sourceRoot":"","sources":["../../../../src/backend/functions/services/supabaseAdmin.ts"],"names":[],"mappings":";;;AAAA,kDAAkD;AAClD,uDAAqE;AAErE,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;AAC7C,MAAM,sBAAsB,GAAG,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC;AAErE,IAAI,CAAC,WAAW,EAAE,CAAC;IACjB,wFAAwF;IACxF,OAAO,CAAC,KAAK,CAAC,iEAAiE,CAAC,CAAC;IACjF,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;AAC3E,CAAC;AACD,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAC5B,0BAA0B;IAC1B,OAAO,CAAC,KAAK,CAAC,8EAA8E,CAAC,CAAC;IAC9F,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;AACxF,CAAC;AAED,qEAAqE;AACrE,yDAAyD;AAC5C,QAAA,aAAa,GAAmB,IAAA,0BAAY,EAAC,WAAW,EAAE,sBAAsB,EAAE;IAC7F,IAAI,EAAE;QACJ,sFAAsF;QACtF,uFAAuF;QACvF,gBAAgB,EAAE,KAAK;QACvB,cAAc,EAAE,KAAK;QACrB,yEAAyE;KAC1E;CACF,CAAC,CAAC;AAEH,6GAA6G;AAC7G,mFAAmF;AACnF,OAAO,CAAC,GAAG,CAAC,sFAAsF,CAAC,CAAC","sourcesContent":["// src/backend/functions/services/supabaseAdmin.ts\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!supabaseUrl) {\n  // Log the error and throw to prevent the function from proceeding without configuration\n  console.error('CRITICAL: SUPABASE_URL is not defined in environment variables.');\n  throw new Error('SUPABASE_URL is not defined in environment variables.');\n}\nif (!supabaseServiceRoleKey) {\n  // Log the error and throw\n  console.error('CRITICAL: SUPABASE_SERVICE_ROLE_KEY is not defined in environment variables.');\n  throw new Error('SUPABASE_SERVICE_ROLE_KEY is not defined in environment variables.');\n}\n\n// Create a single supabase admin client for use in backend functions\n// This uses the Service Role Key for admin-level access.\nexport const supabaseAdmin: SupabaseClient = createClient(supabaseUrl, supabaseServiceRoleKey, {\n  auth: {\n    // It's generally recommended to set autoRefreshToken to false for server-side clients\n    // as they usually handle short-lived operations and don't maintain long user sessions.\n    autoRefreshToken: false,\n    persistSession: false,\n    // detectSessionInUrl: false, // Unlikely needed for backend admin client\n  }\n});\n\n// Log to confirm initialization during deployment/startup, but not on every import if this module is cached.\n// This console.log will run when the module is first loaded by a Netlify function.\nconsole.log('Supabase admin client initialized (src/backend/functions/services/supabaseAdmin.ts).');"]}
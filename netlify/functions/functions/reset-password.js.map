{"version":3,"file":"reset-password.js","sourceRoot":"","sources":["../../../src/backend/functions/reset-password.ts"],"names":[],"mappings":"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","sourcesContent":["// src/backend/functions/reset-password.ts\nimport { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport { supabaseAdmin } from '../services';\nimport { DEFAULT_PASSWORD_REQUIREMENTS } from '../utils/passwordValidator'; // Import the requirements\n\n// Define clear interfaces for request/response\ninterface ResetPasswordRequestBody {\n  password?: string;\n  token?: string;\n  user_id?: string;\n}\n\ninterface ResetPasswordResponse {\n  success: boolean;\n  message: string;\n  toast?: {\n    type: 'success' | 'error' | 'info' | 'warning';\n    message: string;\n  };\n  useClientSideUpdate?: boolean;\n  userId?: string;\n  verified?: boolean;\n}\n\n/**\n * Helper function to handle verification during password reset\n * This ensures a consistent approach to verification across the app\n */\nasync function verifyUserDuringPasswordReset(\n  userId: string,\n  requestId: string\n): Promise<boolean> {\n  try {\n    console.log(`[reset-password] Request ${requestId}: Checking verification status for user ${userId}`);\n\n    // First check current verification status\n    const { data: profileData, error: profileError } = await supabaseAdmin\n      .from('profiles')\n      .select('is_custom_verified')\n      .eq('id', userId)\n      .single();\n\n    if (profileError && profileError.code !== 'PGRST116') { // PGRST116: 'No rows found' which is acceptable\n      console.error(`[reset-password] Request ${requestId}: Error fetching profile (and not PGRST116):`, profileError);\n      // We will still attempt to verify the auth user\n    }\n\n    if (profileData?.is_custom_verified) {\n      console.log(`[reset-password] Request ${requestId}: User ${userId} is already verified via profile.`);\n      // Optionally, ensure auth.users.email_confirmed_at is also set\n      const { data: authUser, error: authUserError } = await supabaseAdmin.auth.admin.getUserById(userId);\n      if (authUserError) {\n        console.warn(`[reset-password] Request ${requestId}: Error fetching auth user ${userId} during pre-verification check:`, authUserError);\n      } else if (authUser && !authUser.user.email_confirmed_at) {\n        console.log(`[reset-password] Request ${requestId}: User ${userId} verified in profile but not in auth. Syncing auth email_confirmed_at.`);\n        await supabaseAdmin.auth.admin.updateUserById(userId, {\n          email_confirm: true,\n          user_metadata: { ...(authUser.user.user_metadata || {}), is_verified: true }\n        });\n      }\n      return true;\n    }\n\n    // User is not verified or profile check had issues, proceed to update verification status\n    console.log(`[reset-password] Request ${requestId}: Attempting to update verification status for user ${userId}`);\n\n    const [profileUpdateResult, supabaseUpdateResult] = await Promise.all([\n      supabaseAdmin\n        .from('profiles')\n        .update({\n          is_custom_verified: true,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', userId),\n      supabaseAdmin.auth.admin.updateUserById(\n        userId,\n        {\n          email_confirm: true,\n          user_metadata: { is_verified: true } // Ensure is_verified is set\n        }\n      )\n    ]);\n\n    const profileUpdateError = profileUpdateResult.error;\n    const supabaseUpdateError = supabaseUpdateResult.error;\n\n    if (supabaseUpdateError) {\n      console.error(`[reset-password] Request ${requestId}: Error updating Supabase auth user verification for ${userId}:`, supabaseUpdateError);\n      if (profileUpdateError) {\n        console.error(`[reset-password] Request ${requestId}: Also failed to update profile verification for ${userId}:`, profileUpdateError);\n      }\n      return false;\n    }\n\n    if (profileUpdateError && profileUpdateError.code !== 'PGRST116') { // Allow 'No rows found' for profile update\n      console.warn(`[reset-password] Request ${requestId}: Supabase auth user verified for ${userId}, but profile update failed (and not PGRST116):`, profileUpdateError);\n    }\n    \n    console.log(`[reset-password] Request ${requestId}: Successfully updated verification status for user ${userId}`);\n    return true;\n  } catch (error) {\n    console.error(`[reset-password] Request ${requestId}: Unexpected error during verifyUserDuringPasswordReset for ${userId}:`, error);\n    return false;\n  }\n}\n\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext) => {\n  const requestId = `reset-password-${Date.now()}-${Math.floor(Math.random() * 10000)}`;\n  console.log(`[reset-password] Request ${requestId}: FUNCTION INVOKED - Method: ${event.httpMethod}`);\n\n  if (event.httpMethod !== \"POST\") {\n    console.log(`[reset-password] Request ${requestId}: Method not allowed: ${event.httpMethod}`);\n    return {\n      statusCode: 405,\n      body: JSON.stringify({\n        message: \"Method Not Allowed\",\n        toast: { type: \"error\", message: \"Invalid request method\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  let requestBody: ResetPasswordRequestBody;\n  try {\n    if (!event.body) {\n      console.error(`[reset-password] Request ${requestId}: Error - Request body is missing.`);\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          message: \"Request body is missing.\",\n          toast: { type: \"error\", message: \"Missing request data\" }\n        }),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n    requestBody = JSON.parse(event.body) as ResetPasswordRequestBody;\n    console.log(`[reset-password] Request ${requestId}: Request body parsed, contains password: ${!!requestBody.password}`);\n  } catch (error) {\n    console.error(`[reset-password] Request ${requestId}: Error - Failed to parse request body.`, error);\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        message: \"Invalid request body. Failed to parse JSON.\",\n        toast: { type: \"error\", message: \"Invalid request format\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  const { password, token, user_id } = requestBody;\n\n  // Validate required fields\n  if (!password) {\n    console.error(`[reset-password] Request ${requestId}: Error - Missing password.`);\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        message: \"Missing required field: password is required.\",\n        toast: { type: \"error\", message: \"Password is required\" }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  // Validate password strength using the centralized requirements\n  if (password.length < DEFAULT_PASSWORD_REQUIREMENTS.minLength) {\n    console.error(`[reset-password] Request ${requestId}: Error - Password too short. Min length: ${DEFAULT_PASSWORD_REQUIREMENTS.minLength}`);\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        message: `Password must be at least ${DEFAULT_PASSWORD_REQUIREMENTS.minLength} characters long.`,\n        toast: { type: \"error\", message: `Password must be at least ${DEFAULT_PASSWORD_REQUIREMENTS.minLength} characters long` }\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n\n  try {\n    // Attempt to update the user's password\n    console.log(`[reset-password] Request ${requestId}: Processing password reset request`);\n\n    // Check if we have user_id directly from the request\n    if (user_id) {\n      // If user_id is provided directly, prioritize it\n      console.log(`[reset-password] Request ${requestId}: Using direct user_id parameter for password reset`);\n\n      let wasVerified = false;\n      try {\n        console.log(`[reset-password] Request ${requestId}: Attempting to verify user ${user_id} as part of password reset.`);\n        wasVerified = await verifyUserDuringPasswordReset(user_id, requestId);\n        if (wasVerified) {\n          console.log(`[reset-password] Request ${requestId}: User ${user_id} was successfully marked as verified (or already was).`);\n        } else {\n          console.warn(`[reset-password] Request ${requestId}: User ${user_id} could not be marked as verified during password reset. Proceeding with password update anyway.`);\n        }\n      } catch (verificationError) {\n        console.error(`[reset-password] Request ${requestId}: Error during main verification call for ${user_id}:`, verificationError);\n        // Continue with password reset even if verification fails, but log the error\n      }\n\n      // Now update the password\n      console.log(`[reset-password] Request ${requestId}: Updating password for user ${user_id}`);\n      const { error } = await supabaseAdmin.auth.admin.updateUserById(\n        user_id,\n        { password }\n      );\n\n      if (error) {\n        console.error(`[reset-password] Request ${requestId}: Error updating password with user_id:`, error);\n\n        // Create an appropriate error response\n        const response: ResetPasswordResponse = {\n          success: false,\n          message: \"Failed to reset password. The user ID may be invalid.\",\n          toast: { type: \"error\", message: \"Invalid user ID for password reset\" }\n        };\n\n        return {\n          statusCode: 400,\n          body: JSON.stringify(response),\n          headers: { 'Content-Type': 'application/json' },\n        };\n      }\n\n      // Password reset successful with user_id\n      console.log(`[reset-password] Request ${requestId}: Password updated successfully via user_id`);\n\n      // Create a successful response with verification info\n      const response: ResetPasswordResponse = {\n        success: true,\n        message: \"Your password has been reset successfully.\",\n        toast: { type: \"success\", message: \"Password updated successfully\" },\n        userId: user_id,\n        verified: wasVerified\n      };\n\n      return {\n        statusCode: 200,\n        body: JSON.stringify(response),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n    else if (token) {\n      // If token is provided, use it to reset the password\n      console.log(`[reset-password] Request ${requestId}: Using token-based password reset`);\n\n      let extractedUserId = ''; // Initialize extractedUserId\n\n      // Logic to extract user_id from token - this needs to be robust\n      // For Supabase, the access_token from the recovery link is handled by the client.\n      // If this function is called with a 'token', it might be a user_id directly,\n      // or a custom token that this function needs to resolve to a user_id.\n      // The original code parsed `user_id` from a hash.\n      // Let's refine the token extraction logic:\n      // 1. Check if `token` is a valid UUID (likely a direct user_id).\n      // 2. If not, try to parse from a URL hash if it contains common recovery params.\n      \n      const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\n      if (uuidRegex.test(token)) {\n        extractedUserId = token;\n        console.log(`[reset-password] Request ${requestId}: Token appears to be a UUID, using as user_id: ${extractedUserId}`);\n      } else if (token.includes('#')) {\n        console.log(`[reset-password] Request ${requestId}: Token contains '#', attempting to parse as URL fragment.`);\n        try {\n          // Getting the fragment is not needed for standard Supabase flow\n          // token.substring(token.indexOf('#') + 1);\n          // const params = new URLSearchParams(fragment); // Not needed for standard Supabase flow\n          // Supabase recovery links use 'access_token'. We can't directly get user_id from it here without client sdk.\n          // The old code looked for 'user_id' in params, which isn't standard for Supabase.\n          // If your flow *does* put user_id in the hash, you can use:\n          // const userIdFromHash = params.get('user_id');\n          // if (userIdFromHash) extractedUserId = userIdFromHash;\n          \n          // For now, if it's a hash and not a UUID, we're in an ambiguous state for this backend function\n          // unless the client resolves the user_id first.\n          // The most reliable way is for client to send user_id if known.\n          console.warn(`[reset-password] Request ${requestId}: Token is a hash but cannot reliably extract user_id without client SDK interaction or a non-standard 'user_id' param. This flow might fail if user_id is not otherwise available.`);\n          // If `user_id` was part of the original body, it would have been caught by the `if (user_id)` block.\n          // This 'token' flow without a clear user_id is problematic for `updateUserById`.\n          // We will proceed assuming the `token` *might* be the user_id if not a UUID and not parsable to one.\n          if (!extractedUserId) extractedUserId = token; // Fallback: assume token is user_id\n\n        } catch (parseError) {\n          console.error(`[reset-password] Request ${requestId}: Error parsing token as hash:`, parseError);\n          extractedUserId = token; // Fallback: assume token is user_id\n        }\n      } else {\n        // Not a UUID, not a hash, assume it's a user_id or a custom token string that is the user_id\n        extractedUserId = token;\n        console.log(`[reset-password] Request ${requestId}: Token is not a UUID and not a hash, assuming it is user_id: ${extractedUserId}`);\n      }\n\n      if (!extractedUserId) {\n         console.error(`[reset-password] Request ${requestId}: Critical error - could not determine user ID from token: '${token}'`);\n         return {\n            statusCode: 400,\n            body: JSON.stringify({ message: \"Invalid token or unable to identify user.\", toast: {type: \"error\", message: \"Invalid reset link.\"}}),\n            headers: { 'Content-Type': 'application/json' },\n         };\n      }\n\n      console.log(`[reset-password] Request ${requestId}: Using extracted/determined userId: ${extractedUserId} for password reset via token flow.`);\n\n      let wasVerified = false;\n      try {\n        console.log(`[reset-password] Request ${requestId}: Attempting to verify user ${extractedUserId} as part of password reset.`);\n        wasVerified = await verifyUserDuringPasswordReset(extractedUserId, requestId);\n        if (wasVerified) {\n          console.log(`[reset-password] Request ${requestId}: User ${extractedUserId} was successfully marked as verified (or already was).`);\n        } else {\n          console.warn(`[reset-password] Request ${requestId}: User ${extractedUserId} could not be marked as verified. Proceeding with password update anyway.`);\n        }\n      } catch (verificationError) {\n        console.error(`[reset-password] Request ${requestId}: Error during main verification call for ${extractedUserId}:`, verificationError);\n      }\n\n      // Now update the password\n      console.log(`[reset-password] Request ${requestId}: Updating password for user ${extractedUserId}`);\n      const { error } = await supabaseAdmin.auth.admin.updateUserById(\n        extractedUserId,\n        { password }\n      );\n\n      if (error) {\n        console.error(`[reset-password] Request ${requestId}: Error updating password with token:`, error);\n\n        // Create an appropriate error response\n        const response: ResetPasswordResponse = {\n          success: false,\n          message: \"Failed to reset password. The token may be invalid or expired.\",\n          toast: { type: \"error\", message: \"Invalid or expired reset token\" }\n        };\n\n        return {\n          statusCode: 400,\n          body: JSON.stringify(response),\n          headers: { 'Content-Type': 'application/json' },\n        };\n      }\n\n      // Password reset successful with token\n      console.log(`[reset-password] Request ${requestId}: Password updated successfully via token`);\n\n      // Create a successful response with verification info\n      const response: ResetPasswordResponse = {\n        success: true,\n        message: \"Your password has been reset successfully.\",\n        toast: { type: \"success\", message: \"Password updated successfully\" },\n        userId: extractedUserId,\n        verified: wasVerified\n      };\n\n      return {\n        statusCode: 200,\n        body: JSON.stringify(response),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    } else {\n      // No token or user_id provided\n      console.log(`[reset-password] Request ${requestId}: No token or user_id provided, password update should be handled client-side`);\n\n      // Create a response indicating client-side handling needed\n      const response: ResetPasswordResponse = {\n        success: true,\n        message: \"No token or user_id provided. Password reset should be handled client-side.\",\n        useClientSideUpdate: true,\n        toast: { type: \"info\", message: \"Please use the password reset link from your email\" }\n      };\n\n      return {\n        statusCode: 200,\n        body: JSON.stringify(response),\n        headers: { 'Content-Type': 'application/json' },\n      };\n    }\n  } catch (error: unknown) {\n    const typedError = error instanceof Error ? error : new Error(String(error));\n    console.error(`[reset-password] Request ${requestId}: Unexpected error:`, typedError.message, typedError.stack);\n\n    // Create a standard error response\n    const response: ResetPasswordResponse = {\n      success: false,\n      message: \"An unexpected server error occurred during password reset.\",\n      toast: { type: \"error\", message: \"Server error during password reset\" }\n    };\n\n    return {\n      statusCode: 500,\n      body: JSON.stringify(response),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n};\n\nexport { handler };"]}
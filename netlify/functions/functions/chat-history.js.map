{"version":3,"file":"chat-history.js","sourceRoot":"","sources":["../../../src/backend/functions/chat-history.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Handler, HandlerEvent, HandlerContext, HandlerResponse } from \"@netlify/functions\";\nimport { StoredChatMessage, ChatMessage, ApiLogMessage } from './services/types';\n\n/**\n * CORS headers for consistent application across all responses\n */\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*', // In production, restrict to your domain\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  'Access-Control-Allow-Methods': 'GET, POST, DELETE, OPTIONS',\n  'Content-Type': 'application/json'\n};\n\n/**\n * Standard response helper for consistently formatted API responses\n */\ninterface ApiResponse<T = unknown> {\n  success: boolean;\n  data?: T;\n  error?: {\n    message: string;\n    code?: string;\n    details?: unknown;\n  };\n  meta?: {\n    count?: number;\n    [key: string]: unknown;\n  };\n}\n\n/**\n * Create a standardized success response\n */\nfunction createSuccessResponse<T>(data: T, meta?: Record<string, unknown>, statusCode = 200): {\n  statusCode: number;\n  headers: Record<string, string>;\n  body: string;\n} {\n  const response: ApiResponse<T> = {\n    success: true,\n    data,\n    meta\n  };\n  \n  return {\n    statusCode,\n    headers: corsHeaders,\n    body: JSON.stringify(response)\n  };\n}\n\n/**\n * Create a standardized error response\n */\nfunction createErrorResponse(\n  message: string, \n  statusCode = 500, \n  code?: string, \n  details?: unknown\n): {\n  statusCode: number;\n  headers: Record<string, string>;\n  body: string;\n} {\n  const response: ApiResponse = {\n    success: false,\n    error: {\n      message,\n      code,\n      details\n    }\n  };\n  \n  return {\n    statusCode,\n    headers: corsHeaders,\n    body: JSON.stringify(response)\n  };\n}\n\n/**\n * Request validation for StoredChatMessage\n */\nfunction validateMessage(message: StoredChatMessage): { valid: boolean; error?: string } {\n  if (!message || typeof message !== 'object') {\n    return { valid: false, error: 'Invalid message format: message must be an object' };\n  }\n  \n  if (!message.type || (message.type !== 'display' && message.type !== 'api_log')) {\n    return { valid: false, error: 'Invalid message type: must be \"display\" or \"api_log\"' };\n  }\n  \n  if (!message.data) {\n    return { valid: false, error: 'Message data is missing' };\n  }\n  \n  if (message.type === 'display') {\n    const displayMsg = message.data as ChatMessage;\n    if (!displayMsg.id || !displayMsg.role || !displayMsg.content || !displayMsg.timestamp) {\n      return { valid: false, error: 'Display message must include id, role, content, and timestamp' };\n    }\n    \n    if (!['user', 'assistant', 'system'].includes(displayMsg.role)) {\n      return { valid: false, error: 'Display message role must be \"user\", \"assistant\", or \"system\"' };\n    }\n  } else if (message.type === 'api_log') {\n    const apiLogMsg = message.data as ApiLogMessage;\n    if (!apiLogMsg.role || !apiLogMsg.content) {\n      return { valid: false, error: 'API log message must include role and content' };\n    }\n    \n    if (!['user', 'assistant', 'system'].includes(apiLogMsg.role)) {\n      return { valid: false, error: 'API log message role must be \"user\", \"assistant\", or \"system\"' };\n    }\n  }\n  \n  return { valid: true };\n}\n\n/**\n * Extract and validate the authenticated user from a request\n */\nasync function getAuthenticatedUser(event: HandlerEvent, requestId: string): Promise<{user: {id: string} | null, response?: HandlerResponse}> {\n  const authHeader = event.headers.authorization || event.headers.Authorization;\n  \n  // Add more detailed debug logging\n  if (!authHeader) {\n    console.error(`[chat-history] Request ${requestId}: Auth error: No Authorization header present`);\n    return { \n      user: null, \n      response: createErrorResponse('Authentication header is missing', 401, 'auth_missing_header') \n    };\n  }\n  \n  if (!authHeader.startsWith('Bearer ')) {\n    console.error(`[chat-history] Request ${requestId}: Auth error: Invalid Authorization header format (missing Bearer prefix)`);\n    return { \n      user: null, \n      response: createErrorResponse('Authentication header format invalid', 401, 'auth_invalid_format') \n    };\n  }\n  \n  const token = authHeader.split(' ')[1];\n  if (!token || token.trim() === '') {\n    console.error(`[chat-history] Request ${requestId}: Auth error: Empty token in Authorization header`);\n    return { \n      user: null, \n      response: createErrorResponse('Empty authentication token', 401, 'auth_empty_token') \n    };\n  }\n  \n  // Add debug info\n  console.log(`[chat-history] Request ${requestId}: Attempting to validate token (length: ${token.length}, prefix: ${token.substring(0, 10)}...)`);\n  \n  // Create a fresh Supabase admin client for this request to avoid any stale client state\n  const supabaseUrl = process.env.SUPABASE_URL;\n  const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n  \n  if (!supabaseUrl || !supabaseServiceRoleKey) {\n    console.error(`[chat-history] Request ${requestId}: Critical configuration error - missing Supabase environment variables`);\n    return {\n      user: null,\n      response: createErrorResponse('Server configuration error', 500, 'server_config_error')\n    };\n  }\n  \n  try {\n    // Try to decode the JWT token to extract the user ID directly\n    // First, try to extract payload without verification to get the user ID\n    const tokenParts = token.split('.');\n    if (tokenParts.length !== 3) {\n      console.error(`[chat-history] Request ${requestId}: Invalid JWT token format (parts: ${tokenParts.length})`);\n      return {\n        user: null,\n        response: createErrorResponse('Invalid token format', 401, 'invalid_token_format')\n      };\n    }\n    \n    try {\n      // Base64 decode the payload part (second part of the JWT)\n      const payloadBase64 = tokenParts[1];\n      const decodedPayload = Buffer.from(payloadBase64, 'base64').toString('utf8');\n      const payload = JSON.parse(decodedPayload);\n      \n      console.log(`[chat-history] Request ${requestId}: Successfully decoded token payload, subject: ${payload.sub}`);\n      \n      if (!payload.sub) {\n        console.error(`[chat-history] Request ${requestId}: JWT token missing 'sub' claim (user ID)`);\n        return {\n          user: null,\n          response: createErrorResponse('Invalid token: missing user ID', 401, 'token_missing_userid')\n        };\n      }\n      \n      const userId = payload.sub;\n      \n      // Create a fresh Supabase client for this request with explicit configuration\n      console.log(`[chat-history] Request ${requestId}: Creating fresh Supabase admin client to verify user existence`);\n      const { createClient } = await import('@supabase/supabase-js');\n      const freshSupabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {\n        auth: {\n          autoRefreshToken: false,\n          persistSession: false,\n          detectSessionInUrl: false\n        },\n        global: {\n          headers: {\n            'X-Request-ID': requestId\n          }\n        }\n      });\n      \n      // Check if the user exists in the profiles table\n      console.log(`[chat-history] Request ${requestId}: Checking user existence in profiles table`);\n      const { data: userData, error: userError } = await freshSupabaseAdmin\n        .from('profiles')\n        .select('id')\n        .eq('id', userId)\n        .single();\n      \n      if (userError) {\n        console.error(`[chat-history] Request ${requestId}: User database lookup error: ${userError.message}`);\n        \n        // Special case: if the error is that no rows were returned, it means the user doesn't exist\n        if (userError.code === 'PGRST116') {\n          return {\n            user: null,\n            response: createErrorResponse('User not found', 401, 'user_not_found')\n          };\n        }\n        \n        return {\n          user: null,\n          response: createErrorResponse('Error verifying user', 500, 'database_error')\n        };\n      }\n      \n      if (!userData) {\n        console.error(`[chat-history] Request ${requestId}: User ${userId} not found in profiles table`);\n        return {\n          user: null,\n          response: createErrorResponse('User not found', 401, 'user_not_found')\n        };\n      }\n      \n      // User exists, create a synthetic user object with the data we have\n      const user = {\n        id: userId,\n        app_metadata: {},\n        user_metadata: {},\n        aud: 'authenticated',\n        created_at: new Date().toISOString()\n      };\n      \n      console.log(`[chat-history] Request ${requestId}: Authentication successful: User ${userId} validated via profiles table`);\n      return { user, response: undefined };\n      \n    } catch (decodeError) {\n      console.error(`[chat-history] Request ${requestId}: Failed to decode JWT payload: ${decodeError instanceof Error ? decodeError.message : String(decodeError)}`);\n      return {\n        user: null,\n        response: createErrorResponse('Invalid token: could not decode payload', 401, 'token_decode_error')\n      };\n    }\n  } catch (error) {\n    // Enhanced error logging with stack trace\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    const errorStack = error instanceof Error ? error.stack : undefined;\n    console.error(`[chat-history] Request ${requestId}: Authentication exception: ${errorMessage}`, { stack: errorStack });\n    \n    return { \n      user: null, \n      response: createErrorResponse(\n        'Authentication error during token verification', \n        401, \n        'auth_verification_error', \n        {\n          message: errorMessage,\n          stack: errorStack\n        }\n      ) \n    };\n  }\n}\n\n/**\n * Get all chat history for a user\n */\nasync function getChatHistory(userId: string, requestId: string): Promise<HandlerResponse> {\n  try {\n    console.log(`[chat-history] Request ${requestId}: Fetching chat history for user ${userId}`);\n    \n    // Create a fresh Supabase admin client for this operation\n    const supabaseUrl = process.env.SUPABASE_URL;\n    const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n    \n    if (!supabaseUrl || !supabaseServiceRoleKey) {\n      console.error(`[chat-history] Request ${requestId}: Critical configuration error - missing Supabase environment variables`);\n      return createErrorResponse('Server configuration error', 500, 'server_config_error');\n    }\n    \n    // Create a fresh Supabase client\n    console.log(`[chat-history] Request ${requestId}: Creating fresh Supabase admin client for database operations`);\n    const { createClient } = await import('@supabase/supabase-js');\n    const freshSupabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false,\n        detectSessionInUrl: false\n      },\n      db: {\n        schema: 'public'\n      },\n      global: {\n        headers: {\n          'X-Request-ID': requestId\n        }\n      }\n    });\n    \n    // Set a reasonable timeout for the query\n    const QUERY_TIMEOUT_MS = 10000; // 10 seconds\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Database query timeout')), QUERY_TIMEOUT_MS);\n    });\n    \n    // Execute the database query with a timeout\n    const queryPromise = freshSupabaseAdmin\n      .from('conversation_history')\n      .select('message_object', { count: 'exact' })\n      .eq('user_id', userId)\n      .order('created_at', { ascending: true });\n\n    // Use Promise.race to implement the timeout\n    const queryResult = await Promise.race([\n      queryPromise,\n      timeoutPromise.then(() => {\n        throw new Error('Database query timeout');\n      })\n    ]);\n\n    const { data, error, count } = queryResult;\n    \n    if (error) {\n      console.error(`[chat-history] Request ${requestId}: Database error:`, error);\n      return createErrorResponse(\n        'Failed to retrieve chat history', \n        500, \n        'db_error', \n        error.message\n      );\n    }\n    \n    // Extract message objects from the database results\n    const messages = data?.map((item: { message_object: unknown }) => item.message_object as StoredChatMessage) || [];\n    console.log(`[chat-history] Request ${requestId}: Retrieved ${messages.length} messages for user ${userId}`);\n    \n    return createSuccessResponse(messages, { count: count || 0 });\n  } catch (error) {\n    console.error(`[chat-history] Request ${requestId}: Exception in getChatHistory:`, error);\n    \n    // Check for specific error types\n    if (error instanceof Error && error.message === 'Database query timeout') {\n      return createErrorResponse(\n        'Database query timed out', \n        504, \n        'db_timeout'\n      );\n    }\n    \n    return createErrorResponse(\n      'Error retrieving chat history', \n      500, \n      'internal_error',\n      error instanceof Error ? error.message : String(error)\n    );\n  }\n}\n\n/**\n * Save a new message to the database\n */\nasync function saveMessage(userId: string, message: StoredChatMessage, requestId: string): Promise<HandlerResponse> {\n  try {\n    console.log(`[chat-history] Request ${requestId}: Saving new message of type ${message.type} for user ${userId}`);\n    \n    // Validate the message structure\n    const validation = validateMessage(message);\n    if (!validation.valid) {\n      console.warn(`[chat-history] Request ${requestId}: Message validation failed: ${validation.error}`);\n      const errorMessage = validation.error ?? 'Invalid message';\n      return createErrorResponse(errorMessage, 400, 'validation_error');\n    }\n    \n    // Create a fresh Supabase admin client for this operation\n    const supabaseUrl = process.env.SUPABASE_URL;\n    const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n    \n    if (!supabaseUrl || !supabaseServiceRoleKey) {\n      console.error(`[chat-history] Request ${requestId}: Critical configuration error - missing Supabase environment variables`);\n      return createErrorResponse('Server configuration error', 500, 'server_config_error');\n    }\n    \n    // Create a fresh Supabase client\n    console.log(`[chat-history] Request ${requestId}: Creating fresh Supabase admin client for database operations`);\n    const { createClient } = await import('@supabase/supabase-js');\n    const freshSupabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false,\n        detectSessionInUrl: false\n      },\n      db: {\n        schema: 'public'\n      },\n      global: {\n        headers: {\n          'X-Request-ID': requestId\n        }\n      }\n    });\n    \n    // Set a reasonable timeout for the insert operation\n    const QUERY_TIMEOUT_MS = 10000; // 10 seconds\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Database operation timeout')), QUERY_TIMEOUT_MS);\n    });\n    \n    // Execute the database insert with a timeout\n    const insertPromise = freshSupabaseAdmin\n      .from('conversation_history')\n      .insert([{ \n        user_id: userId, \n        message_object: message \n      }])\n      .select('id, created_at');\n    \n    // Use Promise.race to implement the timeout\n    const insertResult = await Promise.race([\n      insertPromise,\n      timeoutPromise.then(() => {\n        throw new Error('Database operation timeout');\n      })\n    ]);\n\n    const { data, error } = insertResult;\n    \n    if (error) {\n      console.error(`[chat-history] Request ${requestId}: Database error during save:`, error);\n      return createErrorResponse(\n        'Failed to save message', \n        500, \n        'db_error', \n        error.message\n      );\n    }\n    \n    console.log(`[chat-history] Request ${requestId}: Message saved successfully with ID ${data?.[0]?.id}`);\n    \n    return createSuccessResponse(\n      { id: data?.[0]?.id, created_at: data?.[0]?.created_at },\n      { message: 'Message saved successfully' },\n      201 // Created\n    );\n  } catch (error) {\n    console.error(`[chat-history] Request ${requestId}: Exception in saveMessage:`, error);\n    \n    if (error instanceof Error && error.message === 'Database operation timeout') {\n      return createErrorResponse(\n        'Database operation timed out', \n        504, \n        'db_timeout'\n      );\n    }\n    \n    if (error instanceof SyntaxError) {\n      return createErrorResponse('Invalid JSON format', 400, 'syntax_error', error.message);\n    }\n    \n    return createErrorResponse(\n      'Error saving message', \n      500, \n      'internal_error',\n      error instanceof Error ? error.message : String(error)\n    );\n  }\n}\n\n/**\n * Delete all chat history for a user\n */\nasync function clearChatHistory(userId: string, requestId: string): Promise<HandlerResponse> {\n  try {\n    console.log(`[chat-history] Request ${requestId}: Deleting chat history for user ${userId}`);\n    \n    // Create a fresh Supabase admin client for this operation\n    const supabaseUrl = process.env.SUPABASE_URL;\n    const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n    \n    if (!supabaseUrl || !supabaseServiceRoleKey) {\n      console.error(`[chat-history] Request ${requestId}: Critical configuration error - missing Supabase environment variables`);\n      return createErrorResponse('Server configuration error', 500, 'server_config_error');\n    }\n    \n    // Create a fresh Supabase client\n    console.log(`[chat-history] Request ${requestId}: Creating fresh Supabase admin client for database operations`);\n    const { createClient } = await import('@supabase/supabase-js');\n    const freshSupabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false,\n        detectSessionInUrl: false\n      },\n      db: {\n        schema: 'public'\n      },\n      global: {\n        headers: {\n          'X-Request-ID': requestId\n        }\n      }\n    });\n    \n    // Set a reasonable timeout for the delete operation\n    const QUERY_TIMEOUT_MS = 15000; // 15 seconds for delete which could take longer\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Database operation timeout')), QUERY_TIMEOUT_MS);\n    });\n    \n    // Execute the database delete with a timeout\n    const deletePromise = freshSupabaseAdmin\n      .from('conversation_history')\n      .delete({ count: 'exact' })\n      .eq('user_id', userId);\n    \n    // Use Promise.race to implement the timeout\n    const deleteResult = await Promise.race([\n      deletePromise,\n      timeoutPromise.then(() => {\n        throw new Error('Database operation timeout');\n      })\n    ]);\n\n    const { error, count } = deleteResult;\n    \n    if (error) {\n      console.error(`[chat-history] Request ${requestId}: Database error during delete:`, error);\n      return createErrorResponse(\n        'Failed to clear chat history', \n        500, \n        'db_error', \n        error.message\n      );\n    }\n    \n    console.log(`[chat-history] Request ${requestId}: Successfully deleted ${count || 0} messages for user ${userId}`);\n    \n    return createSuccessResponse(\n      { deletedCount: count || 0 },\n      { message: 'Chat history cleared successfully' }\n    );\n  } catch (error) {\n    console.error(`[chat-history] Request ${requestId}: Exception in clearChatHistory:`, error);\n    \n    if (error instanceof Error && error.message === 'Database operation timeout') {\n      return createErrorResponse(\n        'Database operation timed out', \n        504, \n        'db_timeout'\n      );\n    }\n    \n    return createErrorResponse(\n      'Error clearing chat history', \n      500, \n      'internal_error',\n      error instanceof Error ? error.message : String(error)\n    );\n  }\n}\n\n/**\n * Main handler function for the chat-history endpoint\n */\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext) => {\n  // Log request details for better debugging\n  const requestId = Math.random().toString(36).substring(2, 12);\n  console.log(`[chat-history] Request ${requestId}: Function invoked with method ${event.httpMethod} at ${new Date().toISOString()}`);\n  console.log(`[chat-history] Request ${requestId}: Headers present: ${Object.keys(event.headers).join(', ')}`);\n  \n  // Set up request timeout detection\n  let isRequestTimedOut = false;\n  const REQUEST_TIMEOUT = 25000; // 25 seconds timeout\n  const timeoutId = setTimeout(() => {\n    isRequestTimedOut = true;\n    console.error(`[chat-history] Request ${requestId}: Operation timed out after ${REQUEST_TIMEOUT}ms`);\n  }, REQUEST_TIMEOUT);\n  \n  try {\n    // Verify auth header is present and log its format (redacted)\n    const authHeader = event.headers.authorization || event.headers.Authorization;\n    if (authHeader) {\n      const headerFormat = authHeader.startsWith('Bearer ') \n        ? `Bearer [token-redacted] (length: ${authHeader.length - 7})` \n        : `Invalid format: ${authHeader.substring(0, 10)}...`;\n      console.log(`[chat-history] Request ${requestId}: Auth header format: ${headerFormat}`);\n    } else {\n      console.log(`[chat-history] Request ${requestId}: No auth header present`);\n    }\n    \n    // Handle CORS preflight requests first\n    if (event.httpMethod === 'OPTIONS') {\n      clearTimeout(timeoutId);\n      return {\n        statusCode: 204, // No content for OPTIONS\n        headers: corsHeaders,\n        body: ''\n      };\n    }\n    \n    try {\n      // Get and validate the authenticated user\n      const { user, response: authError } = await getAuthenticatedUser(event, requestId);\n      if (authError) {\n        console.error(`[chat-history] Request ${requestId}: Auth error: ${authError.body ? JSON.parse(authError.body).error?.message || 'Unknown error' : 'No error body'}`); \n        clearTimeout(timeoutId);\n        return authError; // Return auth error response if user validation failed\n      }\n      \n      if (isRequestTimedOut) {\n        console.error(`[chat-history] Request ${requestId}: Request timed out during authentication`);\n        return createErrorResponse('Request processing timed out', 504, 'request_timeout');\n      }\n\n      if (!user) {\n        console.error(`[chat-history] Request ${requestId}: User is null after authentication`);\n        clearTimeout(timeoutId);\n        return createErrorResponse('Authentication failed', 401, 'auth_error');\n      }\n\n      console.log(`[chat-history] Request ${requestId}: Authenticated user: ${user.id}`);\n      \n      // Process the request based on HTTP method\n      switch (event.httpMethod) {\n        case 'GET': {\n          // Retrieve chat history\n          const getResult = await getChatHistory(user.id, requestId);\n          clearTimeout(timeoutId);\n          return getResult;\n        }\n          \n        case 'POST': {\n          // Add a new message\n          if (!event.body) {\n            clearTimeout(timeoutId);\n            return createErrorResponse('Request body is missing', 400, 'missing_body');\n          }\n\n          try {\n            const message = JSON.parse(event.body) as StoredChatMessage;\n            const postResult = await saveMessage(user.id, message, requestId);\n            clearTimeout(timeoutId);\n            return postResult;\n          } catch (parseError) {\n            console.error(`[chat-history] Request ${requestId}: JSON parse error:`, parseError);\n            clearTimeout(timeoutId);\n            return createErrorResponse(\n              'Invalid JSON in request body',\n              400,\n              'invalid_json',\n              parseError instanceof Error ? parseError.message : String(parseError)\n            );\n          }\n        }\n          \n        case 'DELETE': {\n          // Clear chat history\n          const deleteResult = await clearChatHistory(user.id, requestId);\n          clearTimeout(timeoutId);\n          return deleteResult;\n        }\n          \n        default:\n          // Method not allowed\n          clearTimeout(timeoutId);\n          return createErrorResponse(\n            `HTTP method ${event.httpMethod} not supported`, \n            405, \n            'method_not_allowed'\n          );\n      }\n    } catch (innerError) {\n      console.error(`[chat-history] Request ${requestId}: Error in request processing:`, innerError);\n      clearTimeout(timeoutId);\n      return createErrorResponse(\n        'Error processing request', \n        500, \n        'processing_error',\n        innerError instanceof Error ? { message: innerError.message, stack: innerError.stack } : String(innerError)\n      );\n    }\n  } catch (error) {\n    // Catch any uncaught exceptions\n    console.error(`[chat-history] Request ${requestId}: Unhandled exception:`, error);\n    clearTimeout(timeoutId);\n    return createErrorResponse(\n      'An unexpected error occurred', \n      500, \n      'internal_error',\n      error instanceof Error ? { message: error.message, stack: error.stack } : String(error)\n    );\n  } finally {\n    // Ensure the timeout is cleared if it hasn't fired yet\n    clearTimeout(timeoutId);\n  }\n};\n\nexport { handler };"]}
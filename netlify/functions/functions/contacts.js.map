{"version":3,"file":"contacts.js","sourceRoot":"","sources":["../../../src/backend/functions/contacts.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport { supabaseAdmin } from '../services';\nimport type { PostgrestError } from '@supabase/supabase-js';\nimport type { ContactCreatePayload, ContactUpdatePayload, ContactDeletePayload } from './services/types';\nimport type { Contact } from '../types/domain';\nimport { contactService } from '../services/contactService';\nimport type { ContactIdentifier } from '../types/domain'; \n\nconst TABLE_NAME = 'contacts';\nconst COMMON_HEADERS = { 'Content-Type': 'application/json' };\n\n// Import shared contact quality filters\nimport { applyContactQualityFilters } from '../utils/contactFilters';\n\n// Helper function to get authenticated user ID\nexport const getAuthenticatedUserId = (event: HandlerEvent, context: HandlerContext): string | null => {\n  // First, try to get user from the clientContext (direct browser calls via Netlify Identity)\n  const { user: clientContextUser } = context.clientContext || {};\n  if (clientContextUser && clientContextUser.sub) {\n    console.log(\"[authHelper] Authenticated user ID from context.clientContext:\", clientContextUser.sub);\n    return clientContextUser.sub;\n  }\n\n  // If clientContext auth fails, check for Authorization header (when called from another function or frontend)\n  const authHeader = event.headers.authorization; // Netlify normalizes to lowercase\n\n  if (authHeader) {\n    if (authHeader.startsWith('Bearer ')) {\n      try {\n        const token = authHeader.replace('Bearer ', '');\n        const parts = token.split('.');\n        if (parts.length !== 3) {\n          console.warn(\"[authHelper] Invalid JWT format in Authorization header (expected 3 parts). Token was:\", authHeader);\n          return null;\n        }\n        const payloadBase64 = parts[1]; // Correctly get the second part (payload)\n\n        if (!payloadBase64) {\n          console.warn(\"[authHelper] Invalid JWT format in Authorization header (missing payload part). Token was:\", authHeader);\n          return null;\n        }\n        // Decode the Base64URL encoded payload\n        const payloadJson = Buffer.from(payloadBase64, 'base64url').toString('utf8');\n        const payload = JSON.parse(payloadJson);\n\n        if (payload && payload.sub) {\n          console.log(\"[authHelper] Authenticated user ID from Authorization header:\", payload.sub);\n          return payload.sub;\n        } else {\n          console.warn(\"[authHelper] User ID (sub) missing in JWT payload from Authorization header. Payload:\", payloadJson);\n          return null;\n        }\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        console.error(\"[authHelper] Error parsing JWT from Authorization header:\", errorMessage, \"Token was:\", authHeader);\n        return null;\n      }\n    } else {\n      console.warn(\"[authHelper] Authorization header present but not a Bearer token. Header:\", authHeader);\n    }\n  } else {\n    // Log available headers if Authorization header is missing, to help debug\n    const availableHeaders = Object.keys(event.headers).join(', ');\n    console.warn(`[authHelper] Authorization header is missing. Available headers: ${availableHeaders}`);\n  }\n\n  console.warn(\"[authHelper] No valid authentication method found (clientContext or Bearer token in Authorization header).\");\n  return null;\n};\n\n// Function to generate a display name for a contact\nexport const generateDisplayName = (contact: Partial<Contact>): string => {\n  if (!contact) return 'Unknown Contact';\n\n  let displayName = '';\n\n  // 1. Prioritize Nickname\n  if (contact.nickname && contact.nickname.trim() !== '') {\n    displayName = contact.nickname.trim();\n  } else {\n    // 2. Construct Full Name (First, Middle, Last)\n    const nameParts = [];\n    if (contact.first_name && contact.first_name.trim() !== '') nameParts.push(contact.first_name.trim());\n    if (contact.middle_name && contact.middle_name.trim() !== '') nameParts.push(contact.middle_name.trim());\n    if (contact.last_name && contact.last_name.trim() !== '') nameParts.push(contact.last_name.trim());\n    if (nameParts.length > 0) {\n      displayName = nameParts.join(' ');\n    }\n  }\n  \n  // 3. Fallback to Professional Identity: Company + Job Title + Department\n  if (!displayName) {\n    const orgParts = [];\n    if (contact.company && contact.company.trim() !== '') orgParts.push(contact.company.trim());\n    if (contact.job_title && contact.job_title.trim() !== '') orgParts.push(contact.job_title.trim());\n    if (contact.department && contact.department.trim() !== '') orgParts.push(contact.department.trim());\n    \n    if (orgParts.length > 0) {\n      displayName = orgParts.join(' - ');\n    }\n  }\n\n  // 4. Fallback to Contact Information\n  if (!displayName && contact.email && contact.email.trim() !== '') {\n    displayName = contact.email.trim();\n  }\n\n  if (!displayName && contact.phone && contact.phone.trim() !== '') {\n    displayName = contact.phone.trim();\n  }\n\n  if (!displayName && contact.mobile_phone && contact.mobile_phone.trim() !== '') {\n    displayName = contact.mobile_phone.trim();\n  }\n\n  if (!displayName && contact.work_phone && contact.work_phone.trim() !== '') {\n    displayName = contact.work_phone.trim();\n  }\n\n  // 5. Fallback to Preferred Contact Method\n  if (!displayName && contact.preferred_contact_method && contact.preferred_contact_method.trim() !== '') {\n    displayName = `Via ${contact.preferred_contact_method.trim()}`;\n  }\n  \n  // 6. Fallback to Social Media\n  if (!displayName && contact.social_linkedin && contact.social_linkedin.trim() !== '') {\n    displayName = `LinkedIn: ${contact.social_linkedin.trim()}`;\n  }\n  \n  if (!displayName && contact.social_twitter && contact.social_twitter.trim() !== '') {\n    displayName = `Twitter: ${contact.social_twitter.trim()}`;\n  }\n  \n  // 7. Fallback to Website\n  if (!displayName && contact.website && contact.website.trim() !== '') {\n    displayName = contact.website.trim();\n  }\n  \n  // 8. Fallback to Physical Address\n  if (!displayName) {\n    if (contact.formatted_address && contact.formatted_address.trim() !== '') {\n      // Use the pre-formatted address if available\n      displayName = `Address: ${contact.formatted_address.trim().split('\\n')[0]}`; // Just the first line\n    } else {\n      // Try to construct a brief address\n      const addressParts = [];\n      \n      if (contact.street_address && contact.street_address.trim() !== '') {\n        addressParts.push(contact.street_address.trim());\n      }\n      \n      if (contact.street_address_2 && contact.street_address_2.trim() !== '') {\n        addressParts.push(contact.street_address_2.trim());\n      }\n      \n      if (contact.city && contact.city.trim() !== '') {\n        addressParts.push(contact.city.trim());\n      }\n      \n      if (contact.state_province && contact.state_province.trim() !== '') {\n        addressParts.push(contact.state_province.trim());\n      }\n      \n      if (contact.postal_code && contact.postal_code.trim() !== '') {\n        addressParts.push(contact.postal_code.trim());\n      }\n      \n      if (contact.country && contact.country.trim() !== '') {\n        addressParts.push(contact.country.trim());\n      }\n      \n      if (addressParts.length > 0) {\n        displayName = `Address: ${addressParts.join(', ')}`;\n      }\n    }\n  }\n\n  // 9. Fallback to Birthday if somehow that's all we have\n  if (!displayName && contact.birthday && contact.birthday.trim() !== '') {\n    displayName = `Birthday: ${contact.birthday.trim()}`;\n  }\n  \n  // 10. Fallback to Tags\n  if (!displayName && contact.tags && Array.isArray(contact.tags) && contact.tags.length > 0) {\n    displayName = `Contact tagged: ${contact.tags.join(', ')}`;\n  } else if (!displayName && contact.tags && typeof contact.tags === 'string' && (contact.tags as string).trim() !== '') {\n    displayName = `Contact tagged: ${(contact.tags as string).trim()}`;\n  }\n  \n  // 11. Fallback to Language/Timezone\n  if (!displayName && contact.language && contact.language.trim() !== '') {\n    displayName = `${contact.language.trim()} speaker`;\n  }\n  \n  if (!displayName && contact.timezone && contact.timezone.trim() !== '') {\n    displayName = `Contact in ${contact.timezone.trim()}`;\n  }\n  \n  // 12. Fallback to Notes (just the beginning if available)\n  if (!displayName && contact.notes && contact.notes.trim() !== '') {\n    const notePreview = contact.notes.trim().substring(0, 30);\n    displayName = `Contact with note: \"${notePreview}${notePreview.length < contact.notes.trim().length ? '...' : ''}\"`;\n  }\n  \n  // 13. Absolute Fallback - Use Contact ID or Unknown\n  if (!displayName) {\n    if (contact.contact_id) {\n      displayName = `Contact #${contact.contact_id.substring(0, 8)}`;\n    } else {\n      displayName = 'Unknown Contact';\n    }\n  }\n\n  return displayName;\n};\n\nconst handler: Handler = async (event: HandlerEvent, context: HandlerContext) => {\n  const { httpMethod, path, queryStringParameters, body: eventBodyString } = event;\n  const logPrefix = `[contacts.ts:${httpMethod}:${path}]`;\n\n  console.log(`${logPrefix} Invoked. Query: ${JSON.stringify(queryStringParameters || {})}. Body (first 100 chars): ${eventBodyString ? eventBodyString.substring(0, 100) : 'N/A'}`);\n\n  // --- Handle POST for creating a new contact or handling emulated DELETE ---\n  if (httpMethod === \"POST\") {\n    console.log(`${logPrefix} POST request received.`);\n    // 1. Authentication & Authorization\n    const userId = getAuthenticatedUserId(event, context);\n    if (!userId) {\n      console.error(`${logPrefix} POST error: User not authenticated.`);\n      return {\n        statusCode: 401,\n        body: JSON.stringify({ message: \"Authentication required to create contact.\" }),\n        headers: COMMON_HEADERS,\n      };\n    }\n    console.log(`${logPrefix} Authenticated user ID for POST: ${userId}`);\n\n    let requestBody: ContactCreatePayload | ContactDeletePayload;\n    // 2. Parse Request Body\n    try {\n      if (!eventBodyString) {\n        console.warn(`${logPrefix} POST error: Request body is missing.`);\n        throw new Error(\"Request body is missing.\");\n      }\n\n      // Parse the request body first as a generic object\n      const parsedBody = JSON.parse(eventBodyString);\n\n      // If _method is DELETE, treat it as a ContactDeletePayload\n      if (parsedBody._method === 'DELETE' && parsedBody.contact_id) {\n        requestBody = parsedBody as ContactDeletePayload;\n        console.log(`${logPrefix} Parsed request body for POST: ${JSON.stringify(requestBody)}`);\n\n        // Check if this is actually a DELETE request being emulated through POST\n        console.log(`${logPrefix} POST request with _method=DELETE detected. Emulating DELETE operation for contact_id: ${requestBody.contact_id}`);\n\n        // Forward to DELETE handler logic with the contact_id\n        try {\n          const contactIdToDelete = requestBody.contact_id;\n\n          console.log(`${logPrefix} Attempting to delete contact_id: ${contactIdToDelete}`);\n\n          // Perform delete in Supabase\n          const { data, error: deleteError } = await supabaseAdmin\n            .from(TABLE_NAME)\n            .delete()\n            .eq('contact_id', contactIdToDelete)\n            .eq('user_id', userId) // Double-check user ownership\n            .select(); // To confirm deletion\n\n          if (deleteError) {\n            console.error(`${logPrefix} Supabase delete error:`, deleteError.message);\n            return {\n              statusCode: 500,\n              body: JSON.stringify({ message: `Failed to delete contact: ${deleteError.message}` }),\n              headers: COMMON_HEADERS,\n            };\n          }\n\n          if (!data || data.length === 0) {\n            console.log(`${logPrefix} No contact found with id ${contactIdToDelete} for user ${userId} to delete.`);\n            return {\n              statusCode: 404,\n              body: JSON.stringify({ message: `Contact with id ${contactIdToDelete} not found or became unavailable during deletion.` }),\n              headers: COMMON_HEADERS,\n            };\n          }\n\n          console.log(`${logPrefix} Successfully deleted contact: ${contactIdToDelete}`);\n          return {\n            statusCode: 200,\n            body: JSON.stringify({ message: `Successfully deleted contact: ${contactIdToDelete}` }),\n            headers: COMMON_HEADERS,\n          };\n        } catch (error) {\n          console.error(`${logPrefix} Unexpected error in emulated DELETE handler:`, error);\n          return {\n            statusCode: 500,\n            body: JSON.stringify({ message: \"An unexpected error occurred while deleting the contact.\" }),\n            headers: COMMON_HEADERS,\n          };\n        }\n      } else {\n        // Regular POST request to create a contact\n        requestBody = parsedBody as ContactCreatePayload;\n        console.log(`${logPrefix} Parsed request body for contact creation: ${JSON.stringify(requestBody)}`);\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      console.error(`${logPrefix} POST error: Failed to parse request body. Error: ${errorMessage}. Body received: ${eventBodyString ? eventBodyString.substring(0, 200) : 'N/A'}`);\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ message: `Invalid request body: ${errorMessage}` }),\n        headers: COMMON_HEADERS,\n      };\n    }\n\n    // 3. Input Validation\n    console.log(`${logPrefix} Validating payload for POST...`);\n    if (!requestBody.first_name || typeof requestBody.first_name !== 'string' || requestBody.first_name.trim() === '') {\n      console.error(`${logPrefix} Validation error: first_name is required.`);\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ message: \"Validation error: 'first_name' is required and must be a non-empty string.\" }),\n        headers: COMMON_HEADERS,\n      };\n    }\n    \n    // Last name can be empty but must be a string if provided\n    if (requestBody.last_name !== undefined && (typeof requestBody.last_name !== 'string')) {\n      console.error(`${logPrefix} Validation error: last_name must be a string.`);\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ message: \"Validation error: 'last_name' must be a string.\" }),\n        headers: COMMON_HEADERS,\n      };\n    }\n\n    // Validate email format if provided\n    if (requestBody.email && typeof requestBody.email === 'string' && requestBody.email.trim() !== '') {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(requestBody.email.trim())) {\n        console.error(`${logPrefix} Validation error: Invalid email format.`);\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ message: \"Validation error: 'email' has an invalid format.\" }),\n          headers: COMMON_HEADERS,\n        };\n      }\n    }\n\n    // Validate phone number format if provided\n    if (requestBody.phone && typeof requestBody.phone === 'string' && requestBody.phone.trim() !== '') {\n      // More permissive regex for phone numbers\n      const phoneRegex = /^[+]?([0-9\\s-().ext]{3,30})$/; \n      if (!phoneRegex.test(requestBody.phone.trim())) {\n        console.error(`${logPrefix} Validation error: Invalid phone number format.`);\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ message: \"Validation error: 'phone' has an invalid format. Please use numbers and common phone characters (e.g., (), -, . ext).\" }),\n          headers: COMMON_HEADERS,\n        };\n      }\n    }\n\n    // Validate website format if provided\n    if (requestBody.website && typeof requestBody.website === 'string' && requestBody.website.trim() !== '') {\n      try {\n        // Use URL constructor for validation (throws error if invalid)\n        new URL(requestBody.website.trim());\n      } catch {\n        console.error(`${logPrefix} Validation error: Invalid website URL format.`);\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ message: \"Validation error: 'website' has an invalid URL format. Please include http:// or https:// prefix.\" }),\n          headers: COMMON_HEADERS,\n        };\n      }\n    }\n\n    // Validate birthday format if provided\n    if (requestBody.birthday && typeof requestBody.birthday === 'string' && requestBody.birthday.trim() !== '') {\n      let birthdayValue = requestBody.birthday.trim();\n\n      // Normalize the birthday by removing extra spaces\n      birthdayValue = birthdayValue.replace(/\\s+/g, '');\n\n      // Backend expects ISO format (YYYY-MM-DD)\n      const isoPattern = /^\\d{4}-\\d{2}-\\d{2}$/;\n\n      // More flexible patterns for various input formats\n      const mdyPattern = /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})$/; // MM-DD-YYYY or M-D-YYYY\n      const dmyPattern = /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})$/; // DD-MM-YYYY or D-M-YYYY\n      const ymdPattern = /^(\\d{4})[-/](\\d{1,2})[-/](\\d{1,2})$/; // YYYY-MM-DD or YYYY-M-D\n\n      let validFormat = isoPattern.test(birthdayValue);\n\n      // Try MDY pattern (US format)\n      if (!validFormat && mdyPattern.test(birthdayValue)) {\n        const matches = birthdayValue.match(mdyPattern);\n        if (matches) {\n          const [, month, day, year] = matches;\n          const paddedMonth = month.padStart(2, '0');\n          const paddedDay = day.padStart(2, '0');\n          requestBody.birthday = `${year}-${paddedMonth}-${paddedDay}`;\n          validFormat = true;\n        }\n      }\n\n      // Try DMY pattern (European format)\n      if (!validFormat && dmyPattern.test(birthdayValue)) {\n        const matches = birthdayValue.match(dmyPattern);\n        if (matches) {\n          const [, day, month, year] = matches;\n          const paddedMonth = month.padStart(2, '0');\n          const paddedDay = day.padStart(2, '0');\n          requestBody.birthday = `${year}-${paddedMonth}-${paddedDay}`;\n          validFormat = true;\n        }\n      }\n\n      // Try YMD pattern (ISO-like format with possible missing padding)\n      if (!validFormat && ymdPattern.test(birthdayValue)) {\n        const matches = birthdayValue.match(ymdPattern);\n        if (matches) {\n          const [, year, month, day] = matches;\n          const paddedMonth = month.padStart(2, '0');\n          const paddedDay = day.padStart(2, '0');\n          requestBody.birthday = `${year}-${paddedMonth}-${paddedDay}`;\n          validFormat = true;\n        }\n      }\n\n      // Final validation check\n      if (!validFormat || isNaN(Date.parse(requestBody.birthday))) {\n        console.error(`${logPrefix} Validation error: Invalid birthday format.`);\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ message: \"Validation error: 'birthday' should be in a standard date format (YYYY-MM-DD, MM-DD-YYYY, or DD-MM-YYYY).\" }),\n          headers: COMMON_HEADERS,\n        };\n      }\n\n      console.log(`${logPrefix} Successfully parsed birthday input \"${birthdayValue}\" to ISO format: ${requestBody.birthday}`);\n    }\n\n    console.log(`${logPrefix} Payload validation for POST passed.`);\n\n    // 4. Check for Duplicate Contact\n    console.log(`${logPrefix} Checking for duplicate contact...`);\n    try {\n      let duplicateCheckQuery = supabaseAdmin\n        .from(TABLE_NAME)\n        .select('contact_id, first_name, last_name, email, phone, company, job_title') // Select a few fields for the response\n        .eq('user_id', userId);\n\n      // Define fields to check for exact match, including nulls\n      const fieldsToCompare: (keyof ContactCreatePayload)[] = [\n        'first_name',\n        'middle_name',\n        'last_name',\n        'nickname',\n        'email',\n        'phone',\n        'company',\n        'job_title',\n        'street_address', 'street_address_2', 'city', 'state_province', 'postal_code', 'country',\n        'website',\n        'birthday',\n        'notes'\n      ];\n\n      for (const field of fieldsToCompare) {\n        const value = requestBody[field];\n        if (value === null || value === undefined || (typeof value === 'string' && value.trim() === '')) {\n          // Treat undefined, null, or empty string in payload as needing to match NULL in DB\n          duplicateCheckQuery = duplicateCheckQuery.is(field, null);\n        } else if (typeof value === 'string') {\n          duplicateCheckQuery = duplicateCheckQuery.eq(field, value.trim());\n        } else {\n          // Since ContactCreatePayload defines all fields as string | null | undefined,\n          // this case should never occur. We'll throw an error for type safety.\n          throw new Error(`${logPrefix} Duplicate check: Field '${field}' has unexpected type: ${typeof value}`);\n        }\n      }\n\n      const { data: existingContacts, error: duplicateCheckError } = await duplicateCheckQuery;\n\n      if (duplicateCheckError) {\n        console.error(`${logPrefix} Supabase error during duplicate check:`, duplicateCheckError.message);\n        // Proceed with creation if duplicate check itself fails, or handle error differently\n        // For now, let's log and proceed, assuming it's safer to create than to block due to a check error.\n        // Consider returning 500 if this check is critical and must not fail.\n      } else if (existingContacts && existingContacts.length > 0) {\n        console.warn(`${logPrefix} Duplicate contact found for user ${userId}. Details:`, existingContacts);\n        return {\n          statusCode: 409, // Conflict\n          body: JSON.stringify({\n            message: \"A contact with these exact details already exists.\",\n            existingContact: existingContacts[0] // Return the first found duplicate\n          }),\n          headers: COMMON_HEADERS,\n        };\n      }\n      console.log(`${logPrefix} No duplicate contact found. Proceeding with creation.`);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      console.error(`${logPrefix} Error during duplicate contact check: ${errorMessage}`);\n      // Optional: Decide if this error should prevent contact creation or just be logged\n      // For now, proceeding with creation to avoid blocking valid requests due to check issues.\n      // return { statusCode: 500, body: JSON.stringify({ message: `Error checking for duplicate contact: ${errorMessage}` }), headers: COMMON_HEADERS };\n    }\n\n    // 5. Prepare data for Supabase (aligns with schema.sql and backend/types.ts)\n    const firstName = requestBody.first_name.trim();\n    const lastName = requestBody.last_name ? requestBody.last_name.trim() : '';\n\n    // Generate formatted address from components if possible\n    let formattedAddress: string | null = null;\n    if (requestBody.street_address) {\n      const addressParts: string[] = [];\n      \n      // Add street address\n      addressParts.push(requestBody.street_address.trim());\n      \n      // Add second line if present\n      if (requestBody.street_address_2) {\n        addressParts.push(requestBody.street_address_2.trim());\n      }\n      \n      // Format city, state/province, and postal code on one line\n      const cityStatePostal: string[] = [];\n      if (requestBody.city) cityStatePostal.push(requestBody.city.trim());\n      \n      // Add state/province and postal code if present (now optional - no longer required)\n      // Only include non-empty values\n      if ((requestBody.state_province && requestBody.state_province.trim() !== '') || \n          (requestBody.postal_code && requestBody.postal_code.trim() !== '')) {\n        const statePostal: string[] = [];\n        if (requestBody.state_province && requestBody.state_province.trim() !== '') \n          statePostal.push(requestBody.state_province.trim());\n        if (requestBody.postal_code && requestBody.postal_code.trim() !== '') \n          statePostal.push(requestBody.postal_code.trim());\n        \n        if (statePostal.length > 0) {\n          if (cityStatePostal.length > 0) {\n            cityStatePostal[0] += `, ${statePostal.join(' ')}`;\n          } else {\n            cityStatePostal.push(statePostal.join(' '));\n          }\n        }\n      }\n      \n      if (cityStatePostal.length > 0) {\n        addressParts.push(cityStatePostal.join(', '));\n      }\n      \n      // Add country if present\n      if (requestBody.country) {\n        addressParts.push(requestBody.country.trim());\n      }\n      \n      // Join all parts with newlines to create formatted address\n      formattedAddress = addressParts.join('\\n').trim();\n    }\n    \n    // Define the shape we need for the contact insert\nconst contactToInsert = {\n      user_id: userId,\n      // Personal information\n      first_name: firstName, // Use from request\n      middle_name: requestBody.middle_name?.trim() || null,\n      last_name: lastName,   // Use from request\n      nickname: requestBody.nickname?.trim() || null,\n      birthday: requestBody.birthday?.trim() || null,\n      \n      // Contact information\n      email: requestBody.email?.trim() || null,\n      phone: requestBody.phone?.trim() || null,\n      mobile_phone: requestBody.mobile_phone?.trim() || null,\n      work_phone: requestBody.work_phone?.trim() || null,\n      website: requestBody.website?.trim() || null,\n      \n      // Address fields\n      street_address: requestBody.street_address?.trim() || null,\n      street_address_2: requestBody.street_address_2?.trim() || null,\n      city: requestBody.city?.trim() || null,\n      state_province: requestBody.state_province?.trim() || null,\n      postal_code: requestBody.postal_code?.trim() || null,\n      country: requestBody.country?.trim() || null,\n      formatted_address: formattedAddress,\n      \n      // Professional information\n      company: requestBody.company?.trim() || null,\n      job_title: requestBody.job_title?.trim() || null,\n      department: requestBody.department?.trim() || null,\n      \n      // Social media fields\n      social_linkedin: requestBody.social_linkedin?.trim() || null,\n      social_twitter: requestBody.social_twitter?.trim() || null,\n      \n      // Tags and preferences \n      tags: requestBody.tags || null,\n      preferred_contact_method: requestBody.preferred_contact_method?.trim() || null,\n      timezone: requestBody.timezone?.trim() || null,\n      language: requestBody.language?.trim() || null,\n      \n      // Additional information\n      notes: requestBody.notes?.trim() || null,\n    };\n\n    console.log(`${logPrefix} Prepared contact data for Supabase insert: ${JSON.stringify(contactToInsert)}`);\n\n    // 5. Supabase Interaction\n    try {\n      console.log(`${logPrefix} Attempting to insert contact into Supabase...`);\n      const { data, error: insertError } = await supabaseAdmin\n        .from(TABLE_NAME)\n        .insert(contactToInsert)\n        .select() // Return the inserted row(s)\n        .single(); // Expecting a single row to be inserted and returned\n\n      if (insertError) {\n        console.error(`${logPrefix} Supabase insert error: ${insertError.message}. Details: ${JSON.stringify(insertError)}`);\n        if ((insertError as PostgrestError).code === '23505') { // Unique violation\n           return {\n            statusCode: 409, // Conflict\n            body: JSON.stringify({ message: `Failed to create contact: ${insertError.message}. A similar contact might already exist.` }),\n            headers: COMMON_HEADERS,\n          };\n        }\n        return {\n          statusCode: 500,\n          body: JSON.stringify({ message: `Failed to create contact: ${insertError.message}` }),\n          headers: COMMON_HEADERS,\n        };\n      }\n\n      if (!data) {\n          console.error(`${logPrefix} Supabase insert error: No data returned after insert.`);\n          return {\n              statusCode: 500,\n              body: JSON.stringify({ message: \"Failed to create contact: No data returned from database.\" }),\n              headers: COMMON_HEADERS,\n          };\n      }\n\n      const createdContact = data as Contact;\n      console.log(`${logPrefix} Successfully created contact. Response data: ${JSON.stringify(createdContact)}`);\n      return {\n        statusCode: 201,\n        body: JSON.stringify(createdContact),\n        headers: COMMON_HEADERS,\n      };\n    } catch (dbError) {\n      const errorMessage = dbError instanceof Error ? dbError.message : String(dbError);\n      console.error(`${logPrefix} Unexpected error during Supabase insert operation: ${errorMessage}`);\n      return {\n        statusCode: 500,\n        body: JSON.stringify({ message: `An unexpected error occurred: ${errorMessage}` }),\n        headers: COMMON_HEADERS,\n      };\n    }\n  } // --- End of POST handling ---\n\n  // --- GET: Fetch all contacts for the user ---\n  else if (httpMethod === 'GET') {\n    // 1. Authentication & Authorization\n    const userId = getAuthenticatedUserId(event, context);\n    if (!userId) {\n      console.error(`${logPrefix} GET error: User not authenticated.`);\n      return {\n        statusCode: 401,\n        body: JSON.stringify({ message: \"Authentication required to fetch contacts.\" }),\n        headers: COMMON_HEADERS,\n      };\n    }\n    console.log(`${logPrefix} Authenticated user ID for GET: ${userId}`);\n\n    const pathParts = event.path.split('/').filter(part => part !== '');\n    // Check if the last significant part of the path is a potential contact_id\n    // e.g. /contacts/some-uuid -> pathId = some-uuid\n    // e.g. /contacts -> pathId = contacts (not a UUID)\n    // e.g. /contacts/ -> pathId = contacts (not a UUID)\n    const potentialPathId = pathParts.length > 1 && pathParts[pathParts.length-2].toLowerCase() === 'contacts' \n                            ? pathParts[pathParts.length - 1] \n                            : null;\n                            \n    const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\n    const contactIdFromPath = potentialPathId && uuidRegex.test(potentialPathId) ? potentialPathId : null;\n\n    const { search_term: searchTerm, contact_id: contactIdFromQuery, page: pageStr, limit: limitStr } = queryStringParameters || {};\n    const contactIdToFetch = contactIdFromPath || contactIdFromQuery; // Prioritize ID from path\n\n    const page = parseInt(pageStr || '1', 10);\n    const limit = parseInt(limitStr || '20', 10);\n    const offset = (page - 1) * limit;\n\n    // If a specific contact_id is provided (either from path or query), fetch that contact only\n    if (contactIdToFetch && typeof contactIdToFetch === 'string') {\n      console.log(`${logPrefix} Fetching specific contact by ID: ${contactIdToFetch}`);\n      const { data: specificContact, error: specificError } = await supabaseAdmin\n        .from(TABLE_NAME)\n        .select('*')\n        .eq('user_id', userId)\n        .eq('contact_id', contactIdToFetch)\n        .maybeSingle(); // Use maybeSingle() as contact_id should be unique\n\n      if (specificError) {\n        console.error(`${logPrefix} Supabase error fetching specific contact:`, specificError.message);\n        return {\n          statusCode: 500,\n          body: JSON.stringify({ // Return a simple error object, not ContactsApiResponse\n            message: `Error fetching contact: ${specificError.message}`,\n          }),\n          headers: COMMON_HEADERS,\n        };\n      }\n\n      if (!specificContact) {\n        console.log(`${logPrefix} No contact found with ID ${contactIdToFetch} for user ${userId}`);\n        return {\n          statusCode: 404,\n          body: JSON.stringify({ // Return a simple error object\n            message: `Contact with ID ${contactIdToFetch} not found.`,\n          }),\n          headers: COMMON_HEADERS,\n        };\n      }\n      // Apply the Google filter even for single contact fetches, just in case\n              const filteredContacts = applyContactQualityFilters([specificContact], logPrefix);\n      const finalContact = filteredContacts.length > 0 ? filteredContacts[0] : null;\n\n      if (!finalContact) {\n         console.log(`${logPrefix} Contact ID ${contactIdToFetch} was filtered out (e.g. erroneous Google contact).`);\n         return {\n          statusCode: 404,\n          body: JSON.stringify({\n            message: `Contact with ID ${contactIdToFetch} not found or was filtered.`,\n          }),\n          headers: COMMON_HEADERS,\n        };\n      }\n      \n      // For a single contact fetch, return the contact object directly\n      return {\n        statusCode: 200,\n        body: JSON.stringify(finalContact), // Return the single contact object\n        headers: COMMON_HEADERS,\n      };\n    }\n\n    // If a searchTerm is provided, perform a search\n    if (searchTerm && typeof searchTerm === 'string' && searchTerm.trim() !== '') {\n      const searchValue = searchTerm.trim();\n      console.log(`${logPrefix} Searching for contacts matching: \"${searchValue}\" using Full-Text Search.`);\n\n      try {\n        // Use textSearch on the 'fts_document' column\n        const ftsCountQuery = supabaseAdmin\n          .from(TABLE_NAME)\n          .select('count', { count: 'exact' })\n          .eq('user_id', userId)\n          .textSearch('fts_document', searchValue, {\n            type: 'websearch',\n            config: 'english',\n          });\n\n        const ftsDataQuery = supabaseAdmin\n          .from(TABLE_NAME)\n          .select('*')\n          .eq('user_id', userId)\n          .textSearch('fts_document', searchValue, {\n            type: 'websearch',\n            config: 'english',\n          })\n          .range(offset, offset + limit -1);\n        \n        const [ftsCountResult, ftsDataResult] = await Promise.all([ftsCountQuery, ftsDataQuery]);\n\n        const ftsData = ftsDataResult.data as Contact[] | null;\n        const ftsCount = ftsCountResult.count;\n\n        let ftsError: PostgrestError | null = null;\n        if (ftsDataResult.error) {\n          ftsError = ftsDataResult.error;\n        }\n        if (ftsCountResult.error) {\n          if (ftsError) {\n            ftsError.message = `FTS Data error: ${ftsError.message || 'Unknown'}. FTS Count error: ${ftsCountResult.error.message || 'Unknown'}.`;\n          } else {\n            ftsError = ftsCountResult.error;\n          }\n        }\n\n        let ftsResults: Contact[] = ftsData || [];\n        // Filter out erroneous Google contacts from FTS results\n                  ftsResults = applyContactQualityFilters(ftsResults, logPrefix);\n\n        if (ftsError) {\n          console.error(`${logPrefix} Supabase error during Full-Text Search:`, ftsError.message);\n          // Don't return immediately, proceed to fuzzy search if FTS fails\n        } else {\n          console.log(`${logPrefix} Full-Text Search found ${ftsResults.length} contacts (after filtering) for term: \"${searchValue}\"`);\n        }\n\n        const combinedResults: Contact[] = ftsResults;\n        let finalCount = ftsCount ?? 0; // Initial count from FTS\n\n        const FUZZY_SEARCH_THRESHOLD = 3; // If FTS results are less than this, augment with fuzzy.\n        const MIN_SEARCH_TERM_LENGTH_FOR_FUZZY = 3; // Only do fuzzy if search term is reasonably long\n\n        if (combinedResults.length < FUZZY_SEARCH_THRESHOLD && searchValue.length >= MIN_SEARCH_TERM_LENGTH_FOR_FUZZY) {\n          console.log(`${logPrefix} FTS results were sparse (${combinedResults.length}) or failed. Augmenting with trigram-powered ILIKE search.`);\n          const ilikeSearchTerm = `%${searchValue.replace(/ /g, '%')}%`;\n\n          // Define the expected shape of a Supabase response object for these queries\n          type SupabaseFuzzyResult = {\n            data: Contact[] | null;\n            error: PostgrestError | null;\n            count: number | null;\n            status: number; // Supabase responses include status and statusText\n            statusText: string;\n          };\n\n          const createFuzzyQueryPromise = async (field: string): Promise<SupabaseFuzzyResult> => {\n            try {\n              const dataQuery = supabaseAdmin\n                .from(TABLE_NAME)\n                .select('*')\n                .eq('user_id', userId)\n                .ilike(field, ilikeSearchTerm)\n                .range(offset, offset + limit - 1);\n          \n              const countQuery = supabaseAdmin\n                .from(TABLE_NAME)\n                .select('count', { count: 'exact' })\n                .eq('user_id', userId)\n                .ilike(field, ilikeSearchTerm);\n          \n              const [dataResult, countResult] = await Promise.all([dataQuery, countQuery]);\n          \n              let consolidatedError: PostgrestError | null = null;\n              if (dataResult.error) {\n                consolidatedError = dataResult.error;\n              }\n              if (countResult.error) {\n                if (consolidatedError) {\n                  consolidatedError.message = `Fuzzy Data error (${field}): ${consolidatedError.message || 'Unknown'}. Fuzzy Count error (${field}): ${countResult.error.message || 'Unknown'}.`;\n                } else {\n                  consolidatedError = countResult.error;\n                }\n              }\n          \n              let status = dataResult.status;\n              let statusText = dataResult.statusText;\n          \n              if (consolidatedError) {\n                // If there's an error, status might not be accurately reflecting the overall operation.\n                // Prioritize error status or use a generic 500.\n                if (dataResult.error && countResult.error) {\n                  status = dataResult.status !== 200 ? dataResult.status : (countResult.status !== 200 ? countResult.status : 500);\n                  statusText = \"Multiple errors in fuzzy search\";\n                } else if (dataResult.error) {\n                  status = dataResult.status;\n                  statusText = dataResult.statusText;\n                } else { // countResult.error must be true\n                  status = countResult.status;\n                  statusText = countResult.statusText;\n                }\n              }\n          \n              return {\n                data: dataResult.data as Contact[] | null,\n                error: consolidatedError,\n                count: countResult.count,\n                status: status,\n                statusText: statusText,\n              };\n            } catch (error) {\n              console.error(`${logPrefix} Critical error in createFuzzyQueryPromise for field ${field}:`, error);\n              return {\n                data: null,\n                error: { name: 'FuzzyPromiseError', message: `Unexpected error processing field ${field}: ${(error as Error).message}`, details: '', hint: '', code: 'FUZZY_PROMISE_ERR' },\n                count: 0,\n                status: 500,\n                statusText: 'Internal Server Error during fuzzy query construction',\n              };\n            }\n          };\n          \n          const fieldsToSearchFuzzy = ['first_name', 'last_name', 'company', 'email', 'job_title', 'notes'];\n          const fuzzyQueryBuilders: Promise<SupabaseFuzzyResult>[] = fieldsToSearchFuzzy.map(field => createFuzzyQueryPromise(field));\n\n          const settledFuzzyResults = await Promise.allSettled(fuzzyQueryBuilders);\n          const fuzzyMatches: Contact[] = [];\n          let maxFuzzyCount = 0;\n\n          settledFuzzyResults.forEach((result, index) => {\n            const field = ['first_name', 'last_name', 'company', 'email', 'job_title', 'notes'][index];\n            if (result.status === 'fulfilled') {\n              // Now result.value is SupabaseFuzzyResult\n              const supabaseResult = result.value;\n              if (supabaseResult.error) {\n                console.warn(`${logPrefix} Supabase error during fuzzy ILIKE search on ${field}:`, supabaseResult.error.message);\n              } else if (supabaseResult.data) {\n                const fieldMatches = applyContactQualityFilters(supabaseResult.data, `${logPrefix}[fuzzy-${field}]`);\n                fuzzyMatches.push(...fieldMatches);\n                if (supabaseResult.count && supabaseResult.count > maxFuzzyCount) {\n                  maxFuzzyCount = supabaseResult.count;\n                }\n                console.log(`${logPrefix} Fuzzy ILIKE search on ${field} found ${fieldMatches.length} contacts (after filtering).`);\n              }\n            } else {\n              console.error(`${logPrefix} Promise rejected for fuzzy ILIKE search on ${field}:`, result.reason);\n            }\n          });\n\n          // Deduplicate results (ftsResults might already contain some fuzzy matches)\n          const allResultIds = new Set(combinedResults.map(c => c.contact_id));\n          const uniqueFuzzyMatches = fuzzyMatches.filter(c => !allResultIds.has(c.contact_id));\n          combinedResults.push(...uniqueFuzzyMatches);\n          \n          // Update finalCount if fuzzy search yielded more results overall\n          // This logic might need refinement if FTS and fuzzy counts are very different\n          if (maxFuzzyCount > (ftsCount || 0)) {\n            finalCount = combinedResults.length; // Or a sum of distinct counts, this is an approximation\n          }\n           // If FTS returned 0 results, and fuzzy search found some, use fuzzy count.\n           if ((ftsCount === null || ftsCount === 0) && fuzzyMatches.length > 0) {\n            finalCount = combinedResults.length; // Approximate based on combined unique results.\n          }\n        }\n        \n        // Final deduplication of combinedResults just in case\n        const finalUniqueContacts = Array.from(new Map(combinedResults.map(contact => [contact.contact_id, contact])).values());\n        // And ensure the Google filter is applied one last time on the final combined list\n        const trulyFinalContacts = applyContactQualityFilters(finalUniqueContacts, `${logPrefix}[final-filter]`);\n\n\n        const totalPages = Math.ceil(finalCount / limit);\n\n        console.log(`${logPrefix} Returning ${trulyFinalContacts.length} contacts for search term \"${searchValue}\". Total potential matches (approx): ${finalCount}. Page: ${page}, Limit: ${limit}`);\n        return {\n          statusCode: 200,\n          body: JSON.stringify({\n            success: true,\n            contacts: trulyFinalContacts,\n            pagination: { total: finalCount, page, limit, totalPages },\n          }),\n          headers: COMMON_HEADERS,\n        };\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        console.error(`${logPrefix} Error during contact search:`, errorMessage);\n        return {\n          statusCode: 500,\n          body: JSON.stringify({\n            success: false,\n            message: `Error searching contacts: ${errorMessage}`,\n            contacts: [],\n          }),\n          headers: COMMON_HEADERS,\n        };\n      }\n    } else {\n      // Default: Fetch all contacts for the user with pagination if no searchTerm or contact_id\n      console.log(`${logPrefix} Fetching all contacts for user ${userId} with pagination. Page: ${page}, Limit: ${limit}`);\n      try {\n        const countQuery = supabaseAdmin\n          .from(TABLE_NAME)\n          .select('count', { count: 'exact' })\n          .eq('user_id', userId);\n\n        const dataQuery = supabaseAdmin\n          .from(TABLE_NAME)\n          .select('*')\n          .eq('user_id', userId)\n          .order('created_at', { ascending: false })\n          .range(offset, offset + limit - 1);\n\n        const [countResult, dataResult] = await Promise.all([countQuery, dataQuery]);\n        \n        const totalCount = countResult.count;\n        const allContactsData = dataResult.data as Contact[] | null;\n        \n        let combinedError: PostgrestError | null = null;\n        if (dataResult.error) {\n          combinedError = dataResult.error;\n        }\n        if (countResult.error) {\n          if (combinedError) {\n            combinedError.message = `Data error: ${combinedError.message || 'Unknown'}. Count error: ${countResult.error.message || 'Unknown'}.`;\n          } else {\n            combinedError = countResult.error;\n          }\n        }\n\n        if (combinedError) {\n          console.error(`${logPrefix} Supabase error fetching all contacts:`, combinedError.message);\n          return {\n            statusCode: 500,\n            body: JSON.stringify({ // Return the list-style response here\n              success: false,\n              message: `Error fetching contacts: ${combinedError.message}`,\n              contacts: [],\n              pagination: { total: 0, page, limit, totalPages: 0 }\n            }),\n            headers: COMMON_HEADERS,\n          };\n        }\n        let allContacts = allContactsData || [];\n        // Filter out erroneous Google contacts from all contacts list\n        allContacts = applyContactQualityFilters(allContacts, logPrefix);\n        \n        const totalPages = Math.ceil((totalCount ?? 0) / limit);\n\n        return {\n          statusCode: 200,\n          body: JSON.stringify({ // Return the list-style response here\n            success: true,\n            contacts: allContacts,\n            pagination: { total: totalCount ?? 0, page, limit, totalPages },\n          }),\n          headers: COMMON_HEADERS,\n        };\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        console.error(`${logPrefix} Unexpected error fetching all contacts: ${errorMessage}`);\n        return {\n          statusCode: 500,\n          body: JSON.stringify({ // Return the list-style response here\n            success: false,\n            message: `An unexpected error occurred while fetching contacts: ${errorMessage}`,\n            contacts: [],\n            pagination: { total: 0, page, limit, totalPages: 0 }\n          }),\n          headers: COMMON_HEADERS,\n        };\n      }\n    }\n  } // --- End of GET handling ---\n\n  // --- PUT: Update a specific contact ---\n  else if (httpMethod === 'PUT') {\n    // 1. Authentication & Authorization\n    const userId = getAuthenticatedUserId(event, context);\n    if (!userId) {\n      console.error(`${logPrefix} PUT error: User not authenticated.`);\n      return {\n        statusCode: 401,\n        body: JSON.stringify({ message: \"Authentication required to update contact.\" }),\n        headers: COMMON_HEADERS,\n      };\n    }\n    console.log(`${logPrefix} PUT request for user ${userId}`);\n\n    try {\n      // 2. Extract contact_id from path\n      const pathParts = event.path.split('/').filter(part => part !== '');\n      const contactId = pathParts[pathParts.length - 1]; // Assuming last part is the ID\n\n      if (!contactId || contactId === 'contacts') { // 'contacts' would be the base path if no ID\n        console.error(`${logPrefix} PUT error: contact_id missing in path.`);\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ message: \"contact_id is required in the path for PUT requests (e.g., /contacts/{contact_id}).\" }),\n          headers: COMMON_HEADERS,\n        };\n      }\n      console.log(`${logPrefix} Attempting to update contact_id: ${contactId}`);\n\n      // 3. Parse and validate request body\n      if (!eventBodyString) {\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ message: \"Request body is required for PUT.\" }),\n          headers: COMMON_HEADERS,\n        };\n      }\n      let requestBody: ContactUpdatePayload; // Changed from Partial<ContactCreatePayload>\n      try {\n        requestBody = JSON.parse(eventBodyString);\n      } catch (parseError) {\n        console.error(`${logPrefix} JSON parsing error for PUT:`, parseError);\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ message: \"Invalid JSON format in request body.\" }),\n          headers: COMMON_HEADERS,\n        };\n      }\n\n      // Helper function to preserve empty strings in fields\n      const preserveEmptyString = (value: string | null | undefined): string | null => {\n        if (value === null) {\n          return null;\n        } else if (typeof value === 'string') {\n          // Keep empty strings as empty strings, not null\n          return value;\n        }\n        // For undefined or other types, return null or handle as per field requirements\n        // For address components, undefined should typically become null in the DB\n        return null; \n      };\n\n      // 4. Construct update object with validations\n      const updateData: Partial<Omit<Contact, 'contact_id' | 'user_id' | 'created_at' /* updated_at is handled by db */>> = {};\n\n      // Handle first_name and last_name updates independently\n      if (requestBody.first_name !== undefined) {\n        if (typeof requestBody.first_name === 'string' && requestBody.first_name.trim() !== '') {\n          updateData.first_name = requestBody.first_name.trim();\n        } else if (requestBody.first_name === null || (typeof requestBody.first_name === 'string' && requestBody.first_name.trim() === '')){\n          // first_name is required in the DB, so validate it's not empty\n          return { \n            statusCode: 400, \n            body: JSON.stringify({ message: \"Validation error: 'first_name', if provided for update, must be a non-empty string.\" }), \n            headers: COMMON_HEADERS \n          };\n        }\n      }\n      \n      if (requestBody.last_name !== undefined) {\n        if (typeof requestBody.last_name === 'string') {\n          updateData.last_name = requestBody.last_name.trim(); // Allows empty string\n        } else if (requestBody.last_name === null) {\n          updateData.last_name = ''; // Treat null as empty string\n        }\n      }\n\n      if (requestBody.email !== undefined) {\n        if (requestBody.email === null) {\n          updateData.email = null;\n        } else if (requestBody.email.trim() === '') {\n          updateData.email = '';\n        } else {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          if (!emailRegex.test(requestBody.email.trim())) {\n            return { statusCode: 400, body: JSON.stringify({ message: \"Validation error: 'email' has an invalid format.\" }), headers: COMMON_HEADERS };\n          }\n          updateData.email = requestBody.email.trim();\n        }\n      }\n      if (requestBody.phone !== undefined) {\n        if (requestBody.phone === null) {\n          updateData.phone = null;\n        } else if (requestBody.phone.trim() === '') {\n          updateData.phone = '';\n        } else {\n          // More permissive regex for phone numbers\n          const phoneRegex = /^[+]?([0-9\\s-().ext]{3,30})$/; \n          if (!phoneRegex.test(requestBody.phone.trim())) {\n            return { statusCode: 400, body: JSON.stringify({ message: \"Validation error: 'phone' has an invalid format. Please use numbers and common phone characters (e.g., (), -, . ext).\" }), headers: COMMON_HEADERS };\n          }\n          updateData.phone = requestBody.phone.trim();\n        }\n      }\n       if (requestBody.mobile_phone !== undefined) {\n        if (requestBody.mobile_phone === null) {\n          updateData.mobile_phone = null;\n        } else if (requestBody.mobile_phone.trim() === '') {\n          updateData.mobile_phone = '';\n        } else {\n          const phoneRegex = /^[+]?([0-9\\s-().ext]{3,30})$/;\n          if (!phoneRegex.test(requestBody.mobile_phone.trim())) {\n            return { statusCode: 400, body: JSON.stringify({ message: \"Validation error: 'mobile_phone' has an invalid format. Please use numbers and common phone characters.\" }), headers: COMMON_HEADERS };\n          }\n          updateData.mobile_phone = requestBody.mobile_phone.trim();\n        }\n      }\n      if (requestBody.work_phone !== undefined) {\n        if (requestBody.work_phone === null) {\n          updateData.work_phone = null;\n        } else if (requestBody.work_phone.trim() === '') {\n          updateData.work_phone = '';\n        } else {\n          const phoneRegex = /^[+]?([0-9\\s-().ext]{3,30})$/;\n          if (!phoneRegex.test(requestBody.work_phone.trim())) {\n            return { statusCode: 400, body: JSON.stringify({ message: \"Validation error: 'work_phone' has an invalid format. Please use numbers and common phone characters.\" }), headers: COMMON_HEADERS };\n          }\n          updateData.work_phone = requestBody.work_phone.trim();\n        }\n      }\n      if (requestBody.company !== undefined) {\n        updateData.company = preserveEmptyString(requestBody.company);\n      }\n      if (requestBody.job_title !== undefined) {\n        updateData.job_title = preserveEmptyString(requestBody.job_title);\n      }\n      if (requestBody.department !== undefined) {\n        updateData.department = preserveEmptyString(requestBody.department);\n      }\n      if (requestBody.middle_name !== undefined) {\n        updateData.middle_name = preserveEmptyString(requestBody.middle_name);\n      }\n      if (requestBody.nickname !== undefined) {\n        updateData.nickname = preserveEmptyString(requestBody.nickname);\n      }\n\n      // --- Process Address Fields ---\n      if (requestBody.street_address !== undefined) {\n        updateData.street_address = preserveEmptyString(requestBody.street_address);\n      }\n      if (requestBody.street_address_2 !== undefined) {\n        updateData.street_address_2 = preserveEmptyString(requestBody.street_address_2);\n      }\n      if (requestBody.city !== undefined) {\n        updateData.city = preserveEmptyString(requestBody.city);\n      }\n      if (requestBody.state_province !== undefined) {\n        updateData.state_province = preserveEmptyString(requestBody.state_province);\n        // We explicitly allow empty or null values for state_province\n      }\n      if (requestBody.postal_code !== undefined) {\n        updateData.postal_code = preserveEmptyString(requestBody.postal_code);\n        // We explicitly allow empty or null values for postal_code\n      }\n      if (requestBody.country !== undefined) {\n        updateData.country = preserveEmptyString(requestBody.country);\n      }\n\n      // Regenerate formatted_address on the backend for consistency\n      // Use the values from updateData which now contain the incoming changes\n      let newFormattedAddress: string | null = null;\n      if (updateData.street_address || updateData.city || updateData.country) {\n        // Only regenerate formatted address if core address fields are present\n        // State/province and postal_code are no longer required\n        const addressParts: string[] = [];\n        if (updateData.street_address) addressParts.push(updateData.street_address.trim());\n        if (updateData.street_address_2) addressParts.push(updateData.street_address_2.trim());\n        \n        const cityStatePostal: string[] = [];\n        if (updateData.city) cityStatePostal.push(updateData.city.trim());\n        \n        // Include state and postal code only if they're provided, but they're now optional\n        const statePostalInner: string[] = [];\n        if (updateData.state_province && updateData.state_province.trim() !== '') \n          statePostalInner.push(updateData.state_province.trim());\n        if (updateData.postal_code && updateData.postal_code.trim() !== '') \n          statePostalInner.push(updateData.postal_code.trim());\n        \n        if (statePostalInner.length > 0) {\n          if (cityStatePostal.length > 0) {\n            cityStatePostal[0] += (cityStatePostal[0].length > 0 ? ', ' : '') + statePostalInner.join(' ');\n          } else {\n            cityStatePostal.push(statePostalInner.join(' '));\n          }\n        }\n        if (cityStatePostal.length > 0) addressParts.push(cityStatePostal.join('')); // No extra comma if city was empty\n\n        if (updateData.country) addressParts.push(updateData.country.trim());\n        newFormattedAddress = addressParts.join('\\n').trim();\n      }\n      // Only update formatted_address if it has been changed or components changed\n      // Or if it was explicitly provided by client (though backend regen is preferred)\n      if (newFormattedAddress !== null || requestBody.formatted_address !== undefined) {\n          updateData.formatted_address = newFormattedAddress; // Prioritize backend generated\n      }\n\n\n      if (requestBody.website !== undefined) {\n        if (requestBody.website === null) {\n          updateData.website = null;\n        } else if (requestBody.website.trim() === '') {\n          updateData.website = '';\n        } else {\n          try {\n            new URL(requestBody.website.trim()); // Validate URL\n            updateData.website = requestBody.website.trim();\n          } catch {\n            return {\n              statusCode: 400,\n              body: JSON.stringify({ message: \"Validation error: 'website' has an invalid URL format. Please include http:// or https:// prefix.\" }),\n              headers: COMMON_HEADERS\n            };\n          }\n        }\n      }\n\n      if (requestBody.birthday !== undefined) {\n        if (requestBody.birthday === null) {\n          updateData.birthday = null;\n        } else if (requestBody.birthday.trim() === '') {\n          // If an empty string is provided for birthday, treat it as null for the database\n          updateData.birthday = null;\n        } else {\n          // Validate date format - backend expects ISO format (YYYY-MM-DD)\n          let birthdayValue = requestBody.birthday.trim();\n          \n          // Normalize the birthday by removing extra spaces\n          birthdayValue = birthdayValue.replace(/\\s+/g, '');\n          \n          // Backend expects ISO format (YYYY-MM-DD)\n          const isoPattern = /^\\d{4}-\\d{2}-\\d{2}$/;\n          \n          // More flexible patterns for various input formats\n          const mdyPattern = /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})$/; // MM-DD-YYYY or M-D-YYYY\n          const dmyPattern = /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})$/; // DD-MM-YYYY or D-M-YYYY\n          const ymdPattern = /^(\\d{4})[-/](\\d{1,2})[-/](\\d{1,2})$/; // YYYY-MM-DD or YYYY-M-D\n          \n          let validFormat = isoPattern.test(birthdayValue);\n          let isoFormattedDate = birthdayValue;\n          \n          // Try MDY pattern (US format)\n          if (!validFormat && mdyPattern.test(birthdayValue)) {\n            const matches = birthdayValue.match(mdyPattern);\n            if (matches) {\n              const [, month, day, year] = matches;\n              const paddedMonth = month.padStart(2, '0');\n              const paddedDay = day.padStart(2, '0');\n              isoFormattedDate = `${year}-${paddedMonth}-${paddedDay}`;\n              validFormat = true;\n            }\n          }\n          \n          // Try DMY pattern (European format)\n          if (!validFormat && dmyPattern.test(birthdayValue)) {\n            const matches = birthdayValue.match(dmyPattern);\n            if (matches) {\n              const [, day, month, year] = matches;\n              const paddedMonth = month.padStart(2, '0');\n              const paddedDay = day.padStart(2, '0');\n              isoFormattedDate = `${year}-${paddedMonth}-${paddedDay}`;\n              validFormat = true;\n            }\n          }\n          \n          // Try YMD pattern (ISO-like format with possible missing padding)\n          if (!validFormat && ymdPattern.test(birthdayValue)) {\n            const matches = birthdayValue.match(ymdPattern);\n            if (matches) {\n              const [, year, month, day] = matches;\n              const paddedMonth = month.padStart(2, '0');\n              const paddedDay = day.padStart(2, '0');\n              isoFormattedDate = `${year}-${paddedMonth}-${paddedDay}`;\n              validFormat = true;\n            }\n          }\n          \n          // Final validation check\n          if (!validFormat || isNaN(Date.parse(isoFormattedDate))) {\n            return {\n              statusCode: 400,\n              body: JSON.stringify({ message: \"Validation error: 'birthday' should be in a standard date format (YYYY-MM-DD, MM-DD-YYYY, or DD-MM-YYYY).\" }),\n              headers: COMMON_HEADERS\n            };\n          }\n          \n          updateData.birthday = isoFormattedDate;\n          console.log(`${logPrefix} Successfully parsed birthday input \"${birthdayValue}\" to ISO format: ${isoFormattedDate}`);\n        }\n      }\n\n      if (requestBody.notes !== undefined) {\n        updateData.notes = preserveEmptyString(requestBody.notes);\n        console.log(`${logPrefix} Notes update - Value: ${typeof requestBody.notes === 'string' ? `\"${requestBody.notes}\"` : requestBody.notes}, After processing: ${typeof updateData.notes === 'string' ? `\"${updateData.notes}\"` : updateData.notes}`);\n      }\n\n      if (Object.keys(updateData).length === 0) {\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ message: \"No valid fields provided for update.\" }),\n          headers: COMMON_HEADERS,\n        };\n      }\n\n      // 5. Perform update in Supabase\n      console.log(`${logPrefix} Updating contact ${contactId} for user ${userId} with data:`, updateData);\n      const { data, error: updateError } = await supabaseAdmin\n        .from(TABLE_NAME)\n        .update(updateData)\n        .eq('contact_id', contactId)\n        .eq('user_id', userId) // Ensure user owns the contact\n        .select()\n        .single(); // Expect a single row to be updated and returned\n\n      if (updateError) {\n        console.error(`${logPrefix} Supabase update error:`, updateError.message);\n        // Check if error is due to contact not found (or not owned)\n        if ((updateError as PostgrestError).code === 'PGRST116') { // PostgREST code for \"No matching query does not exist\"\n          return {\n            statusCode: 404,\n            body: JSON.stringify({ message: `Contact with id ${contactId} not found or you do not have permission to update it.` }),\n            headers: COMMON_HEADERS,\n          };\n        }\n        return {\n          statusCode: 500,\n          body: JSON.stringify({ message: `Failed to update contact: ${updateError.message}` }),\n          headers: COMMON_HEADERS,\n        };\n      }\n\n      if (!data) { // Should ideally be covered by PGRST116 or other errors, but as a safeguard\n          console.error(`${logPrefix} Supabase update error: No data returned after update, or contact not found for user.`);\n          return {\n              statusCode: 404, // Or 500 if it's unexpected\n              body: JSON.stringify({ message: `Failed to update contact ${contactId}. It might not exist or you may not have permission.` }),\n              headers: COMMON_HEADERS,\n          };\n      }\n\n      const updatedContact = data as Contact;\n      console.log(`${logPrefix} Successfully updated contact: ${updatedContact.contact_id}`);\n      return {\n        statusCode: 200,\n        body: JSON.stringify(updatedContact),\n        headers: COMMON_HEADERS,\n      };\n\n    } catch (error) {\n      console.error(`${logPrefix} Unexpected error in PUT handler:`, error);\n      return {\n        statusCode: 500,\n        body: JSON.stringify({ message: \"An unexpected error occurred while updating the contact.\" }),\n        headers: COMMON_HEADERS,\n      };\n    }\n  } // --- End of PUT handling ---\n\n  // --- PATCH: Partially update a specific contact ---\n  else if (httpMethod === 'PATCH') {\n    console.log(`${logPrefix} PATCH request received.`);\n    const userId = getAuthenticatedUserId(event, context);\n    if (!userId) {\n      console.error(`${logPrefix} PATCH error: User not authenticated.`);\n      return { statusCode: 401, body: JSON.stringify({ message: \"Authentication required to update contact.\" }), headers: COMMON_HEADERS };\n    }\n    console.log(`${logPrefix} PATCH request for user ${userId}`);\n\n    let requestBody: { identifier?: string; contact_id?: string; updates: ContactUpdatePayload };\n    try {\n      if (!eventBodyString) throw new Error(\"Request body is missing for PATCH.\");\n      requestBody = JSON.parse(eventBodyString);\n      if (!requestBody.updates || Object.keys(requestBody.updates).length === 0) {\n        throw new Error(\"Missing 'updates' object or 'updates' object is empty in request body.\");\n      }\n      if (!requestBody.identifier && !requestBody.contact_id) {\n        throw new Error(\"Either 'identifier' or 'contact_id' must be provided in the request body.\");\n      }\n      console.log(`${logPrefix} Parsed PATCH request body:`, JSON.stringify(requestBody, null, 2));\n    } catch (error: unknown) {\n      const msg = error instanceof Error ? error.message : \"Invalid request body for PATCH.\";\n      console.error(`${logPrefix} PATCH error - Invalid request body:`, msg);\n      return { statusCode: 400, body: JSON.stringify({ message: msg }), headers: COMMON_HEADERS };\n    }\n\n    try {\n      let contactToUpdate: Pick<Contact, 'contact_id'> | null = null;\n\n      // 1. Prioritize contact_id if provided\n      if (requestBody.contact_id) {\n        console.log(`${logPrefix} Attempting to find contact by contact_id: ${requestBody.contact_id}`);\n        const { data: contactById, error: idError } = await supabaseAdmin\n          .from(TABLE_NAME)\n          .select('contact_id')\n          .eq('contact_id', requestBody.contact_id)\n          .eq('user_id', userId)\n          .single();\n        if (idError && idError.code !== 'PGRST116') { // PGRST116: Row to update not found\n          throw idError;\n        }\n        if (contactById) {\n          contactToUpdate = contactById;\n        }\n      }\n\n      // 2. If not found by contact_id (or contact_id not provided), try identifier\n      if (!contactToUpdate && requestBody.identifier) {\n        console.log(`${logPrefix} Contact not found by contact_id or contact_id not provided. Attempting to find by identifier: ${requestBody.identifier}`);\n        const identifier = requestBody.identifier;\n        let query = supabaseAdmin\n          .from(TABLE_NAME)\n          .select('contact_id, first_name, last_name, email, phone') // Select all needed fields\n          .eq('user_id', userId);\n\n        if (identifier.includes('@')) { // Assume email\n          query = query.eq('email', identifier);\n        } else { // Assume name (first name, last name, or full name)\n          const nameParts = identifier.trim().split(/\\s+/);\n          query = query.ilike('first_name', `%${nameParts[0]}%`);\n          if (nameParts.length > 1) {\n            query = query.ilike('last_name', `%${nameParts.slice(1).join(' ')}%`);\n          }\n        }\n        const { data: contactsByIdentifier, error: identifierError } = await query.limit(1); // Take the first match for simplicity\n        if (identifierError) throw identifierError;\n        if (contactsByIdentifier && contactsByIdentifier.length > 0) {\n          contactToUpdate = contactsByIdentifier[0];\n        }\n      }\n\n      if (!contactToUpdate || !contactToUpdate.contact_id) {\n        console.warn(`${logPrefix} PATCH warning: Contact not found with provided identifier/contact_id.`);\n        return { statusCode: 404, body: JSON.stringify({ message: \"Contact not found with the provided details or you do not have permission.\" }), headers: COMMON_HEADERS };\n      }\n      \n      console.log(`${logPrefix} Contact found. ID for update: ${contactToUpdate.contact_id}. Applying updates.`);\n\n      // 3. Perform the update\n      const { data: updatedContact, error: updateError } = await supabaseAdmin\n        .from(TABLE_NAME)\n        .update(requestBody.updates)\n        .eq('contact_id', contactToUpdate.contact_id)\n        .eq('user_id', userId) // Ensure user owns the contact they are updating\n        .select()\n        .single();\n\n      if (updateError) {\n        console.error(`${logPrefix} Supabase PATCH update error:`, updateError.message);\n        // Check for specific error codes if needed, e.g., unique constraint violation\n        return { statusCode: 500, body: JSON.stringify({ message: `Failed to update contact: ${updateError.message}` }), headers: COMMON_HEADERS };\n      }\n\n      console.log(`${logPrefix} Successfully updated contact:`, JSON.stringify(updatedContact, null, 2));\n      return {\n        statusCode: 200,\n        body: JSON.stringify(updatedContact),\n        headers: COMMON_HEADERS,\n      };\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      console.error(`${logPrefix} Unexpected error in PATCH handler:`, errorMessage);\n      if (error instanceof Error && 'code' in error && (error as PostgrestError).code === 'PGRST116') {\n        // This can happen if the contact_id from identifier search was deleted just before update\n        return { statusCode: 404, body: JSON.stringify({ message: 'Contact not found or became unavailable during update.'}), headers: COMMON_HEADERS };\n      }\n      return {\n        statusCode: 500,\n        body: JSON.stringify({ message: `An unexpected error occurred while updating the contact: ${errorMessage}` }),\n        headers: COMMON_HEADERS,\n      };\n    }\n  } // --- End of PATCH handling ---\n\n  // --- DELETE: Delete a specific contact ---\n  else if (httpMethod === 'DELETE') {\n    // 1. Authentication & Authorization\n    const userId = getAuthenticatedUserId(event, context);\n    if (!userId) {\n      console.error(`${logPrefix} DELETE error: User not authenticated.`);\n      return {\n        statusCode: 401,\n        body: JSON.stringify({ message: \"Authentication required to delete contact.\" }),\n        headers: COMMON_HEADERS,\n      };\n    }\n    console.log(`${logPrefix} DELETE request for user ${userId}`);\n    \n    // Define our contact identifier for use across try blocks\n    let contactIdentifier: ContactIdentifier;\n\n    let requestBody: { identifier?: string; contact_id?: string };\n    try {\n      // For DELETE operations, the body might be empty if it's coming from the frontend API client\n      // that doesn't explicitly send a body with DELETE requests\n      if (!eventBodyString) {\n        console.log(`${logPrefix} Request body is missing for DELETE, checking path parameters instead.`);\n        \n        // Extract the contact ID from the path, e.g. \"/.netlify/functions/contacts/{contact_id}\"\n        const pathParts = event.path.split('/');\n        const contactIdFromPath = pathParts[pathParts.length - 1];\n        \n        if (contactIdFromPath && contactIdFromPath !== 'contacts') {\n          requestBody = { contact_id: contactIdFromPath };\n          console.log(`${logPrefix} Extracted contact_id from path: ${contactIdFromPath}`);\n        } else {\n          throw new Error(\"Request body is missing for DELETE and no contact_id found in path.\");\n        }\n      } else {\n        requestBody = JSON.parse(eventBodyString);\n      }\n      \n      if (!requestBody.identifier && !requestBody.contact_id) {\n        throw new Error(\"Either 'identifier' or 'contact_id' must be provided for DELETE.\");\n      }\n      \n      // Check for various ways to identify the contact\n      const typedBody = requestBody as { contact_id?: string; contact_name?: string; identifier?: string; email?: string };\n      \n      if (typedBody.contact_id === 'contact_id_placeholder' && typedBody.contact_name) {\n        // Handle the placeholder case with name identifier\n        console.log(`${logPrefix} Contact using name identifier: ${typedBody.contact_name}`);\n        contactIdentifier = { type: 'name', name: typedBody.contact_name };\n      } else if (typedBody.contact_id && typedBody.contact_id !== 'contact_id_placeholder') {\n        // Use contact_id if provided and not a placeholder\n        console.log(`${logPrefix} Contact using ID identifier: ${typedBody.contact_id}`);\n        contactIdentifier = { type: 'id', contact_id: typedBody.contact_id };\n      } else if (typedBody.identifier) {\n        // Use the explicit identifier field if provided (could be name, email, etc.)\n        console.log(`${logPrefix} Contact using explicit identifier: ${typedBody.identifier}`);\n        // Determine if it looks like an email\n        if (typedBody.identifier.includes('@')) {\n          contactIdentifier = { type: 'email', email: typedBody.identifier };\n        } else {\n          contactIdentifier = { type: 'name', name: typedBody.identifier };\n        }\n      } else {\n        console.error(`${logPrefix} No valid contact identifier found in request`);\n        return { \n          statusCode: 400, \n          body: JSON.stringify({ message: \"Valid contact identifier is required for deletion\" }), \n          headers: COMMON_HEADERS \n        };\n      }\n      \n      console.log(`${logPrefix} Parsed DELETE request body:`, JSON.stringify(requestBody, null, 2));\n    } catch (error: unknown) {\n      const msg = error instanceof Error ? error.message : \"Invalid request body for DELETE.\";\n      console.error(`${logPrefix} DELETE error - Invalid request body:`, msg);\n      return { statusCode: 400, body: JSON.stringify({ message: msg }), headers: COMMON_HEADERS };\n    }\n\n    try {\n      // Use our contact service to delete the contact\n      console.log(`${logPrefix} Deleting contact using contactService with identifier:`, contactIdentifier);\n      \n      const deleteResult = await contactService.deleteContact(userId, contactIdentifier);\n      \n      if (!deleteResult.success) {\n        // Handle different error cases with appropriate status codes\n        const errorCode = deleteResult.error?.code || 'UNKNOWN_ERROR';\n        let statusCode = 500;\n        \n        if (errorCode === 'CONTACT_NOT_FOUND') {\n          statusCode = 404;\n        } else if (['INVALID_ID', 'INVALID_NAME', 'INVALID_EMAIL', 'MISSING_USER_ID'].includes(errorCode)) {\n          statusCode = 400;\n        }\n        \n        console.error(`${logPrefix} Contact deletion failed: ${errorCode} - ${deleteResult.error?.message}`);\n        \n        return { \n          statusCode, \n          body: JSON.stringify({\n            message: deleteResult.error?.message || 'Failed to delete contact',\n            error: errorCode\n          }), \n          headers: COMMON_HEADERS \n        };\n      }\n      \n      // Deletion successful\n      const contactDetails = deleteResult.data?.name \n        ? `\"${deleteResult.data.name}\" (ID: ${deleteResult.data.contact_id})` \n        : `ID: ${deleteResult.data?.contact_id}`;\n        \n      console.log(`${logPrefix} Successfully deleted contact ${contactDetails} for user ${userId}`);\n      \n      return {\n        statusCode: 200,\n        body: JSON.stringify({ \n          message: \"Contact deleted successfully\",\n          contact_id: deleteResult.data?.contact_id\n        }),\n        headers: COMMON_HEADERS\n      };\n\n    } catch (error) {\n      console.error(`${logPrefix} Unexpected error in DELETE handler:`, error);\n      return {\n        statusCode: 500,\n        body: JSON.stringify({ message: \"An unexpected error occurred while deleting the contact.\" }),\n        headers: COMMON_HEADERS,\n      };\n    }\n  } // --- End of DELETE handling ---\n\n  // --- Method Not Allowed for other HTTP methods ---\n  else {\n    console.log(`${logPrefix} Method Not Allowed: ${httpMethod}`);\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ message: `Method ${httpMethod} Not Allowed on /contacts` }),\n      headers: { ...COMMON_HEADERS, 'Allow': 'POST, GET, PUT, DELETE, PATCH' },\n    };\n  }\n};\n\nexport { handler };\n"]}
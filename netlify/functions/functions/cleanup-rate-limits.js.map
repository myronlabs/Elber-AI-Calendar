{"version":3,"file":"cleanup-rate-limits.js","sourceRoot":"","sources":["../../../src/backend/functions/cleanup-rate-limits.ts"],"names":[],"mappings":";;;AAEA,yDAA0D;AAE1D;;;GAGG;AACH,MAAM,OAAO,GAAY,KAAK,EAAE,MAAoB,EAAE,QAAwB,EAAE,EAAE;IAChF,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;IAE9C,IAAI,CAAC;QACH,MAAM,6BAAe,CAAC,OAAO,EAAE,CAAC;QAEhC,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,2CAA2C;gBACpD,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC;YACF,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;SAChD,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;QAEzD,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,iCAAiC;gBAC1C,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;gBAC/D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC;YACF,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;SAChD,CAAC;IACJ,CAAC;AACH,CAAC,CAAC;AAEO,0BAAO","sourcesContent":["// src/backend/functions/cleanup-rate-limits.ts\nimport { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport { authRateLimiter } from '../services/rateLimiter';\n\n/**\n * Scheduled function to clean up old rate limit entries\n * Should be run periodically (e.g., daily) via Netlify scheduled functions\n */\nconst handler: Handler = async (_event: HandlerEvent, _context: HandlerContext) => {\n  console.log('Starting rate limit cleanup...');\n  \n  try {\n    await authRateLimiter.cleanup();\n    \n    return {\n      statusCode: 200,\n      body: JSON.stringify({ \n        message: 'Rate limit cleanup completed successfully',\n        timestamp: new Date().toISOString()\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  } catch (error) {\n    console.error('Error during rate limit cleanup:', error);\n    \n    return {\n      statusCode: 500,\n      body: JSON.stringify({ \n        message: 'Error during rate limit cleanup',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString()\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    };\n  }\n};\n\nexport { handler };"]}
{"version":3,"file":"google-contacts.js","sourceRoot":"","sources":["../../../src/backend/functions/google-contacts.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Handler, HandlerEvent, HandlerContext } from \"@netlify/functions\";\nimport { \n  supabaseAdmin,\n  oauthConfigService,\n  TokenNotFoundError,\n  TokenExpiredError,\n  TokenRefreshError,\n  InsufficientScopeError\n} from '../services';\nimport { google, people_v1 } from 'googleapis';\nimport { v4 as uuidv4 } from 'uuid';\nimport type { ContactCreatePayload } from './services/types';\nimport { GOOGLE_REQUIRED_SCOPES, isInsufficientScopeError, isApiNotEnabledError } from './_shared/googleConstants';\n// ImportQueueItem removed - not used in this file\n\n// Define interface for the GET request's response\ninterface GoogleContactsGETResponse {\n  contacts: people_v1.Schema$Person[];\n  nextPageToken: string | null;\n  totalCount: number;\n}\n\n// Define interface for the POST request's body\ninterface GoogleContactsPOSTRequest {\n  contactsToImport: string[];\n}\n\n// OAuth configuration is now managed by the oauthConfigService\nconst googleConfig = oauthConfigService.getGoogleConfig();\n\n// Log configuration on function initialization for debugging (not in requests)\nconsole.log('[google-contacts] Function loaded with config:', {\n  clientIdPresent: !!googleConfig.clientId,\n  clientSecretPresent: !!googleConfig.clientSecret,\n  redirectUri: googleConfig.redirectUri,\n  nodeEnv: process.env.NODE_ENV\n});\n\nconst COMMON_HEADERS = {\n  'Content-Type': 'application/json',\n  'Cache-Control': 'no-store, max-age=0'\n};\n\ninterface GoogleContact {\n  resourceName: string;\n  etag: string;\n  names?: Array<{\n    displayName?: string;\n    familyName?: string;\n    givenName?: string;\n    middleName?: string;\n  }>;\n  emailAddresses?: Array<{\n    value?: string;\n    type?: string;\n    formattedType?: string;\n  }>;\n  phoneNumbers?: Array<{\n    value?: string;\n    type?: string;\n    formattedType?: string;\n  }>;\n  organizations?: Array<{\n    name?: string;\n    title?: string;\n    type?: string;\n    formattedType?: string;\n  }>;\n  addresses?: Array<{\n    formattedValue?: string;\n    type?: string;\n    formattedType?: string;\n  }>;\n  biographies?: Array<{\n    value?: string;\n    contentType?: string;\n  }>;\n  urls?: Array<{\n    value?: string;\n    type?: string;\n    formattedType?: string;\n  }>;\n  birthdays?: Array<{\n    date?: {\n      year?: number;\n      month?: number;\n      day?: number;\n    };\n  }>;\n  nicknames?: Array<{\n    value?: string;\n  }>;\n}\n\n// Helper function to get authenticated user ID\nconst getAuthenticatedUserId = async (event: HandlerEvent): Promise<string | null> => {\n  const authHeader = event.headers.authorization;\n  if (!authHeader) return null;\n\n  const token = authHeader.split(' ')[1];\n  const { data: { user }, error } = await supabaseAdmin.auth.getUser(token);\n  \n  if (error || !user) return null;\n  return user.id;\n};\n\n// Helper function to get OAuth token for a user using the centralized service\nconst getUserOAuthToken = async (userId: string): Promise<string | null> => {\n  console.log(`Looking up OAuth token for user: ${userId}`);\n\n  try {\n    // First look for token specifically for this user\n    const { data, error: fetchError } = await supabaseAdmin\n      .from('oauth_connections')\n      .select('*')\n      .eq('user_id', userId)\n      .eq('provider', 'google')\n      .maybeSingle();\n\n    if (fetchError) {\n      console.error(`Error fetching OAuth token for user ${userId}:`, fetchError);\n      return null;\n    }\n\n    if (!data) {\n      console.log(`No Google OAuth token found for user ${userId}. User needs to authenticate or re-authenticate.`);\n      return null;\n    }\n\n    console.log(`Found OAuth token for user ${userId}, expires_at: ${data.expires_at || 'not set'}`);\n\n    // Check if token is expired and refresh if needed\n    if (data.expires_at && new Date(data.expires_at) < new Date()) {\n      console.log(`Token is expired for user ${userId}, attempting to refresh`);\n\n      if (!data.refresh_token) {\n        console.log(`No refresh token available for user ${userId}, need to reauthenticate`);\n        return null;\n      }\n\n      try {\n        const oauth2Client = new google.auth.OAuth2(\n          googleConfig.clientId, // Using googleConfig from outer scope\n          googleConfig.clientSecret, // Using googleConfig from outer scope\n          googleConfig.redirectUri // Using googleConfig from outer scope\n        );\n\n        oauth2Client.setCredentials({\n          refresh_token: data.refresh_token\n        });\n\n        const { credentials } = await oauth2Client.refreshAccessToken();\n        console.log(`Successfully refreshed token for user ${userId}`);\n\n        await supabaseAdmin\n          .from('oauth_connections')\n          .update({\n            access_token: credentials.access_token,\n            expires_at: credentials.expiry_date ? new Date(credentials.expiry_date).toISOString() : null,\n            updated_at: new Date().toISOString()\n          })\n          .eq('id', data.id);\n\n        return credentials.access_token || null;\n      } catch (error) {\n        console.error(`Error refreshing token for user ${userId}:`, error);\n        return null;\n      }\n    }\n\n    console.log(`Returning valid access token for user ${userId}`);\n    return data.access_token;\n  } catch (error) {\n    if (error instanceof TokenNotFoundError) {\n      console.error(`No OAuth token found for user ${userId}`);\n      return null;\n    } else if (error instanceof TokenExpiredError) {\n      console.error(`OAuth token expired for user ${userId} and could not be refreshed`);\n      return null;\n    } else if (error instanceof TokenRefreshError) {\n      console.error(`Error refreshing token for user ${userId}:`, error.message);\n      return null;\n    } else if (error instanceof InsufficientScopeError) {\n      console.error(`Insufficient OAuth scopes for user ${userId}. Required: ${error.requiredScopes.join(', ')}`);\n      return null;\n    } else {\n      console.error(`Error getting OAuth token for user ${userId}:`, error);\n      return null;\n    }\n  }\n};\n\n// Helper function to convert Google Contact to ContactCreatePayload\nconst googleContactToElberContact = (googleContact: GoogleContact): ContactCreatePayload & { google_contact_id?: string } => {\n  // Get name information\n  let firstName = '';\n  let middleName: string | null = null;\n  let lastName: string | null = null;\n\n  if (googleContact.names && googleContact.names.length > 0) {\n    const name = googleContact.names[0];\n    firstName = name.givenName || 'Unknown';\n    middleName = name.middleName || null;\n    lastName = name.familyName || null;\n  } else {\n    firstName = 'Google'; // Fallback name if no name is provided\n  }\n\n  const contact: ContactCreatePayload & { google_contact_id?: string } = {\n    first_name: firstName,\n    last_name: lastName,\n    middle_name: middleName\n  };\n\n  // Store Google resource ID for reference\n  contact.google_contact_id = googleContact.resourceName;\n\n  // Process nicknames\n  if (googleContact.nicknames && googleContact.nicknames.length > 0) {\n    contact.nickname = googleContact.nicknames[0].value || null;\n  }\n\n  // Process email addresses (take the first one)\n  if (googleContact.emailAddresses && googleContact.emailAddresses.length > 0) {\n    contact.email = googleContact.emailAddresses[0].value || null;\n  }\n\n  // Process phone numbers (take the first one)\n  if (googleContact.phoneNumbers && googleContact.phoneNumbers.length > 0) {\n    contact.phone = googleContact.phoneNumbers[0].value || null;\n  }\n\n  // Process organizations (take the first one)\n  if (googleContact.organizations && googleContact.organizations.length > 0) {\n    const org = googleContact.organizations[0];\n    contact.company = org.name || null;\n    contact.job_title = org.title || null;\n  }\n\n  // Process addresses (take the first one)\n  if (googleContact.addresses && googleContact.addresses.length > 0) {\n    // Store the full formatted address\n    contact.formatted_address = googleContact.addresses[0].formattedValue || null;\n    \n    // With Google Contacts API, we primarily get the formatted address\n    // We don't attempt to parse individual components as they're not reliably available\n    // in the standard format we receive from the API\n  }\n\n  // Process websites (take the first one)\n  if (googleContact.urls && googleContact.urls.length > 0) {\n    contact.website = googleContact.urls[0].value || null;\n  }\n\n  // Process birthdays\n  if (googleContact.birthdays && googleContact.birthdays.length > 0) {\n    const birthday = googleContact.birthdays[0].date;\n    if (birthday && birthday.year && birthday.month && birthday.day) {\n      // Format as YYYY-MM-DD\n      contact.birthday = `${birthday.year}-${String(birthday.month).padStart(2, '0')}-${String(birthday.day).padStart(2, '0')}`;\n    }\n  }\n\n  // Process biography/notes\n  if (googleContact.biographies && googleContact.biographies.length > 0) {\n    contact.notes = googleContact.biographies[0].value || null;\n  }\n\n  return contact;\n};\n\n// Implement the handler\nconst handler: Handler = async (event: HandlerEvent, _context: HandlerContext) => {\n  const { httpMethod, body: eventBodyString } = event;\n  const logPrefix = `[google-contacts:${httpMethod}]`;\n\n  // 1. Authentication & authorization\n  const userId = await getAuthenticatedUserId(event);\n  if (!userId) {\n    return {\n      statusCode: 401,\n      body: JSON.stringify({ message: \"Authentication required.\" }),\n      headers: COMMON_HEADERS,\n    };\n  }\n\n  // GET: Fetch contacts from Google\n  if (httpMethod === 'GET') {\n    try {\n      // Get OAuth token - log the request for debugging\n      console.log(`${logPrefix} Attempting to get OAuth token for user ${userId}`);\n\n      // First attempt to get token for authenticated user\n      const accessToken = await getUserOAuthToken(userId);\n\n      // Log result of dedicated token fetch\n      console.log(`${logPrefix} Token specifically for user ${userId} found: ${!!accessToken}`);\n\n      if (!accessToken) {\n        return {\n          statusCode: 401,\n          body: JSON.stringify({ message: \"Google account not connected or authorization expired. Please reconnect your account.\" }),\n          headers: COMMON_HEADERS,\n        };\n      }\n      \n      // Set up People API client\n      const oauth2Client = new google.auth.OAuth2();\n      oauth2Client.setCredentials({ access_token: accessToken });\n      \n      const peopleApi = google.people({ version: 'v1', auth: oauth2Client });\n      \n      // Fetch contacts\n      const pageToken = event.queryStringParameters?.pageToken || undefined;\n      const pageSize = 100; // Fetch 100 contacts per page\n\n      const response = await peopleApi.people.connections.list({\n        resourceName: 'people/me',\n        pageSize: pageSize,\n        pageToken: pageToken,\n        personFields: 'names,emailAddresses,phoneNumbers,organizations,addresses,biographies,urls,birthdays,nicknames',\n        // Request totalPeople to get the overall count of connections\n        requestSyncToken: false, // Set to false if not using sync tokens, to potentially get totalPeople\n      });\n      \n      const connections = response.data.connections || [];\n      const nextPageToken = response.data.nextPageToken || null;\n      const totalPeople = response.data.totalPeople || 0; // Total connections for the user\n      \n      return {\n        statusCode: 200,\n        body: JSON.stringify({ \n          contacts: connections,\n          nextPageToken: nextPageToken,\n          totalCount: totalPeople, // Use totalPeople for the overall count\n        } as GoogleContactsGETResponse),\n        headers: COMMON_HEADERS,\n      };\n    } catch (error) {\n      console.error(`${logPrefix} Error fetching Google contacts:`, error);\n\n      // Check for specific Google API errors\n      const errorMessage = error instanceof Error ? error.message : String(error);\n\n      // Check for People API not enabled error\n      if (isApiNotEnabledError(errorMessage)) {\n        return {\n          statusCode: 503, // Service Unavailable\n          body: JSON.stringify({\n            message: \"Google People API is not enabled for this project. Please enable it in Google Cloud Console.\",\n            details: \"This application needs access to the Google People API. The API must be enabled in the Google Cloud Console for this project.\",\n            setup_required: true,\n            error: errorMessage\n          }),\n          headers: COMMON_HEADERS,\n        };\n      }\n\n      // Check for insufficient scopes error\n      if (isInsufficientScopeError(errorMessage)) {\n        \n        // Extract scope information from the www-authenticate header if available\n        const errorObj = error as { response?: { headers?: { 'www-authenticate'?: string } } };\n        const wwwAuthHeader = errorObj.response?.headers?.['www-authenticate'] || '';\n        const scopeMatch = wwwAuthHeader.match(/scope=\"([^\"]+)\"/);\n        const suggestedScopes = scopeMatch ? scopeMatch[1].split(' ') : GOOGLE_REQUIRED_SCOPES;\n        \n        // Log the detailed error information\n        console.log(`${logPrefix} Insufficient permissions detected. Required scopes: ${GOOGLE_REQUIRED_SCOPES.join(', ')}`);\n        console.log(`${logPrefix} Suggested scopes from error: ${suggestedScopes.join(', ')}`);\n        \n        // Clear the oauth connection to force re-authentication with correct scopes\n        console.log(`${logPrefix} Clearing OAuth connection for user ${userId} due to insufficient scopes`);\n        await supabaseAdmin\n          .from('oauth_connections')\n          .delete()\n          .eq('user_id', userId)\n          .eq('provider', 'google');\n\n        return {\n          statusCode: 401,\n          body: JSON.stringify({\n            message: \"Insufficient permissions to access Google contacts. Please reconnect your Google account.\",\n            details: \"Your Google authorization doesn't include permission to access contacts. Please reconnect to grant the required permissions.\",\n            reauth_required: true,\n            required_scopes: GOOGLE_REQUIRED_SCOPES,\n            suggested_scopes: suggestedScopes,\n            error: errorMessage\n          }),\n          headers: COMMON_HEADERS,\n        };\n      }\n\n      return {\n        statusCode: 500,\n        body: JSON.stringify({\n          message: \"Failed to fetch Google contacts\",\n          error: errorMessage\n        }),\n        headers: COMMON_HEADERS,\n      };\n    }\n  }\n  \n  // POST: Import selected Google contacts\n  if (httpMethod === 'POST') {\n    try {\n      if (!eventBodyString) {\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ message: \"Request body is missing.\" }),\n          headers: COMMON_HEADERS,\n        };\n      }\n      \n      const requestBody: GoogleContactsPOSTRequest = JSON.parse(eventBodyString);\n      const { contactsToImport } = requestBody;\n      \n      if (!Array.isArray(contactsToImport) || contactsToImport.length === 0) {\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ message: \"The 'contactsToImport' field must be a non-empty array of Google contact resource names.\" }),\n          headers: COMMON_HEADERS,\n        };\n      }\n      \n      // Get OAuth token - log the request for debugging\n      console.log(`${logPrefix} Attempting to get OAuth token for user ${userId} for contact import`);\n\n      // First attempt to get token for authenticated user\n      const accessToken = await getUserOAuthToken(userId);\n\n      // Log result of dedicated token fetch for import\n      console.log(`${logPrefix} Token specifically for user ${userId} for import found: ${!!accessToken}`);\n\n      if (!accessToken) {\n        return {\n          statusCode: 401,\n          body: JSON.stringify({ message: \"Google account not connected or authorization expired. Please reconnect your account.\" }),\n          headers: COMMON_HEADERS,\n        };\n      }\n      \n      // Set up People API client\n      const oauth2Client = new google.auth.OAuth2();\n      oauth2Client.setCredentials({ access_token: accessToken });\n      \n      const peopleApi = google.people({ version: 'v1', auth: oauth2Client });\n      \n      // Create a batch import ID\n      const importBatchId = uuidv4();\n      \n      // Fetch contact details for each resourceName\n      const elberContacts: ContactCreatePayload[] = [];\n      const errors: Array<{ message: string; code?: string; details?: unknown }> = [];\n      \n      // Use smaller batch sizes to avoid timeouts on serverless functions\n      // Netlify Functions have a 10 second timeout, so we need to limit how many we process at once\n      const BATCH_SIZE = 10; // Reduced from 50 to avoid timeouts\n\n      // We'll use a more robust approach that can handle all contacts\n      // First fetch details for all contacts selected for import\n      // const totalBatches = Math.ceil(contactsToImport.length / BATCH_SIZE); // Removed - not used\n      let processedCount = 0;\n      const FETCH_LIMIT = 100; // Maximum contacts to process in a single function call (Reduced from 500)\n\n      // Process contacts in larger batches to prevent timeouts\n      // This will return data for the first batch immediately and store the rest for background processing\n      const processableBatchSize = Math.min(contactsToImport.length, FETCH_LIMIT);\n      const initialContactsToImport = contactsToImport.slice(0, processableBatchSize);\n      const remainingContactsToImport = contactsToImport.length > FETCH_LIMIT ?\n        contactsToImport.slice(FETCH_LIMIT) : [];\n\n      // Initialize queue record variable outside the conditional block to ensure scope\n      let processingQueueId: string | null = null;\n\n      // Start background processing for remaining contacts if needed\n      if (remainingContactsToImport.length > 0) {\n        console.log(`${logPrefix} Scheduling background processing for ${remainingContactsToImport.length} additional contacts`);\n\n        // Store remaining contacts in a temporary processing queue\n        const { data: queueRecord, error: queueError } = await supabaseAdmin\n          .from('import_processing_queue')\n          .insert({\n            user_id: userId,\n            provider: 'google',\n            contacts_to_import: remainingContactsToImport,\n            status: 'pending',\n            created_at: new Date().toISOString(),\n            batch_size: BATCH_SIZE,\n            import_batch_id: importBatchId // Add import_batch_id to maintain consistency\n          })\n          .select()\n          .single();\n\n        if (queueError) {\n          console.error(`${logPrefix} Failed to queue remaining contacts for processing:`, queueError);\n        } else if (queueRecord) {\n          processingQueueId = queueRecord.id;\n          console.log(`${logPrefix} Successfully queued ${remainingContactsToImport.length} contacts for background processing with ID: ${processingQueueId}`);\n        }\n      }\n\n      // Process initial batch immediately\n      console.log(`${logPrefix} Processing initial batch of ${initialContactsToImport.length} contacts using getBatchGet.`);\n      if (initialContactsToImport.length > 0) {\n        try {\n          const batchGetResponse = await peopleApi.people.getBatchGet({\n            resourceNames: initialContactsToImport, // Pass all resource names for the initial batch\n            personFields: 'names,emailAddresses,phoneNumbers,organizations,addresses,biographies,urls,birthdays,nicknames',\n          });\n\n          if (batchGetResponse.data.responses) {\n            for (const personResponse of batchGetResponse.data.responses) {\n              if (personResponse.person && personResponse.person.resourceName) {\n                // Successfully fetched person\n                const elberContact = googleContactToElberContact(personResponse.person as GoogleContact);\n                elberContacts.push(elberContact);\n                processedCount++; // Increment processedCount here\n              } else if (personResponse.status) {\n                // Error for this specific person\n                const resourceNameWithError = personResponse.requestedResourceName || 'unknown resource';\n                errors.push({\n                  code: 'GOOGLE_API_ERROR',\n                  message: `Failed to fetch contact details for ${resourceNameWithError}: ${personResponse.status.message || 'Unknown error'}`,\n                  details: { resourceName: resourceNameWithError, status: personResponse.status }\n                });\n                console.error(`${logPrefix} Error fetching contact ${resourceNameWithError}: ${personResponse.status.message}`);\n              }\n            }\n          }\n          console.log(`${logPrefix} Processed ${processedCount} contacts from initial batch via getBatchGet.`);\n        } catch (error) {\n          console.error(`${logPrefix} Error in getBatchGet processing:`, error);\n          errors.push({\n            code: 'BATCH_GET_PROCESSING_ERROR',\n            message: `Failed to process initial batch with getBatchGet`,\n            details: error instanceof Error ? error.message : String(error)\n          });\n        }\n      }\n      \n      // Create import history record\n      const { data: importHistoryRecord, error: importHistoryError } = await supabaseAdmin\n        .from('import_history')\n        .insert([{\n          user_id: userId,\n          source: 'google',\n          total_contacts: contactsToImport.length,\n          successful_imports: 0, // Will update after processing\n          failed_imports: 0, // Will update after processing\n          status: 'processing',\n          created_at: new Date().toISOString()\n        }])\n        .select('*')\n        .single();\n\n      if (importHistoryError || !importHistoryRecord) {\n        console.error(`${logPrefix} Failed to create import history record:`, importHistoryError);\n      }\n\n      // Import contacts in batches to the contacts table\n      const CONTACTS_BATCH_SIZE = 50;\n      let successfulImports = 0;\n      let failedImports = 0;\n      const importErrors: Array<{ message: string; code?: string; details?: unknown }> = [];\n\n      for (let i = 0; i < elberContacts.length; i += CONTACTS_BATCH_SIZE) {\n        const contactsBatch = elberContacts.slice(i, i + CONTACTS_BATCH_SIZE);\n\n        try {\n          // Prepare contacts with user_id and import metadata\n          const contactsToInsert = contactsBatch.map(contact => ({\n            ...contact,\n            user_id: userId,\n            import_source: 'google',\n            import_batch_id: importBatchId,\n            imported_at: new Date().toISOString()\n          }));\n\n          // Insert contacts\n          const { data, error } = await supabaseAdmin\n            .from('contacts')\n            .insert(contactsToInsert)\n            .select('contact_id');\n\n          if (error) {\n            console.error(`${logPrefix} Error inserting contacts batch:`, error);\n            failedImports += contactsBatch.length;\n            importErrors.push({\n              code: 'DATABASE_ERROR',\n              message: `Failed to insert contacts batch: ${error.message}`,\n              details: error\n            });\n          } else {\n            successfulImports += data.length;\n            failedImports += contactsBatch.length - data.length;\n          }\n        } catch (error) {\n          console.error(`${logPrefix} Error in contacts batch processing:`, error);\n          failedImports += contactsBatch.length;\n          importErrors.push({\n            code: 'BATCH_PROCESSING_ERROR',\n            message: `Failed to process contacts batch ${Math.floor(i/CONTACTS_BATCH_SIZE) + 1}`,\n            details: error instanceof Error ? error.message : String(error)\n          });\n        }\n      }\n\n      // Update import history record for the initial batch\n      if (importHistoryRecord) {\n        await supabaseAdmin\n          .from('import_history')\n          .update({\n            successful_imports: successfulImports,\n            failed_imports: failedImports,\n            status: remainingContactsToImport.length > 0 ? 'partial' :\n                   (failedImports === elberContacts.length ? 'failed' :\n                   successfulImports === elberContacts.length ? 'completed' : 'partial'),\n            error_details: importErrors.length > 0 ? importErrors : null,\n            completed_at: remainingContactsToImport.length > 0 ? null : new Date().toISOString()\n          })\n          .eq('id', importHistoryRecord.id);\n      }\n\n      // Determine background processing status\n      const backgroundProcessingStarted = remainingContactsToImport.length > 0;\n\n      // Construct response\n      return {\n        statusCode: 200,\n        body: JSON.stringify({\n          message: remainingContactsToImport.length > 0 ?\n                  \"Google contacts import partially completed, background processing started\" :\n                  \"Google contacts import completed\",\n          importBatchId,\n          totalRequested: contactsToImport.length,\n          totalProcessed: elberContacts.length,\n          successfulImports,\n          failedImports,\n          errors: [...errors, ...importErrors],\n          remainingCount: remainingContactsToImport.length,\n          backgroundProcessingStarted,\n          processingQueueId: backgroundProcessingStarted ? processingQueueId : null\n        }),\n        headers: COMMON_HEADERS,\n      };\n    } catch (error) {\n      console.error(`${logPrefix} Error importing Google contacts:`, error);\n      \n      // Check for insufficient scopes error in POST as well\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      \n      if (isInsufficientScopeError(errorMessage)) {\n        \n        // Log the detailed error information\n        console.log(`${logPrefix} Insufficient permissions detected during import. Required scopes: ${GOOGLE_REQUIRED_SCOPES.join(', ')}`);\n        \n        // Clear the oauth connection to force re-authentication with correct scopes\n        console.log(`${logPrefix} Clearing OAuth connection for user ${userId} due to insufficient scopes during import`);\n        await supabaseAdmin\n          .from('oauth_connections')\n          .delete()\n          .eq('user_id', userId)\n          .eq('provider', 'google');\n\n        return {\n          statusCode: 401,\n          body: JSON.stringify({\n            message: \"Insufficient permissions to access Google contacts. Please reconnect your Google account.\",\n            details: \"Your Google authorization doesn't include permission to access contacts. Please reconnect to grant the required permissions.\",\n            reauth_required: true,\n            required_scopes: GOOGLE_REQUIRED_SCOPES,\n            error: errorMessage\n          }),\n          headers: COMMON_HEADERS,\n        };\n      }\n      \n      return {\n        statusCode: 500,\n        body: JSON.stringify({ \n          message: \"Failed to import Google contacts\",\n          error: errorMessage\n        }),\n        headers: COMMON_HEADERS,\n      };\n    }\n  }\n\n  return {\n    statusCode: 405,\n    body: JSON.stringify({ message: `Method ${httpMethod} Not Allowed` }),\n    headers: { ...COMMON_HEADERS, 'Allow': 'GET, POST' },\n  };\n};\n\nexport { handler };"]}